{"version":3,"sources":["app/server.es6"],"names":["HttpApplication","AngularServerModule","ODataConventionModelBuilder","ODataModelBuilder","app","useStaticContent","useService","getService","useBootstrapModule","mapExecutionPath","getConfiguration","useStrategy","builder","getStrategy","hasContextLink","context","req","request","protocol","headers","host","initialize","then","start"],"mappings":";;AAQA;;AACA;;IAAQA,e,QAAAA,e;;AACR;;IAAQC,mB,WAAAA,mB;;AACR;;IAAQC,2B,UAAAA,2B;IAA6BC,iB,UAAAA,iB;;AACrC;AAZA;;;;;;;;AAaA,IAAIC,MAAM,IAAIJ,eAAJ,CAAoB,YAApB,CAAV;AACA;AACAI,IAAIC,gBAAJ,CAAqB,gBAArB;;AAEAD,IAAIE,UAAJ,CAAeL,mBAAf,EACKM,UADL,CACgBN,mBADhB,EAEKO,kBAFL,CAEwBJ,IAAIK,gBAAJ,CAAqB,sBAArB,CAFxB;;AAIAL,IAAIM,gBAAJ,GAAuBC,WAAvB,CAAmCR,iBAAnC,EAAqDD,2BAArD;;AAEA,IAAMU,UAAUR,IAAIM,gBAAJ,GAAuBG,WAAvB,CAAmCV,iBAAnC,CAAhB;AACAS,QAAQE,cAAR,CAAuB,UAASC,OAAT,EAAkB;AACrC,QAAMC,MAAMD,QAAQE,OAApB;AACA,QAAMC,WAAWF,IAAIE,QAAJ,IAAgB,MAAjC;AACA,WAAUA,QAAV,WAAwBF,IAAIG,OAAJ,CAAYC,IAApC;AACH,CAJD;AAKAR,QAAQS,UAAR,GAAqBC,IAArB,CAA0B,YAAW;AACjClB,QAAImB,KAAJ;AACH,CAFD","file":"server.js","sourcesContent":["/**\r\n * @license\r\n * MOST Web Framework 2.0 Codename Blueshift\r\n * Copyright (c) 2017, THEMOST LP All rights reserved\r\n *\r\n * Use of this source code is governed by an BSD-3-Clause license that can be\r\n * found in the LICENSE file at https://themost.io/license\r\n */\r\nimport 'source-map-support/register';\r\nimport {HttpApplication} from '../../modules/@themost/web/app';\r\nimport {AngularServerModule} from \"../../modules/@themost/web/angular/module\";\r\nimport {ODataConventionModelBuilder, ODataModelBuilder} from \"../../modules/@themost/data/odata\";\r\n//initialize application\r\nlet app = new HttpApplication('./test/app');\r\n//use static content\r\napp.useStaticContent('./test/app/app');\r\n\r\napp.useService(AngularServerModule)\r\n    .getService(AngularServerModule)\r\n    .useBootstrapModule(app.mapExecutionPath('./modules/server-app'));\r\n\r\napp.getConfiguration().useStrategy(ODataModelBuilder,ODataConventionModelBuilder);\r\n\r\nconst builder = app.getConfiguration().getStrategy(ODataModelBuilder);\r\nbuilder.hasContextLink(function(context) {\r\n    const req = context.request;\r\n    const protocol = req.protocol || \"http\";\r\n    return `${protocol}://${req.headers.host}/api/v4/`;\r\n});\r\nbuilder.initialize().then(function() {\r\n    app.start();\r\n});\r\n\r\n\r\n"]}