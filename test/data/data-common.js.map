{"version":3,"sources":["data-common.es6"],"names":["path","ConfigurationBase","DataConfigurationStrategy","DefaultDataContext","TraceUtils","XDocument","_","format","ODataConventionModelBuilder","ODataModelBuilder","TestDataContext","configuration","getConfiguration","describe","config","resolve","process","cwd","useStrategy","it","done","context","getStrategy","model","where","equal","expand","getTypedItem","then","user","log","finalize","catch","err","builder","addEntity","getEdm","edm","console","JSON","stringify","initialize","getEdmDocument","doc","outerXML"],"mappings":"AAAA;;AACA;;AACA;;IAAOA,I;;AACP;;IAAQC,iB,WAAAA,iB;;AACR;;IAAQC,yB,YAAAA,yB;;AACR;;IAAQC,kB,YAAAA,kB;;AACR;;IAAQC,U,UAAAA,U;;AACR;;IAAQC,S,YAAAA,S;;AACR;;IAAOC,C;;AACP;;IAAOC,M;;AACP;;IAAQC,2B,UAAAA,2B;IAA6BC,iB,UAAAA,iB;;;;;;;;;;IAE/BC,e;;;AACF;;;AAGA,6BAAYC,aAAZ,EAA2B;AAAA;;AAAA;;AAEvB,cAAKC,gBAAL,GAAwB;AAAA,mBAAKD,aAAL;AAAA,SAAxB;AAFuB;AAG1B;;;EAPyBR,kB;;AAU9BU,SAAS,wBAAT,EAAmC,YAAW;AAC1C,QAAMC,SAAU,IAAIb,iBAAJ,CAAsBD,KAAKe,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4B,mBAA5B,CAAtB,CAAhB;AACAH,WAAOI,WAAP,CAAmBhB,yBAAnB,EAA8CA,yBAA9C;AACAiB,OAAG,2BAAH,EAAgC,UAACC,IAAD,EAAS;AACrC;AACA,YAAMC,UAAU,IAAIX,eAAJ,CAAoBI,OAAOQ,WAAP,CAAmBpB,yBAAnB,CAApB,CAAhB;AACAmB,gBAAQE,KAAR,CAAc,MAAd,EAAsBC,KAAtB,CAA4B,MAA5B,EACKC,KADL,CACW,8BADX,EAEKC,MAFL,CAEY,QAFZ,EAGKC,YAHL,GAGoBC,IAHpB,CAGyB,UAACC,IAAD,EAAS;AAC1BzB,uBAAW0B,GAAX,CAAeD,IAAf;AACAR,oBAAQU,QAAR,CAAiB,YAAK;AAClB,uBAAOX,MAAP;AACH,aAFD;AAGP,SARD,EAQGY,KARH,CAQS,UAACC,GAAD,EAAQ;AACbZ,oBAAQU,QAAR,CAAiB,YAAK;AAClB,uBAAOX,KAAKa,GAAL,CAAP;AACH,aAFD;AAGH,SAZD;AAaH,KAhBD;;AAkBAd,OAAG,gCAAH,EAAqC,UAACC,IAAD,EAAS;AAC1CN,eAAOI,WAAP,CAAmBT,iBAAnB,EAAsCD,2BAAtC;AACA;;;AAGA,YAAM0B,UAAUpB,OAAOQ,WAAP,CAAmBb,iBAAnB,CAAhB;AACAyB,gBAAQC,SAAR,CAAkB,MAAlB;AACAD,gBAAQE,MAAR,GAAiBR,IAAjB,CAAsB,UAACS,GAAD,EAAQ;AAC1BC,oBAAQR,GAAR,CAAYS,KAAKC,SAAL,CAAeH,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAZ;AACA,mBAAOjB,MAAP;AACH,SAHD,EAGGY,KAHH,CAGS,UAACC,GAAD,EAAQ;AACb,mBAAOb,KAAKa,GAAL,CAAP;AACH,SALD;AAMH,KAbD;;AAeAd,OAAG,wBAAH,EAA6B,UAACC,IAAD,EAAS;AAClCN,eAAOI,WAAP,CAAmBT,iBAAnB,EAAsCD,2BAAtC;AACA;;;AAGA,YAAM0B,UAAUpB,OAAOQ,WAAP,CAAmBb,iBAAnB,CAAhB;;AAEAyB,gBAAQO,UAAR,GAAqBb,IAArB,CAA0B,YAAM;AAC5B,mBAAOM,QAAQQ,cAAR,GAAyBd,IAAzB,CAA8B,UAACe,GAAD,EAAQ;AACzCL,wBAAQR,GAAR,CAAYvB,OAAOoC,IAAIC,QAAJ,EAAP,CAAZ;AACA,uBAAOxB,MAAP;AACH,aAHM,CAAP;AAIH,SALD,EAKGY,KALH,CAKS,UAACC,GAAD,EAAQ;AACb,mBAAOb,KAAKa,GAAL,CAAP;AACH,SAPD;AAUH,KAjBD;AAmBH,CAvDD","file":"data-common.js","sourcesContent":["'use strict';\nimport 'source-map-support/register';\nimport path from 'path';\nimport {ConfigurationBase} from \"../../modules/@themost/common/config\";\nimport {DataConfigurationStrategy} from \"../../modules/@themost/data/config\";\nimport {DefaultDataContext} from \"../../modules/@themost/data/context\";\nimport {TraceUtils} from \"../../modules/@themost/common/utils\";\nimport {XDocument} from 'most-xml';\nimport _ from 'lodash';\nimport format from 'xml-formatter';\nimport {ODataConventionModelBuilder, ODataModelBuilder} from \"../../modules/@themost/data/odata\";\n\nclass TestDataContext extends DefaultDataContext {\n    /**\n     * @param {DataConfigurationStrategy=} configuration\n     */\n    constructor(configuration) {\n        super();\n        this.getConfiguration = ()=> configuration;\n    }\n}\n\ndescribe('most data common tests', function() {\n    const config  = new ConfigurationBase(path.resolve(process.cwd(), \"./test/app/config\"));\n    config.useStrategy(DataConfigurationStrategy, DataConfigurationStrategy);\n    it('should use query resolver', (done)=> {\n        //initialize\n        const context = new TestDataContext(config.getStrategy(DataConfigurationStrategy));\n        context.model('User').where('name')\n            .equal('victoria.hartley@example.com')\n            .expand('groups')\n            .getTypedItem().then((user)=> {\n                TraceUtils.log(user);\n                context.finalize(()=> {\n                    return done();\n                });\n        }).catch((err)=> {\n            context.finalize(()=> {\n                return done(err);\n            });\n        });\n    });\n\n    it('should use OData model builder', (done)=> {\n        config.useStrategy(ODataModelBuilder, ODataConventionModelBuilder);\n        /**\n         * @type {ODataConventionModelBuilder|*}\n         */\n        const builder = config.getStrategy(ODataModelBuilder);\n        builder.addEntity(\"User\");\n        builder.getEdm().then((edm)=> {\n            console.log(JSON.stringify(edm, null, 4));\n            return done();\n        }).catch((err)=> {\n            return done(err);\n        });\n    });\n\n    it('should export metadata', (done)=> {\n        config.useStrategy(ODataModelBuilder, ODataConventionModelBuilder);\n        /**\n         * @type {ODataConventionModelBuilder|*}\n         */\n        const builder = config.getStrategy(ODataModelBuilder);\n\n        builder.initialize().then(() => {\n            return builder.getEdmDocument().then((doc)=> {\n                console.log(format(doc.outerXML()));\n                return done();\n            });\n        }).catch((err)=> {\n            return done(err);\n        });\n\n\n    });\n\n});"]}