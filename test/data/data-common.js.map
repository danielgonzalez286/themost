{"version":3,"sources":["data-common.es6"],"names":["path","assert","DataConfiguration","DefaultDataContext","TraceUtils","format","ODataConventionModelBuilder","ODataModelBuilder","Randoms","TestDataContext","configuration","getConfiguration","describe","config","resolve","process","cwd","it","done","context","model","where","equal","expand","getTypedItem","then","user","log","JSON","stringify","finalize","catch","err","field","mapping","inferMapping","associationType","newPerson","person","silent","save","id","isNumber","remove","count","exists","useStrategy","builder","getStrategy","addEntity","getEdm","edm","initialize","getEdmDocument","doc","outerXML"],"mappings":"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","file":"data-common.js","sourcesContent":["import 'source-map-support/register';\nimport path from 'path';\nimport {assert} from 'chai';\nimport {DataConfiguration} from \"../../modules/@themost/data/data-configuration\";\nimport {DefaultDataContext} from \"../../modules/@themost/data/data-context\";\nimport {TraceUtils} from \"../../modules/@themost/common/utils\";\nimport format from 'xml-formatter';\nimport {ODataConventionModelBuilder, ODataModelBuilder} from \"../../modules/@themost/data/odata\";\nimport Randoms from './randoms';\nclass TestDataContext extends DefaultDataContext {\n\n    /**\n     * @param {DataConfigurationStrategy=} configuration\n     */\n    constructor(configuration) {\n        super();\n        this.getConfiguration = ()=> configuration;\n    }\n}\n\ndescribe('most data common tests', function() {\n    const config  = new DataConfiguration(path.resolve(process.cwd(), \"./test/app/config\"));\n    it('should use query resolver', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        context.model('User').where('name')\n            .equal('victoria.hartley@example.com')\n            .expand('groups')\n            .getTypedItem().then((user)=> {\n                TraceUtils.log(JSON.stringify(user,null,2));\n                context.finalize(()=> {\n                    return done();\n                });\n        }).catch((err)=> {\n            context.finalize(()=> {\n                return done(err);\n            });\n        });\n    });\n\n    it('should infer a many-to-many association', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const field = context.model('Person').field('children');\n        TraceUtils.log(\"DataField\");\n        TraceUtils.log(JSON.stringify(field,null,2));\n        const mapping = context.model('Person').inferMapping('children');\n        TraceUtils.log(\"DataAssociationMapping\");\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'junction');\n        return done();\n    });\n\n    it('should infer a one-to-many association', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const field = context.model('PaymentMethod').field('orders');\n        TraceUtils.log(\"DataField\");\n        TraceUtils.log(JSON.stringify(field,null,2));\n        const mapping = context.model('PaymentMethod').inferMapping('orders');\n        TraceUtils.log(\"DataAssociationMapping\");\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'association');\n        return done();\n    });\n\n    it('should infer a many-to-one association', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const field = context.model('Order').field('paymentMethod');\n        TraceUtils.log(\"DataField\");\n        TraceUtils.log(JSON.stringify(field,null,2));\n        const mapping = context.model('Order').inferMapping('paymentMethod');\n        TraceUtils.log(\"DataAssociationMapping\");\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'association');\n        return done();\n    });\n\n    it('should infer a one-to-one association', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const field = context.model('Person').field('spouse');\n        TraceUtils.log(\"DataField\");\n        TraceUtils.log(JSON.stringify(field,null,2));\n        const mapping = context.model('Person').inferMapping('spouse');\n        TraceUtils.log(\"DataAssociationMapping\");\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'association');\n        return done();\n    });\n\n    it('should infer a many-to-many association #2', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const field = context.model('Person').field('children');\n        TraceUtils.log(\"DataField\");\n        TraceUtils.log(JSON.stringify(field,null,2));\n        const mapping = context.model('Person').inferMapping('children');\n        TraceUtils.log(\"DataAssociationMapping\");\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'junction');\n        return done();\n    });\n\n    it('should use infer a many-to-many mapping', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const mapping = context.model('Person').inferMapping('children');\n        TraceUtils.log(JSON.stringify(mapping,null,2));\n        assert.equal(mapping.associationType,'junction');\n        return done();\n    });\n\n    it('should use DataModel.save() and DataModel.remove() methods', (done)=> {\n        //initialize\n        const context = new TestDataContext(config);\n        const newPerson = Randoms.person();\n        TraceUtils.log(\"New Person Data\");\n        TraceUtils.log(JSON.stringify(newPerson,null,2));\n        context.model('Person').silent().save(newPerson).then(()=> {\n            const id = newPerson.id;\n            assert.isNumber(id,\"Object identifier must be a number\");\n            TraceUtils.log(JSON.stringify(newPerson,null,2));\n            return context.model('Person').silent().remove(newPerson).then(()=> {\n                //try to find person again\n                return context.model('Person').silent().where('id').equal(id).count().then((exists)=> {\n                    assert.equal(exists,0,'The object must have been deleted');\n                    context.finalize(()=> {\n                        return done();\n                    });\n                });\n            });\n        }).catch((err)=> {\n            context.finalize(()=> {\n                return done(err);\n            });\n        });\n    });\n\n    it('should use OData model builder', (done)=> {\n        config.useStrategy(ODataModelBuilder, ODataConventionModelBuilder);\n        /**\n         * @type {ODataConventionModelBuilder|*}\n         */\n        const builder = config.getStrategy(ODataModelBuilder);\n        builder.addEntity(\"User\");\n        builder.getEdm().then((edm)=> {\n            TraceUtils.log(JSON.stringify(edm, null, 4));\n            return done();\n        }).catch((err)=> {\n            return done(err);\n        });\n    });\n\n    it('should export metadata', (done)=> {\n        config.useStrategy(ODataModelBuilder, ODataConventionModelBuilder);\n        /**\n         * @type {ODataConventionModelBuilder|*}\n         */\n        const builder = config.getStrategy(ODataModelBuilder);\n\n        builder.initialize().then(() => {\n            return builder.getEdmDocument().then((doc)=> {\n                TraceUtils.log(format(doc.outerXML()));\n                return done();\n            });\n        }).catch((err)=> {\n            return done(err);\n        });\n    });\n\n});"]}