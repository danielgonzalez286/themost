{"version":3,"sources":["config.es6"],"names":["_","AbstractClassError","Args","PathUtils","TraceUtils","configProperty","Symbol","currentConfiguration","configPathProperty","executionPathProperty","strategiesProperty","ConfigurationBase","configPath","join","process","cwd","debug","useStrategy","ModuleLoaderStrategy","DefaultModuleLoaderStrategy","configSourcePath","env","window","require","err","code","log","error","p","at","replace","isObject","value","set","configStrategyCtor","strategyCtor","notFunction","name","getSourceAt","isNil","configuration","hasStrategy","TypeError","ConfigurationStrategy","config","check","new","target","notNull","modulePath","notEmpty","test","getConfiguration","getExecutionPath","watchersProperty","ActiveModuleLoaderStrategy","finalModulePath","resultModule","resolvedModulePath","resolve","hasOwnProperty","fsModule","fs","watch","eventType","filename","cache"],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport {AbstractClassError} from \"./errors\";\nimport {Args, PathUtils, TraceUtils} from \"./utils\";\n\nconst configProperty = Symbol('config');\nconst currentConfiguration = Symbol('current');\nconst configPathProperty = Symbol('configurationPath');\nconst executionPathProperty = Symbol('executionPath');\nconst strategiesProperty = Symbol('strategies');\n\n/**\n * @class\n */\nexport class ConfigurationBase {\n    /**\n     * @constructor\n     * @param {string} configPath\n     */\n    constructor(configPath) {\n\n        //init strategies\n        this[strategiesProperty] = { };\n\n        this[configPathProperty] = configPath || PathUtils.join(process.cwd(),'config');\n        TraceUtils.debug('Initializing configuration under %s.', this[configPathProperty]);\n\n        this[executionPathProperty] = PathUtils.join(this[configPathProperty],'..');\n        TraceUtils.debug('Setting execution path under %s.', this[executionPathProperty]);\n\n        //load default module loader strategy\n        this.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n\n        //get configuration source\n        let configSourcePath;\n        try {\n            let env = 'production';\n            //node.js mode\n            if (process && process.env) {\n                env = process.env['NODE_ENV'] || 'production';\n            }\n            //browser mode\n            else if (window && window.env) {\n                env = window.env['BROWSER_ENV'] || 'production';\n            }\n            configSourcePath = PathUtils.join(this[configPathProperty], 'app.' + env + '.json');\n            TraceUtils.debug('Validating environment configuration source on %s.', configSourcePath);\n            this[configProperty] = require(configSourcePath);\n        }\n        catch (err) {\n            if (err.code === 'MODULE_NOT_FOUND') {\n                TraceUtils.log('The environment specific configuration cannot be found or is inaccesible.');\n                try {\n                    configSourcePath = PathUtils.join(this[configPathProperty], 'app.json');\n                    TraceUtils.debug('Validating application configuration source on %s.', configSourcePath);\n                    this[configProperty] = require(configSourcePath);\n                }\n                catch(err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        TraceUtils.log('The default application configuration cannot be found or is inaccesible.');\n                    }\n                    else {\n                        TraceUtils.error('An error occured while trying to open default application configuration.');\n                        TraceUtils.error(err);\n                    }\n                    TraceUtils.debug('Initializing empty configuration');\n                    this[configProperty] = { };\n                }\n            }\n            else {\n                TraceUtils.error('An error occured while trying to open application configuration.');\n                TraceUtils.error(err);\n                //load default configuration\n                this[configProperty] = { };\n            }\n        }\n        //initialize settings object\n        this[configProperty]['settings'] = this[configProperty]['settings'] || { };\n    }\n\n    get settings() {\n        return this.getSourceAt('settings');\n    }\n\n    /**\n     * Returns the configuration source object\n     * @returns {*}\n     */\n    getSource() {\n        return this[configProperty];\n    }\n\n    /**\n     * Returns the source configuration object based on the given path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {Object|Array}\n     */\n    getSourceAt(p) {\n        return _.at(this[configProperty],p.replace(/\\//,'.'))[0];\n    }\n\n    /**\n     * Returns a boolean which indicates whether the specified  object path exists or not (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @returns {boolean}\n     */\n    hasSourceAt(p) {\n        return _.isObject(_.at(this[configProperty],p.replace(/\\//,'.'))[0]);\n    }\n\n    /**\n     * Sets the config value to the specified object path (e.g. settings.auth.cookieName or settings/auth/cookieName)\n     * @param {string} p - A string which represents an object path\n     * @param {*} value\n     * @returns {Object}\n     */\n    setSourceAt(p, value) {\n        return _.set(this[configProperty], p, value);\n    }\n\n    /**\n     * Sets the current execution path\n     * @param {string} p\n     */\n    setExecutionPath(p) {\n        this[executionPathProperty] = p;\n    }\n\n    /**\n     * Gets the current execution path\n     * @returns {string}\n     */\n    getExecutionPath() {\n        return this[executionPathProperty];\n    }\n\n    /**\n     * Gets the current configuration path\n     * @returns {string}\n     */\n    getConfigurationPath() {\n        return this[configPathProperty];\n    }\n\n    /**\n     * Register a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @param {Function|*} strategyCtor\n     * @returns ConfigurationBase\n     */\n    useStrategy(configStrategyCtor, strategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        Args.notFunction(strategyCtor,\"Strategy constructor\");\n        this[strategiesProperty][`${configStrategyCtor.name}`] = new strategyCtor(this);\n        return this;\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function|*} configStrategyCtor\n     * @returns {ConfigurationStrategy|*}\n     */\n    getStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        return this[strategiesProperty][`${configStrategyCtor.name}`];\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function} configStrategyCtor\n     */\n    hasStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        return typeof this[strategiesProperty][`${configStrategyCtor.name}`] !== 'undefined';\n    }\n\n    /**\n     * Gets the current configuration\n     * @returns ConfigurationBase - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        if (_.isNil(ConfigurationBase[currentConfiguration])) {\n            ConfigurationBase[currentConfiguration] = new ConfigurationBase();\n        }\n        return ConfigurationBase[currentConfiguration];\n    }\n    /**\n     * Sets the current configuration\n     * @param {ConfigurationBase} configuration\n     * @returns ConfigurationBase - An instance of ApplicationConfiguration class which represents the current configuration\n     */\n    static setCurrent(configuration) {\n        if (configuration instanceof ConfigurationBase) {\n            if (!configuration.hasStrategy(ModuleLoaderStrategy)) {\n                configuration.useStrategy(ModuleLoaderStrategy, DefaultModuleLoaderStrategy);\n            }\n            ConfigurationBase[currentConfiguration] = configuration;\n            return ConfigurationBase[currentConfiguration];\n        }\n        throw new TypeError('Invalid argument. Expected an instance of DataConfiguration class.');\n    }\n}\n\n/**\n * @class\n */\nexport class ConfigurationStrategy {\n    /**\n     * @constructor\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        Args.check(new.target !== ConfigurationStrategy, new AbstractClassError());\n        Args.notNull(config, 'Configuration');\n        this[configProperty] = config;\n\n    }\n\n    /**\n     * @returns {ConfigurationBase}\n     */\n    getConfiguration() {\n        return this[configProperty];\n    }\n\n\n\n}\n\nexport class ModuleLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    require(modulePath) {\n        Args.notEmpty(modulePath,'Module Path');\n        if (!/^.\\//i.test(modulePath)) {\n            //load module which is not starting with ./\n            return require(modulePath);\n        }\n        return require(PathUtils.join(this.getConfiguration().getExecutionPath(),modulePath));\n    }\n\n}\n\nexport class DefaultModuleLoaderStrategy extends ModuleLoaderStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n}\n\nconst watchersProperty = Symbol('watchers');\n\nexport class ActiveModuleLoaderStrategy extends ModuleLoaderStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[watchersProperty] = {};\n    }\n\n    /**\n     * Returns the collection of active module watchers\n     * @returns {*}\n     */\n    get watchers() {\n        return this[watchersProperty];\n    }\n\n    /**\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    require(modulePath) {\n        Args.notEmpty(modulePath,'Module Path');\n        if (!/^.\\//i.test(modulePath)) {\n            //load module which is not starting with ./\n            return require(modulePath);\n        }\n        const finalModulePath = PathUtils.join(this.getConfiguration().getExecutionPath(),modulePath);\n        //try to load the given module\n        const resultModule = require(finalModulePath);\n        const resolvedModulePath = require.resolve(finalModulePath);\n        if (this[watchersProperty].hasOwnProperty(resolvedModulePath)) {\n            return resultModule;\n        }\n        //load fs module\n        const fsModule = 'fs', fs = require(fsModule);\n        //add file watcher\n        TraceUtils.debug('Registering active module watcher for module %s.', resolvedModulePath);\n        this[watchersProperty][resolvedModulePath] = fs.watch(resolvedModulePath, (eventType, filename)=> {\n            TraceUtils.debug('Update active module cache for module %s.', resolvedModulePath);\n            delete require.cache[require.resolve(resolvedModulePath)];\n        });\n        //and finally return the loaded module\n        return resultModule;\n    }\n\n}"]}