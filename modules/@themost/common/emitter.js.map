{"version":3,"sources":["emitter.es6"],"names":["SequentialEventEmitter","event","args","callback","self","listeners","length","call","async","applyEachSeries","err","type","listener","TypeError","fired","g","removeListener","apply","arguments","on","EventEmitter"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AAEA;;;;;;;;;;;;AAEA;;;;;IAKaA,sB,WAAAA,sB;;;AACT;;;AAGA,sCAAc;AAAA;;AAAA;AAEb;;AAED;;;;;;;;;;6BAMKC,K,EAAOC,I,EAAMC,Q,EAAU;AACxB,gBAAMC,OAAO,IAAb;AACA;AACA;AACA;AACAD,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACA,gBAAME,YAAYD,KAAKC,SAAL,CAAeJ,KAAf,CAAlB;AACA;AACA,gBAAII,UAAUC,MAAV,IAAkB,CAAtB,EAAyB;AACrB;AACAH,yBAASI,IAAT,CAAcH,IAAd,EAAoB,IAApB;AACA;AACH;AACD;AACAI,kBAAMC,eAAN,CAAsBJ,SAAtB,EAAiCH,IAAjC,EAAuC,UAASQ,GAAT,EAAc;AACjDP,yBAASI,IAAT,CAAcH,IAAd,EAAoBM,GAApB;AACH,aAFD;AAGH;;;6BAEIC,I,EAAMC,Q,EAAU;AACjB,gBAAMR,OAAO,IAAb;AACA,gBAAI,OAAOQ,QAAP,KAAoB,UAAxB,EACI,MAAMC,UAAU,6BAAV,CAAN;AACJ,gBAAIC,QAAQ,KAAZ;AACA,qBAASC,CAAT,GAAa;AACTX,qBAAKY,cAAL,CAAoBL,IAApB,EAA0BI,CAA1B;AACA,oBAAI,CAACD,KAAL,EAAY;AACRA,4BAAQ,IAAR;AACAF,6BAASK,KAAT,CAAe,IAAf,EAAqBC,SAArB;AACH;AACJ;AACDH,cAAEH,QAAF,GAAaA,QAAb;AACAR,iBAAKe,EAAL,CAAQR,IAAR,EAAcI,CAAd;AACA,mBAAO,IAAP;AACH;;;;EAjDuC,iBAAOK,Y","file":"emitter.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport events from 'events';\n\n/**\n * @classdesc SequentialEventEmitter class is an extension of node.js EventEmitter class where listeners are executing in series.\n * @class\n * @augments EventEmitter\n */\nexport class SequentialEventEmitter extends events.EventEmitter {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Raises the specified event and executes event listeners in series.\n     * @param {String} event - The event that is going to be raised.\n     * @param {*} args - An object that contains the event arguments.\n     * @param {Function} callback - A callback function to be invoked after the execution.\n     */\n    emit(event, args, callback) {\n        const self = this;\n        ////example: call super class function\n        //SequentialEventEmitter.super_.emit.call(this);\n        //ensure callback\n        callback = callback || function() {};\n        //get listeners\n        const listeners = self.listeners(event);\n        //validate listeners\n        if (listeners.length==0) {\n            //exit emitter\n            callback.call(self, null);\n            return;\n        }\n        //apply each series\n        async.applyEachSeries(listeners, args, function(err) {\n            callback.call(self, err);\n        });\n    }\n\n    once(type, listener) {\n        const self = this;\n        if (typeof listener !== 'function')\n            throw TypeError('listener must be a function');\n        let fired = false;\n        function g() {\n            self.removeListener(type, g);\n            if (!fired) {\n                fired = true;\n                listener.apply(this, arguments);\n            }\n        }\n        g.listener = listener;\n        self.on(type, g);\n        return this;\n    }\n}"]}