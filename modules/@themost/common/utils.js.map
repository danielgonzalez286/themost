{"version":3,"sources":["utils.es6"],"names":["crypto","winston","_","UUID_CHARS","HEX_CHARS","STRIP_COMMENTS","DateTimeRegex","BooleanTrueRegex","BooleanFalseRegex","NullRegex","UndefinedRegex","IntegerRegex","FloatRegex","logger","Logger","level","process","env","NODE_ENV","transports","Console","timestamp","Date","toUTCString","formatter","options","toUpperCase","message","meta","Object","keys","length","JSON","stringify","Args","expr","err","notNull","call","res","Error","error","code","arg","name","notString","notNumber","NumberUtils","s","num","test","a","charCodeAt","i","x","parseInt","out","String","fromCharCode","Math","floor","TextUtils","value","md5","createHash","update","digest","sha1","sha256","uuid","r","n","random","substring","join","TraceUtils","data","args","Array","prototype","slice","arguments","apply","info","stack","warn","debug","RandomUtils","chars","str","substr","randomInt","min","max","LangUtils","fn","isFunction","fnStr","toString","replace","result","indexOf","match","parseFloat","parse","origin","convertValues","exec","descriptor","expr1","isArray","index","extend","UnknownPropertyDescriptor","re","typedValue","convert","push","form","forEach","key","hasOwnProperty","any","obj","defineProperty","configurable","enumerable","get","set"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport crypto from 'crypto';\nimport winston from 'winston';\nimport {_} from 'lodash';\n\nconst UUID_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\nconst HEX_CHARS = 'abcdef1234567890';\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n\nconst DateTimeRegex = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?$/g;\nconst BooleanTrueRegex = /^true$/ig;\nconst BooleanFalseRegex = /^false$/ig;\nconst NullRegex = /^null$/ig;\nconst UndefinedRegex = /^undefined$/ig;\nconst IntegerRegex =/^[-+]?\\d+$/g;\nconst FloatRegex =/^[+-]?\\d+(\\.\\d+)?$/g;\n\n\nconst logger = new winston.Logger({\n    level: (process.env.NODE_ENV === 'development') ? 'debug' : 'info',\n    transports: [\n        new (winston.transports.Console)({\n            timestamp: function() {\n                return (new Date()).toUTCString()\n            },\n            formatter: function(options) {\n                return '[' + options.timestamp() +'] ['+ options.level.toUpperCase() +'] '+ (options.message ? options.message : '') +\n                    (options.meta && Object.keys(options.meta).length ? '\\n\\t'+ JSON.stringify(options.meta, null, 4) : '' );\n            }\n        })\n    ]\n});\n\n\nexport class Args {\n    /**\n     * Checks the expression and throws an exception if the condition is not met.\n     * @param {*} expr\n     * @param {string|error} err\n     */\n    static check(expr, err) {\n        Args.notNull(expr,\"Expression\");\n        if (typeof expr === 'function') {\n            expr.call()\n        }\n        let res;\n        if (typeof expr === 'function') {\n            res = !(expr.call());\n        }\n        else {\n            res = (!expr);\n        }\n        if (res) {\n            if (err instanceof Error) {\n                throw err;\n            }\n            const error = new Error(err);\n            error.code = \"ECHECK\";\n            throw error;\n        }\n    }\n\n    /**\n     *\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notNull(arg, name) {\n        if (typeof arg === 'undefined' || arg == null) {\n            const err = new Error(name + \" may not be null or undefined\");\n            err.code = \"ENULL\";\n            throw err;\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notString(arg, name) {\n        if (typeof arg !== 'string') {\n            const err = new Error(name + \" must be a string\");\n            err.code = \"EARG\";\n            throw err;\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notFunction(arg, name) {\n        if (typeof arg !== 'function') {\n            const err = new Error(name + \" must be a function\");\n            err.code = \"EARG\";\n            throw err;\n        }\n    }\n\n    /**\n     * @param {*} arg\n     * @param {string} name\n     */\n    static notNumber(arg, name) {\n        if (typeof arg !== 'string') {\n            const err = new Error(name + \" must be number\");\n            err.code = \"EARG\";\n            throw err;\n        }\n    }\n\n    /**\n     * @param {string|*} arg\n     * @param {string} name\n     */\n    static notEmpty(arg, name) {\n        Args.notNull(arg,name);\n        Args.notString(arg,name);\n        if (arg.length == 0) {\n            const err = new Error(name + \" may not be empty\");\n            err.code = \"EEMPTY\";\n            return err;\n        }\n    }\n\n    /**\n     * @param {number|*} arg\n     * @param {string} name\n     */\n    static notNegative(arg, name) {\n        Args.notNumber(arg,name);\n        if (arg<0) {\n            const err = new Error(name + \" may not be negative\");\n            err.code = \"ENEG\";\n            return err;\n        }\n    }\n\n    /**\n     * @param {number|*} arg\n     * @param {string} name\n     */\n    static positive(arg, name) {\n        Args.notNumber(arg,name);\n        if (arg<=0) {\n            const err = new Error(name + \" may not be negative or zero\");\n            err.code = \"EPOS\";\n            return err;\n        }\n    }\n}\n\n/**\n * @class\n */\nexport class NumberUtils {\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Converts a base-26 formatted string to the equivalent integer\n     * @static\n     * @param {string} s A base-26 formatted string e.g. aaaaaaaa for 0, baaaaaaa for 1 etc\n     * @return {number} The equivalent integer value\n     */\n    static fromBase26(s) {\n        let num = 0;\n        if (!/[a-z]{8}/.test(s)) {\n            throw new Error('Invalid base-26 format.');\n        }\n        const a = 'a'.charCodeAt(0);\n        for (let i = 7; i >=0; i--) {\n            num = (num * 26) + (s[i].charCodeAt(0) - a);\n        }\n        return num;\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Converts an integer to the equivalent base-26 formatted string\n     * @static\n     * @param {number} x The integer to be converted\n     * @return {string} The equivalent string value\n     */\n    static toBase26(x) {\n        //noinspection ES6ConvertVarToLetConst\n        let num = parseInt(x);\n        if (num<0) {\n            throw new Error('A non-positive integer cannot be converted to base-26 format.');\n        }\n        if (num>208827064575) {\n            throw new Error('A positive integer bigger than 208827064575 cannot be converted to base-26 format.');\n        }\n        let out = \"\";\n        let length= 1;\n        const a = 'a'.charCodeAt(0);\n        while(length<=8)\n        {\n            out += String.fromCharCode(a + (num % 26));\n            num = Math.floor(num / 26);\n            length += 1;\n        }\n        return out;\n    }\n\n\n}\n\n/**\n * @class\n */\nexport class TextUtils {\n    /**\n     * Converts the given parameter to MD5 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toMD5(value) {\n        if (typeof value === 'undefined' || value == null) {\n            return;\n        }\n        const md5 = crypto.createHash('md5');\n        if (typeof value === 'string') {\n            md5.update(value);\n        }\n        else if (value instanceof Date) {\n            md5.update(value.toUTCString());\n        }\n        else {\n            md5.update(JSON.stringify(value));\n        }\n        return md5.digest('hex');\n    }\n\n    /**\n     * Converts the given parameter to SHA1 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toSHA1(value) {\n        if (typeof value === 'undefined' || value == null) {\n            return;\n        }\n        const sha1 = crypto.createHash('sha1');\n        if (typeof value === 'string') {\n            sha1.update(value);\n        }\n        else if (value instanceof Date) {\n            sha1.update(value.toUTCString());\n        }\n        else {\n            sha1.update(JSON.stringify(value));\n        }\n        return sha1.digest('hex');\n    }\n\n    /**\n     * Converts the given parameter to SHA256 hex string\n     * @static\n     * @param {*} value\n     * @returns {string|undefined}\n     */\n    static toSHA256(value) {\n        if (typeof value === 'undefined' || value == null) {\n            return;\n        }\n        const sha256 = crypto.createHash('sha256');\n        if (typeof value === 'string') {\n            sha256.update(value);\n        }\n        else if (value instanceof Date) {\n            sha256.update(value.toUTCString());\n        }\n        else {\n            sha256.update(JSON.stringify(value));\n        }\n        return sha256.digest('hex');\n    }\n\n    /**\n     * Returns a random GUID/UUID string\n     * @static\n     * @returns {string}\n     */\n    static newUUID() {\n        const uuid = [];\n        let i;\n        // rfc4122, version 4 form\n        let r, n;\n        // rfc4122 requires these characters\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n        uuid[14] = '4';\n\n        // Fill in random data.  At i==19 set the high bits of clock sequence as\n        // per rfc4122, sec. 4.1.5\n        for (i = 0; i < 36; i++) {\n            if (!uuid[i]) {\n                r = 0 | Math.random()*16;\n                n = (i == 19) ? (r & 0x3) | 0x8 : r;\n                uuid[i] = UUID_CHARS.substring(n,1);\n            }\n        }\n        return uuid.join('');\n    }\n\n\n\n\n\n}\n\n/**\n * @class\n * @constructor\n */\nexport class TraceUtils {\n    /**\n     * @static\n     * @param {...*} data\n     */\n    static log(data) {\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length==0) { return; }\n        if (data instanceof Error) {\n            return TraceUtils.error.apply(this, args);\n        }\n        return logger.info.apply(logger, args);\n    }\n\n    /**\n     * @static\n     * @param {...*} data\n     */\n    static error(data) {\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length==0) { return; }\n        if (data instanceof Error) {\n            if (data.stack) {\n                return logger.error(data.stack);\n            }\n            else {\n                return logger.error.apply(logger, args);\n            }\n        }\n        return logger.error.apply(logger, args);\n    }\n\n    /**\n     *\n     * @static\n     * @param {...*} data\n     */\n    static info(data) {\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length==0) { return; }\n        return logger.info.apply(logger, args);\n    }\n\n    /**\n     *\n     * @static\n     * @param {*} data\n     */\n    static warn(data) {\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length==0) { return; }\n        return logger.warn.apply(logger, args);\n    }\n\n    /**\n     *\n     * @static\n     * @param {...*} data\n     */\n    static debug(data) {\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length==0) { return; }\n        return logger.debug.apply(logger, args);\n    }\n}\n/**\n * @class\n */\nexport class RandomUtils {\n    /**\n     * Returns a random string based on the length specified\n     * @param {Number} length\n     */\n    static randomChars(length) {\n        length = length || 8;\n        const chars = \"abcdefghkmnopqursuvwxz2456789ABCDEFHJKLMNPQURSTUVWXYZ\";\n        let str = \"\";\n        for(let i = 0; i < length; i++) {\n            str += chars.substr(this.randomInt(0, chars.length-1),1);\n        }\n        return str;\n    }\n\n    /**\n     * Returns a random integer between a minimum and a maximum value\n     * @param {number} min\n     * @param {number} max\n     */\n    static randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    /**\n     * Returns a random string based on the length specified\n     * @static\n     * @param {number} length\n     * @returns {string}\n     */\n    static randomHex(length) {\n        length = (length || 8)*2;\n        let str = \"\";\n        for(let i = 0; i < length; i++) {\n            str += HEX_CHARS.substr(this.randomInt(0, HEX_CHARS.length-1),1);\n        }\n        return str;\n    }\n}\n\n/**\n * @class\n */\nexport class LangUtils {\n    /**\n     * Returns an array of strings which represents the arguments' names of the given function\n     * @param {Function} fn\n     * @returns {Array}\n     */\n    static getFunctionParams(fn) {\n        if (!_.isFunction(fn))\n            return [];\n        const fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n        let result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(/([^\\s,]+)/g);\n        if(result === null)\n            result = [];\n        return result;\n    }\n    /**\n     * @param {string} value\n     */\n    static convert(value) {\n        let result;\n        if ((typeof value === 'string'))\n        {\n            if (value.length==0) {\n                result = value\n            }\n            if (value.match(BooleanTrueRegex)) {\n                result = true;\n            }\n            else if (value.match(BooleanFalseRegex)) {\n                result = false;\n            }\n            else if (value.match(NullRegex) || value.match(UndefinedRegex)) {\n                result = null;\n            }\n            else if (value.match(IntegerRegex)) {\n                result = parseInt(value);\n            }\n            else if (value.match(FloatRegex)) {\n                result = parseFloat(value);\n            }\n            else if (value.match(DateTimeRegex)) {\n                result = new Date(Date.parse(value));\n            }\n            else {\n                result = value;\n            }\n        }\n        else {\n            result = value;\n        }\n        return result;\n    }\n\n    /**\n     *\n     * @param {*} origin\n     * @param {string} expr\n     * @param {string} value\n     * @param {*=} options\n     * @returns {*}\n     */\n    static extend(origin, expr, value, options) {\n\n        options = options || { convertValues:false };\n        //find base notation\n        let match = /(^\\w+)\\[/.exec(expr), name, descriptor, expr1;\n        if (match) {\n            //get property name\n            name = match[1];\n            //validate array property\n            if (/^\\d+$/g.test(name)) {\n                //property is an array\n                if (!_.isArray(origin.value))\n                    origin.value = [];\n                // get new expression\n                expr1 = expr.substr(match.index + match[1].length);\n                LangUtils.extend(origin, expr1, value);\n            }\n            else {\n                //set property value (unknown)\n                origin[name] = origin[name] || new LangUtils();\n                descriptor = new UnknownPropertyDescriptor(origin, name);\n                // get new expression\n                expr1 = expr.substr(match.index + match[1].length);\n                LangUtils.extend(descriptor, expr1, value);\n            }\n        }\n        else if (expr.indexOf('[')==0) {\n            //get property\n            const re = /\\[(.*?)\\]/g;\n            match = re.exec(expr);\n            if (match) {\n                name = match[1];\n                // get new expression\n                expr1 = expr.substr(match.index + match[0].length);\n                if (/^\\d+$/g.test(name)) {\n                    //property is an array\n                    if (!_.isArray(origin.value))\n                        origin.value = [];\n                }\n                if (expr1.length==0) {\n                    if (origin.value instanceof LangUtils) {\n                        origin.value = {};\n                    }\n                    let typedValue;\n                    //convert string value\n                    if ((typeof value === 'string') && options.convertValues) {\n                        typedValue = LangUtils.convert(value);\n                    }\n                    else {\n                        typedValue = value;\n                    }\n                    if (_.isArray(origin.value))\n                        origin.value.push(typedValue);\n                    else\n                        origin.value[name] = typedValue;\n                }\n                else {\n                    if (origin.value instanceof LangUtils) {\n                        origin.value = { };\n                    }\n                    origin.value[name] = origin.value[name] || new LangUtils();\n                    descriptor = new UnknownPropertyDescriptor(origin.value, name);\n                    LangUtils.extend(descriptor, expr1, value);\n                }\n            }\n            else {\n                throw new Error('Invalid object property notation. Expected [name]');\n            }\n        }\n        else if (/^\\w+$/.test(expr)) {\n            if (options.convertValues)\n                origin[expr] = LangUtils.convert(value);\n            else\n                origin[expr] = value;\n        }\n        else {\n            throw new Error('Invalid object property notation. Expected property[name] or [name]');\n        }\n        return origin;\n    }\n\n\n    /**\n     *\n     * @param {*} form\n     * @returns {*}\n     */\n    static parseForm (form) {\n        const result = {};\n        if (typeof form === 'undefined' || form==null)\n            return result;\n        const keys = Object.keys(form);\n        keys.forEach(function(key) {\n            if (form.hasOwnProperty(key))\n            {\n                LangUtils.extend(result, key, form[key])\n            }\n        });\n        return result;\n    }\n    /**\n     * Parses any value or string and returns the resulted object.\n     * @param {*} any\n     * @returns {*}\n     */\n    static parseValue(any) {\n        return LangUtils.convert(any);\n    }\n    /**\n     * Parses any value and returns the equivalent integer.\n     * @param {*} any\n     * @returns {*}\n     */\n    static parseInt(any) {\n        return parseInt(any) || 0;\n    }\n    /**\n     * Parses any value and returns the equivalent float number.\n     * @param {*} any\n     * @returns {*}\n     */\n    static parseFloat(any) {\n        return parseFloat(any) || 0;\n    }\n    /**\n     * Parses any value and returns the equivalent boolean.\n     * @param {*} any\n     * @returns {*}\n     */\n    static parseBoolean(any) {\n        if (typeof any === 'undefined' || any == null)\n            return false;\n        else if (typeof any === 'number')\n            return any != 0;\n        else if (typeof any === 'string') {\n            if (any.match(LangUtils.IntegerRegex) || any.match(LangUtils.FloatRegex)) {\n                return parseInt(any, 10) != 0;\n            }\n            else if (any.match(LangUtils.BooleanTrueRegex))\n                return true;\n            else if (any.match(LangUtils.BooleanFalseRegex))\n                return false;\n            else if (/^yes$|^on$|^y$|^valid$/i.test(any))\n                return true;\n            else if (/^no$|^off$|^n$|^invalid$/i.test(any))\n                return false;\n            else\n                return false;\n        }\n        else if (typeof any === 'boolean')\n            return any;\n        else {\n            return (parseInt(any) || 0) != 0;\n        }\n    }\n\n}\n\nLangUtils.DateTimeRegex = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?$/g;\nLangUtils.BooleanTrueRegex = /^true$/ig;\nLangUtils.BooleanFalseRegex = /^false$/ig;\nLangUtils.NullRegex = /^null$/ig;\nLangUtils.UndefinedRegex = /^undefined$/ig;\nLangUtils.IntegerRegex =/^[-+]?\\d+$/g;\nLangUtils.FloatRegex =/^[+-]?\\d+(\\.\\d+)?$/g;\n/**\n * @class\n * @constructor\n */\nfunction UnknownPropertyDescriptor(obj, name) {\n    Object.defineProperty(this, 'value', { configurable:false, enumerable:true, get: function() { return obj[name]; }, set: function(value) { obj[name]=value; } });\n    Object.defineProperty(this, 'name', { configurable:false, enumerable:true, get: function() { return name; } });\n}\n"]}