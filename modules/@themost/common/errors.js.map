{"version":3,"sources":["errors.es6"],"names":["AbstractMethodError","message","TypeError","AbstractClassError","FileNotFoundError","Error","HttpError","status","innerMessage","errors","require","hstatus","parseInt","err","find","x","title","HttpBadRequestError","HttpNotFoundError","HttpMethodNotAllowedError","HttpUnauthorizedError","HttpForbiddenError","HttpServerError","DataError","code","model","field","NotNullError","DataNotFoundError","UniqueConstraintError","constraint","AccessDeniedError"],"mappings":"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","file":"errors.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\n\n\n/**\n * @class\n * @augments TypeError\n */\nexport class AbstractMethodError extends TypeError {\n    constructor(message) {\n        super(message || 'Class does not implement inherited abstract method.');\n    }\n}\n\n/**\n * @classdesc Abstract Class Exception\n * @class\n * @augments Error\n *\n */\nexport class AbstractClassError extends TypeError {\n    constructor(message) {\n        super(message || 'An abstract class cannot be instantiated.');\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class FileNotFoundError extends Error {\n    constructor(message) {\n        super(message || 'File not found');\n    }\n}\n\n/**\n * @class\n * @augments Error\n */\nexport class HttpError extends Error {\n    /**\n     * @constructor\n     * @param {number=} status\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(status, message, innerMessage) {\n        super(message);\n        const errors = require('./resources/http-error-codes.json');\n        const hstatus = (typeof status==='undefined' || status === null) ? 500 : parseInt(status);\n        const err = errors.find(function(x) { return x.status === hstatus; });\n        if (err) {\n            this.title = err.title;\n            this.message = message || err.message;\n            this.status = err.status;\n        }\n        else {\n            this.title = 'Internal Server Error';\n            this.message = message || 'The server encountered an internal error and was unable to complete the request.';\n            this.status = hstatus;\n        }\n        this.innerMessage = innerMessage;\n    }\n\n    /**\n     * @param {Error} err\n     * @returns {Error|HttpError}\n     */\n    static create(err) {\n        if (typeof err === 'undefined' || err===null)\n            return new HttpError();\n        else {\n            if (err.status)\n                return new HttpError(err.status, err.message);\n            else\n                return new HttpError(500, err.message);\n        }\n    }\n}\n\n/**\n * @classdesc HTTP 400 Bad Request exception class\n * @class\n * */\nexport class HttpBadRequestError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(400, message , innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 404 Not Found Exception class\n * @class\n * @augments HttpError\n * */\nexport class HttpNotFoundError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(404, message , innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 405 Method Not Allowed exception class\n * @class\n * @augments HttpError\n * */\nexport class HttpMethodNotAllowedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(405, message , innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 401 Unauthorized Exception class\n * @class\n * @augments HttpError\n * */\nexport class HttpUnauthorizedError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(401, message , innerMessage);\n    }\n}\n\n/**\n * HTTP 403 Forbidden Exception class\n * @class\n * @param {string=} message\n * @param {string=} innerMessage\n * @augments HttpError\n * */\nexport class HttpForbiddenError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(403, message , innerMessage);\n    }\n}\n\n/**\n * @classdesc HTTP 500 Internal Server Error Exception class\n * @class\n * @augments HttpError\n * */\nexport class HttpServerError extends HttpError {\n    /**\n     * @constructor\n     * @param {string=} message\n     * @param {string=} innerMessage\n     */\n    constructor(message, innerMessage) {\n        super(500, message , innerMessage);\n    }\n}\n\n\n/**\n * @classdesc Extends Error object for throwing exceptions on data operations\n * @class\n * @property {string} code - A string that represents an error code e.g. EDATA\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the approriate HTTP error.\n * @augments Error\n */\nexport class DataError extends Error {\n    /* @constructor\n     * @param {string=} code - A string that represents an error code\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(code, message, innerMessage, model, field) {\n        super();\n        this.code  = code || 'EDATA';\n        if (model)\n            this.model = model;\n        if (field)\n            this.field = field;\n        this.message = message || 'A general data error occured.';\n        if (innerMessage)\n            this.innerMessage = innerMessage;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not null exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the approriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} field - The target field name\n * @augments DataError\n */\nexport class NotNullError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} field - The target field\n     */\n    constructor(message, innerMessage, model, field) {\n        super('ENULL', message || 'A value is required', innerMessage, model, field);\n        this.status = 409;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing not found exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is EFOUND.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the approriate HTTP error. The default status is 404 (Conflict)\n * @property {string} model - The target model name\n * @augments DataError\n */\nexport class DataNotFoundError extends DataError {\n    /**\n     * @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     */\n    constructor(message, innerMessage, model) {\n        super('EFOUND', message || 'The requested data was not found.', innerMessage, model);\n        this.status = 404;\n    }\n}\n\n/**\n * @classdesc Extends Error object for throwing unique constraint exceptions.\n * @class\n * @property {string} code - A string that represents an error code. The default error code is ENULL.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @property {number} status - A number that represents an error status. This error status may be used for throwing the approriate HTTP error. The default status is 409 (Conflict)\n * @property {string} model - The target model name\n * @property {string} constraint - The target constraint name\n * @augments DataError\n */\nexport class UniqueConstraintError extends DataError {\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     * @param {string=} model - The target model\n     * @param {string=} constraint - The target constraint\n     */\n    constructor(message, innerMessage, model, constraint) {\n        super('EUNQ', message || 'A unique constraint violated', innerMessage, model);\n        if (constraint)\n            this.constraint = constraint;\n        this.status = 409;\n    }\n}\n\n/**\n * @classdesc Represents an access denied data exception.\n * @class\n *\n * @param {string=} message - The error message\n * @param {string=} innerMessage - The error inner message\n * @property {string} code - A string that represents an error code. The error code is EACCESS.\n * @property {number} status - A number that represents an error status. The error status is 401.\n * @property {string} message -  The error message.\n * @property {string} innerMessage - The error inner message.\n * @augments DataError\n */\nexport class AccessDeniedError extends DataError {\n    /* @constructor\n     * @param {string=} message - The error message\n     * @param {string=} innerMessage - The error inner message\n     */\n    constructor(message, innerMessage) {\n        super('EACCESS', ('Access Denied' || message) , innerMessage);\n        this.status = 401;\n    }\n}"]}