{"version":3,"sources":["associations.es6"],"names":["async","ParserUtils","DataAssociationMapping","_","DataQueryable","Args","QueryExpression","QueryFieldUtils","AbstractMethodError","AbstractClassError","DataError","DataNotFoundError","parentProperty","Symbol","modelProperty","baseModelProperty","mappingProperty","queryProperty","HasAssociation","obj","associationMapping","check","new","target","notNull","isString","isObject","getParent","model","getModel","inferMapping","assign","DataObjectAssociationListener","e","callback","isNil","keys","Object","mappings","forEach","x","hasOwnProperty","mapping","associationType","childModel","name","push","eachSeries","cb","field","childField","property","parentField","parseBoolean","cloned","associatedModel","context","parentModel","er","find","select","silent","flatten","take","list","err","result","Error","code","total","records","event","convert","childs","junction","isArray","HasParentJunction","require","$silent","getBaseModel","state","toBeRemoved","toBeInserted","$state","insert","remove","DataObjectJunction","HasTagAssociation","tags","all","then","filter","indexOf","length","catch","HasOneToManyAssociation","getMapping","getContext","parent","create","getViewAdapter","where","equal","prepare","HasManyToOneAssociation","HasManyToManyAssociation","association","executeFunc","execute","self","migrate","call","Q","deferred","defer","insert_","reject","resolve","promise","remove_","baseModel","parentObjectModel","parentObject","baseModelAdapter","modelAdapter","left","right","from","getName","query","join","with","conf","getConfiguration","baseModelDefinition","getModelDefinition","associationAdapter","adapter","setModelDefinition","title","sealed","hidden","type","source","view","version","fields","primary","indexed","nullable","constraints","insertSingleObject_","value","parentId","valueId","newItem","arr","otherModel","item","removeSingleObject_","HasTagAssociation_Insert_","removeAll","HasTagAssociation_Clear_","HasTagAssociation_Remove_","refersToType","getAttribute","refersTo","parentFieldType","definition","asArray","parentAdapter","objectField","$name","items","map","save"],"mappings":";;;;;;;;;;;;;AAUA;;IAAOA,K;;AACP;;IAAQC,W,UAAAA,W;IAAaC,sB,UAAAA,sB;;AACrB;;IAAQC,C,WAAAA,C;;AACR;;IAAQC,a,cAAAA,a;;AACR;;IAAQC,I,UAAAA,I;;AACR;;IAAQC,e,UAAAA,e;IAAiBC,e,UAAAA,e;;AACzB;;IAAQC,mB,WAAAA,mB;IAAoBC,kB,WAAAA,kB;IAAoBC,S,WAAAA,S;IAAWC,iB,WAAAA,iB;;;;;;;;+eAhB3D;;;;;;;;;;AAmBA,IAAMC,iBAAiBC,OAAO,QAAP,CAAvB;AACA,IAAMC,gBAAgBD,OAAO,OAAP,CAAtB;AACA,IAAME,oBAAoBF,OAAO,WAAP,CAA1B;AACA,IAAMG,kBAAkBH,OAAO,OAAP,CAAxB;AACA,IAAMI,gBAAgBJ,OAAO,OAAP,CAAtB;AACA;;;;;;IAKaK,c,WAAAA,c;;;AACT,4BAAYC,GAAZ,EAAiBC,kBAAjB,EAAqC;AAAA;;AAAA;;AAEjCf,aAAKgB,KAAL,CAAWC,IAAIC,MAAJ,KAAeL,cAA1B,EAA0C,IAAIT,kBAAJ,EAA1C;AACA;AACAJ,aAAKmB,OAAL,CAAaL,GAAb,EAAiB,eAAjB;AACA;AACA,cAAKP,cAAL,IAAuBO,GAAvB;;AAEA,YAAIhB,EAAEsB,QAAF,CAAWL,kBAAX,CAAJ,EAAoC;AAChC;AACA,gBAAIjB,EAAEuB,QAAF,CAAW,MAAKC,SAAL,EAAX,CAAJ,EAAkC;AAC9B,oBAAMC,QAAQ,MAAKD,SAAL,GAAiBE,QAAjB,EAAd;AACA,oBAAI1B,EAAEuB,QAAF,CAAWE,KAAX,CAAJ,EACI,MAAKZ,eAAL,IAAwBY,MAAME,YAAN,CAAmBV,kBAAnB,CAAxB;AACP;AACJ,SAPD,MAQK,IAAIjB,EAAEuB,QAAF,CAAWN,kBAAX,CAAJ,EAAoC;AACrC;AACA,gBAAIA,8BAA8BlB,sBAAlC,EACI,MAAKc,eAAL,IAAwBI,kBAAxB,CADJ,KAGI,MAAKJ,eAAL,IAAwBb,EAAE4B,MAAF,CAAS,IAAI7B,sBAAJ,EAAT,EAAuCkB,kBAAvC,CAAxB;AACP;AAtBgC;AAuBpC;;AAED;;;;;;;;oCAIY;AACR,mBAAO,KAAKR,cAAL,CAAP;AACH;;AAED;;;;;;;qCAIa;AACT,mBAAO,KAAKI,eAAL,CAAP;AACH;;AAED;;;;;;4BAGY;AACR,kBAAM,IAAIR,mBAAJ,EAAN;AACH;;AAED;;;;;;4BAGY;AACR,kBAAM,IAAIA,mBAAJ,EAAN;AACH;;;;EAtD+BJ,a;;AA0DpC;;;;;IAGa4B,6B,WAAAA,6B;;;;;;;;AACT;;;;;mCAKWC,C,EAAGC,Q,EAAU;AACpB,gBAAI;AACA,oBAAI/B,EAAEgC,KAAF,CAAQF,EAAEV,MAAV,CAAJ,EAAuB;AACnB,2BAAOW,UAAP;AACH,iBAFD,MAGK;AAAA;AACD,4BAAME,OAAOC,OAAOD,IAAP,CAAYH,EAAEV,MAAd,CAAb;AACA,4BAAMe,WAAW,EAAjB;AACAF,6BAAKG,OAAL,CAAa,UAASC,CAAT,EAAY;AACrB,gCAAIP,EAAEV,MAAF,CAASkB,cAAT,CAAwBD,CAAxB,KAA8B,QAAOP,EAAEV,MAAF,CAASiB,CAAT,CAAP,MAAuB,QAArD,IAAiEP,EAAEV,MAAF,CAASiB,CAAT,KAAe,IAApF,EAA0F;AAClF;AACA,oCAAME,WAAUT,EAAEL,KAAF,CAAQE,YAAR,CAAqBU,CAArB,CAAhB;AACA,oCAAIE,YAAWA,SAAQC,eAAR,KAA0B,aAArC,IAAsDD,SAAQE,UAAR,KAAqBX,EAAEL,KAAF,CAAQiB,IAAvF,EACIP,SAASQ,IAAT,CAAcJ,QAAd;AACX;AACJ,yBAPD;AAQA1C,8BAAM+C,UAAN,CAAiBT,QAAjB;AACI;;;;AAIA,kCAASI,OAAT,EAAkBM,EAAlB,EAAsB;AAClB,gCAAIN,QAAQC,eAAR,KAA0B,aAA1B,IAA2CD,QAAQE,UAAR,KAAqBX,EAAEL,KAAF,CAAQiB,IAA5E,EAAkF;AAAA;AAC9E;;;AAGA,wCAAMI,QAAQhB,EAAEL,KAAF,CAAQqB,KAAR,CAAcP,QAAQQ,UAAtB,CAAd;AAAA,wCAAiDA,aAAaD,MAAME,QAAN,IAAkBF,MAAMJ,IAAtF;AACA;AACA,wCAAI,QAAOZ,EAAEV,MAAF,CAAS2B,UAAT,CAAP,MAAgC,QAApC,EAA8C;AAC1C;AAAA,+CAAOF;AAAP;AACH;AACD,wCAAIf,EAAEV,MAAF,CAAS2B,UAAT,EAAqBT,cAArB,CAAoCC,QAAQU,WAA5C,CAAJ,EAA8D;AAC1D;AAAA,+CAAOJ;AAAP;AACH;AACD;AACA;AACA;AACA,wCAAKf,EAAEL,KAAF,CAAQiB,IAAR,KAAiBI,MAAMrB,KAAxB,IAAmC,CAAC3B,YAAYoD,YAAZ,CAAyBJ,MAAMK,MAA/B,CAAxC,EAAiF;AAC7E;AACA;AAAA,+CAAON;AAAP;AACH;;AAED;AACA,wCAAMO,kBAAkBtB,EAAEL,KAAF,CAAQ4B,OAAR,CAAgB5B,KAAhB,CAAsBc,QAAQe,WAA9B,CAAxB;;AAEA,wCAAIC,WAAJ;AACAH,oDAAgBI,IAAhB,CAAqB1B,EAAEV,MAAF,CAAS2B,UAAT,CAArB,EAA2CU,MAA3C,CAAkDlB,QAAQU,WAA1D,EAAuES,MAAvE,GAAgFC,OAAhF,GAA0FC,IAA1F,CAA+F,CAA/F,EAAkGC,IAAlG,CAAuG,UAASC,GAAT,EAAcC,MAAd,EAAsB;AACzH,4CAAID,GAAJ,EAAS;AACLjB,+CAAGiB,GAAH;AACH,yCAFD,MAGK,IAAI9D,EAAEgC,KAAF,CAAQ+B,MAAR,CAAJ,EAAqB;AACtBR,iDAAK,IAAIS,KAAJ,CAAU,uCAAV,CAAL,CAAwDT,GAAGU,IAAH,GAAU,OAAV,CAAkBV,GAAG9B,KAAH,GAAW2B,gBAAgBV,IAA3B;AAC1EG,+CAAGU,EAAH;AACH,yCAHI,MAIA,IAAIQ,OAAOG,KAAP,IAAc,CAAlB,EAAqB;AACtBX,iDAAK,IAAIS,KAAJ,CAAU,uCAAV,CAAL,CAAwDT,GAAGU,IAAH,GAAU,OAAV,CAAkBV,GAAG9B,KAAH,GAAW2B,gBAAgBV,IAA3B;AAC1EG,+CAAGU,EAAH;AACH,yCAHI,MAIA,IAAIQ,OAAOG,KAAP,GAAa,CAAjB,EAAoB;AACrBX,iDAAK,IAAIS,KAAJ,CAAU,qEAAV,CAAL,CAAuFT,GAAGU,IAAH,GAAU,OAAV,CAAkBV,GAAG9B,KAAH,GAAW2B,gBAAgBV,IAA3B;AACzGG,+CAAGU,EAAH;AACH,yCAHI,MAIA;AACDzB,8CAAEV,MAAF,CAAS2B,UAAT,EAAqBR,QAAQU,WAA7B,IAA0Cc,OAAOI,OAAP,CAAe,CAAf,EAAkB5B,QAAQU,WAA1B,CAA1C;AACAJ;AACH;AACJ,qCApBD;AAxB8E;;AAAA;AA6CjF,6BA7CD,MA8CK;AACFA;AACF;AAEJ,yBAxDL,EAwDO,UAASiB,GAAT,EAAc;AACb/B,qCAAS+B,GAAT;AACH,yBA1DL;AAXC;AAsEJ;AACJ,aA3ED,CA4EA,OAAOhC,CAAP,EAAU;AACNC,yBAASD,CAAT;AACH;AAEJ;;AAED;;;;;;;;kCAKUsC,K,EAAOrC,Q,EAAU;AACvB,gBAAI;AACA,oBAAI,OAAOqC,MAAMhD,MAAb,KAAwB,WAAxB,IAAuCgD,MAAMhD,MAAN,IAAc,IAAzD,EAA+D;AAC3DW,6BAAS,IAAT;AACH,iBAFD,MAGK;AAAA;AACD,4BAAME,OAAOC,OAAOD,IAAP,CAAYmC,MAAMhD,MAAlB,CAAb;AACA,4BAAMe,WAAW,EAAjB;AACAF,6BAAKG,OAAL,CAAa,UAASC,CAAT,EAAY;AACrB,gCAAI+B,MAAMhD,MAAN,CAAakB,cAAb,CAA4BD,CAA5B,CAAJ,EAAoC;AAChC;;;AAGA,oCAAME,YAAU6B,MAAM3C,KAAN,CAAYE,YAAZ,CAAyBU,CAAzB,CAAhB;AACA,oCAAIE,SAAJ,EACI,IAAIA,UAAQC,eAAR,IAAyB,UAA7B,EAAyC;AACrCL,6CAASQ,IAAT,CAAc,EAAED,MAAKL,CAAP,EAAUE,SAAQA,SAAlB,EAAd;AACH;AACR;AACJ,yBAXD;AAYA1C,8BAAM+C,UAAN,CAAiBT,QAAjB;AACI;;;;AAIA,kCAASE,CAAT,EAAYQ,EAAZ,EAAgB;AACZ,gCAAIR,EAAEE,OAAF,CAAUC,eAAV,IAA2B,UAA/B,EAA2C;AAAA;AACvC,wCAAMxB,MAAMoD,MAAM3C,KAAN,CAAY4C,OAAZ,CAAoBD,MAAMhD,MAA1B,CAAZ;;AAEA;;;AAGA,wCAAMkD,SAAStD,IAAIqB,EAAEK,IAAN,CAAf;;AAEA,wCAAI6B,iBAAJ;AACA,wCAAI,CAACvE,EAAEwE,OAAF,CAAUF,MAAV,CAAL,EAAwB;AAAE;AAAA,+CAAOzB;AAAP;AAAc;AACxC,wCAAIR,EAAEE,OAAF,CAAUE,UAAV,KAAuB2B,MAAM3C,KAAN,CAAYiB,IAAvC,EAA6C;AACzC,4CAAM+B,oBAAoBC,QAAQ,uBAAR,EAAiCD,iBAA3D;AACAF,mDAAW,IAAIE,iBAAJ,CAAsBzD,GAAtB,EAA2BqB,EAAEE,OAA7B,CAAX;AACA,4CAAI6B,MAAM3C,KAAN,CAAYkD,OAAhB,EAAyB;AACrBJ,qDAASK,YAAT,GAAwBlB,MAAxB;AACH;AACD,4CAAIU,MAAMS,KAAN,IAAa,CAAb,IAAkBT,MAAMS,KAAN,IAAa,CAAnC,EAAsC;AAAA;AAClC,oDAAMC,cAAc,EAApB;AAAA,oDAAwBC,eAAe,EAAvC;AACA/E,kDAAEoC,OAAF,CAAUkC,MAAV,EAAkB,UAASjC,CAAT,EAAY;AAC1B,wDAAIA,EAAE2C,MAAF,IAAY,CAAhB,EAAmB;AACfF,oEAAYnC,IAAZ,CAAiBN,CAAjB;AACH,qDAFD,MAGK;AACD0C,qEAAapC,IAAb,CAAkBN,CAAlB;AACH;AACJ,iDAPD;AAQAkC,yDAASU,MAAT,CAAgBF,YAAhB,EAA8B,UAASjB,GAAT,EAAc;AACxC,wDAAIA,GAAJ,EAAS;AAAE,+DAAOjB,GAAGiB,GAAH,CAAP;AAAiB;AAC5BS,6DAASW,MAAT,CAAgBJ,WAAhB,EAA6B,UAAShB,GAAT,EAAc;AACvC,4DAAIA,GAAJ,EAAS;AAAE,mEAAOjB,GAAGiB,GAAH,CAAP;AAAiB;AAC5B,+DAAOjB,IAAP;AACH,qDAHD;AAIH,iDAND;AAVkC;AAiBrC,yCAjBD,MAkBM;AACF;AAAA,mDAAOA;AAAP;AACH;AACJ,qCA3BD,MA4BK,IAAIR,EAAEE,OAAF,CAAUe,WAAV,KAAwBc,MAAM3C,KAAN,CAAYiB,IAAxC,EAA8C;;AAE/C,4CAAI0B,MAAMS,KAAN,IAAa,CAAb,IAAkBT,MAAMS,KAAN,IAAa,CAAnC,EAAsC;AAClC,gDAAMM,qBAAqBT,QAAQ,wBAAR,EAAkCS,kBAA7D;AAAA,gDAAiFC,qBAAoBV,QAAQ,mBAAR,EAA6BU,iBAAlI;;AAEA,gDAAI,OAAO/C,EAAEE,OAAF,CAAUE,UAAjB,KAAgC,WAApC,EAAiD;AAAA;AAC7C;;;AAGA,wDAAM4C,OAAO,IAAID,kBAAJ,CAAsBpE,GAAtB,EAA2BqB,EAAEE,OAA7B,CAAb;AACA,wDAAI6B,MAAM3C,KAAN,CAAYkD,OAAhB,EAAyB;AAAEU,6DAAKT,YAAL,GAAoBlB,MAApB;AAA+B;AAC1D;AAAA;AAAA,+DAAO2B,KAAK3B,MAAL,GAAc4B,GAAd,GAAoBC,IAApB,CAAyB,UAASxB,MAAT,EAAiB;;AAE7C,oEAAMe,cAAcf,OAAOyB,MAAP,CAAc,UAASnD,CAAT,EAAY;AAAE,2EAAOiC,OAAOmB,OAAP,CAAepD,CAAf,IAAkB,CAAzB;AAA6B,iEAAzD,CAApB;AACA,oEAAM0C,eAAeT,OAAOkB,MAAP,CAAc,UAASnD,CAAT,EAAY;AAAE,2EAAO0B,OAAO0B,OAAP,CAAepD,CAAf,IAAkB,CAAzB;AAA6B,iEAAzD,CAArB;AACA,oEAAIyC,YAAYY,MAAZ,GAAmB,CAAvB,EAA0B;AACtB,2EAAOL,KAAKH,MAAL,CAAYJ,WAAZ,EAAyBS,IAAzB,CAA8B,YAAW;AAC5C,4EAAIR,aAAaW,MAAb,IAAqB,CAAzB,EAA4B;AAAE,mFAAO7C,IAAP;AAAc;AAC5C,+EAAOwC,KAAKJ,MAAL,CAAYF,YAAZ,EAA0BQ,IAA1B,CAA+B,YAAW;AAC7C,mFAAO1C,IAAP;AACH,yEAFM,CAAP;AAGH,qEALM,EAKJ8C,KALI,CAKE,UAAU7B,GAAV,EAAe;AACpB,+EAAOjB,GAAGiB,GAAH,CAAP;AACH,qEAPM,CAAP;AAQH;AACD,oEAAIiB,aAAaW,MAAb,IAAqB,CAAzB,EAA4B;AAAE,2EAAO7C,IAAP;AAAc;AAC5C,uEAAOwC,KAAKJ,MAAL,CAAYF,YAAZ,EAA0BQ,IAA1B,CAA+B,YAAW;AAC7C,2EAAO1C,IAAP;AACH,iEAFM,CAAP;AAGH,6DAlBM,EAkBJ8C,KAlBI,CAkBE,UAAU7B,GAAV,EAAe;AACpB,uEAAOjB,GAAGiB,GAAH,CAAP;AACH,6DApBM;AAAP;AAAA;AAN6C;;AAAA;AA2BhD,6CA3BD,MA4BK;AACDS,2DAAW,IAAIY,kBAAJ,CAAuBnE,GAAvB,EAA4BqB,EAAEE,OAA9B,CAAX;AACA,oDAAI6B,MAAM3C,KAAN,CAAYkD,OAAhB,EAAyB;AAAEJ,6DAASK,YAAT,GAAwBlB,MAAxB;AAAmC;AAC9Da,yDAASU,MAAT,CAAgBX,MAAhB,EAAwB,UAASR,GAAT,EAAc;AAClC,wDAAIA,GAAJ,EAAS;AAAE,+DAAOjB,GAAGiB,GAAH,CAAP;AAAiB;AAC5B,wDAAMgB,cAAc,EAApB;AAAA,wDAAwBC,eAAe,EAAvC;AACA/E,sDAAEoC,OAAF,CAAUkC,MAAV,EAAkB,UAASjC,CAAT,EAAY;AAC1B,4DAAIA,EAAE2C,MAAF,IAAY,CAAhB,EAAmB;AACfF,wEAAYnC,IAAZ,CAAiBN,CAAjB;AACH,yDAFD,MAGK;AACD0C,yEAAapC,IAAb,CAAkBN,CAAlB;AACH;AACJ,qDAPD;AAQAkC,6DAASU,MAAT,CAAgBF,YAAhB,EAA8B,UAASjB,GAAT,EAAc;AACxC,4DAAIA,GAAJ,EAAS;AAAE,mEAAOjB,GAAGiB,GAAH,CAAP;AAAiB;AAC5BS,iEAASW,MAAT,CAAgBJ,WAAhB,EAA6B,UAAShB,GAAT,EAAc;AACvC,gEAAIA,GAAJ,EAAS;AAAE,uEAAOjB,GAAGiB,GAAH,CAAP;AAAiB;AAC5B,mEAAOjB,IAAP;AACH,yDAHD;AAIH,qDAND;AAOH,iDAlBD;AAmBH;AACJ,yCAtDD,MAuDM;AACFA;AACH;AACJ,qCA5DI,MA6DA;AACDA;AACH;AArGsC;;AAAA;AAsG1C,6BAtGD,MAwGIA,GAAG,IAAH;AAEP,yBAhHL,EAgHO,UAASiB,GAAT,EAAc;AACb/B,qCAAS+B,GAAT;AACH,yBAlHL;AAfC;AAkIJ;AACJ,aAvID,CAwIA,OAAOA,GAAP,EAAY;AACR/B,yBAAS+B,GAAT;AACH;AACJ;;;;;;AAGL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwEa8B,uB,WAAAA,uB;;;AACT;;;;;AAKA,qCAAY5E,GAAZ,EAAiBC,kBAAjB,EAAqC;AAAA;;AAAA,iJAC3BD,GAD2B,EACtBC,kBADsB;AAEpC;;AAED;;;;;;;4BAGY;AACR,gBAAIjB,EAAEgC,KAAF,CAAQ,KAAKrB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAM4B,YAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,SAAb,EAAqB,IAAIyB,KAAJ,CAAU,2DAAV,CAArB;AACA,qBAAKrD,aAAL,IAAsB,KAAKa,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQE,UAA5C,CAAtB;AACH;AACD,mBAAO,KAAK9B,aAAL,CAAP;AACH;;AAED;;;;;;4BAGY;AACR,gBAAIX,EAAEgC,KAAF,CAAQ,KAAKlB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAMyB,YAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,SAAb,EAAqB,IAAIyB,KAAJ,CAAU,mDAAV,CAArB;AACA;AACA,oBAAM+B,SAAS,KAAKvE,SAAL,EAAf;AACAtB,qBAAKmB,OAAL,CAAa0E,MAAb,EAAoB,IAAI/B,KAAJ,CAAU,gDAAV,CAApB;AACA,qBAAKlD,aAAL,IAAsBX,gBAAgB6F,MAAhB,CAAuB,KAAKvE,KAAL,CAAWwE,cAAX,EAAvB,EACjBC,KADiB,CACX3D,UAAQQ,UADG,EAEjBoD,KAFiB,CAEXJ,OAAOxD,UAAQU,WAAf,CAFW,EAEkBmD,OAFlB,EAAtB;AAGH;AACD,mBAAO,KAAKtF,aAAL,CAAP;AACH;;;;EArCwCC,c;;AA0C7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0CasF,uB,WAAAA,uB;;;AACT;;;;;AAKA,qCAAYrF,GAAZ,EAAiBC,kBAAjB,EAAqC;AAAA;;AAAA,iJAC3BD,GAD2B,EACtBC,kBADsB;AAEpC;;AAED;;;;;;;4BAGY;AACR,gBAAIjB,EAAEgC,KAAF,CAAQ,KAAKlB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAMyB,YAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,SAAb,EAAqB,IAAIyB,KAAJ,CAAU,mDAAV,CAArB;AACA;AACA,oBAAM+B,SAAS,KAAKvE,SAAL,EAAf;AACAtB,qBAAKmB,OAAL,CAAa0E,MAAb,EAAoB,IAAI/B,KAAJ,CAAU,gDAAV,CAApB;AACA,qBAAKlD,aAAL,IAAsBX,gBAAgB6F,MAAhB,CAAuB,KAAKvE,KAAL,CAAWwE,cAAX,EAAvB,EACjBC,KADiB,CACX3D,UAAQU,WADG,EAEjBkD,KAFiB,CAEXJ,OAAOxD,UAAQQ,UAAf,CAFW,EAEiBqD,OAFjB,EAAtB;AAGH;AACD,mBAAO,KAAKtF,aAAL,CAAP;AACH;;AAED;;;;;;4BAGY;AACR,gBAAId,EAAEgC,KAAF,CAAQ,KAAKrB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAM4B,YAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,SAAb,EAAqB,IAAIyB,KAAJ,CAAU,2DAAV,CAArB;AACA,qBAAKrD,aAAL,IAAsB,KAAKa,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQe,WAA5C,CAAtB;AACH;AACD,mBAAO,KAAK3C,aAAL,CAAP;AACH;;;;EArCwCI,c;;AA2C7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2FauF,wB,WAAAA,wB;;;AACT,sCAAYtF,GAAZ,EAAiBuF,WAAjB,EAA8B;AAAA;;AAAA,mJACpBvF,GADoB,EACfuF,WADe;AAEzB;;AAEL;;;;;;;;;AAyDA;;;;;gCAKQxE,Q,EAAU;AACd,gBAAMyE,cAAc,mIAAgBC,OAApC;AACA,gBAAMC,OAAO,IAAb;AACAA,iBAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,oBAAIA,GAAJ,EAAS;AAAE,2BAAO/B,SAAS+B,GAAT,CAAP;AAAuB;AAClC0C,4BAAYI,IAAZ,CAAiBF,IAAjB,EAAuB3E,QAAvB;AACH,aAHD;AAIH;;AAED;;;;;;;;;AAsDA;;;;;;;;;;;;;;;;;;+BAkBOf,G,EAAKe,Q,EAAU;AAClB,gBAAM2E,OAAO,IAAb;AACA,gBAAI,OAAO3E,QAAP,KAAoB,UAAxB,EAAoC;AAAA;AAChC,wBAAM8E,IAAInC,QAAQ,GAAR,CAAV;AAAA,wBAAwBoC,WAAWD,EAAEE,KAAF,EAAnC;AACAC,4BAAQJ,IAAR,CAAaF,IAAb,EAAmB1F,GAAnB,EAAwB,UAAS8C,GAAT,EAAc;AAClC,4BAAIA,GAAJ,EAAS;AAAE,mCAAOgD,SAASG,MAAT,CAAgBnD,GAAhB,CAAP;AAA8B;AACzCgD,iCAASI,OAAT,CAAiB,IAAjB;AACH,qBAHD;AAIA;AAAA,2BAAOJ,SAASK;AAAhB;AANgC;;AAAA;AAOnC,aAPD,MAQK;AACD,uBAAOH,QAAQJ,IAAR,CAAaF,IAAb,EAAmB1F,GAAnB,EAAwBe,QAAxB,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;;;;+BAkBOf,G,EAAKe,Q,EAAU;AAClB,gBAAM2E,OAAO,IAAb;AACA,gBAAI,OAAO3E,QAAP,KAAoB,UAAxB,EAAoC;AAAA;AAChC,wBAAM8E,IAAInC,QAAQ,GAAR,CAAV;AAAA,wBAAwBoC,WAAWD,EAAEE,KAAF,EAAnC;AACAK,4BAAQR,IAAR,CAAaF,IAAb,EAAmB1F,GAAnB,EAAwB,UAAS8C,GAAT,EAAc;AAClC,4BAAIA,GAAJ,EAAS;AAAE,mCAAOgD,SAASG,MAAT,CAAgBnD,GAAhB,CAAP;AAA8B;AACzCgD,iCAASI,OAAT,CAAiB,IAAjB;AACH,qBAHD;AAIA;AAAA,2BAAOJ,SAASK;AAAhB;AANgC;;AAAA;AAOnC,aAPD,MAQK;AACD,uBAAOC,QAAQR,IAAR,CAAaF,IAAb,EAAmB1F,GAAnB,EAAwBe,QAAxB,CAAP;AACH;AACJ;;;gCAEOA,Q,EAAU;AACd,iBAAKsF,SAAL,CAAeV,OAAf,CAAuB5E,QAAvB;AACH;;;4BA9LW;AACR,gBAAI/B,EAAEgC,KAAF,CAAQ,KAAKrB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAM4B,YAAU,KAAKsD,UAAL,EAAhB;AAAA,oBACIyB,oBAAoB,KAAK9F,SAAL,GAAiBE,QAAjB,EADxB;AAEA,oBAAIa,UAAQe,WAAR,KAAwBgE,kBAAkB5E,IAA9C,EAAoD;AAChD,yBAAK/B,aAAL,IAAsB,KAAKa,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQE,UAA5C,CAAtB;AACH,iBAFD,MAGK,IAAGF,UAAQE,UAAR,KAAuB6E,kBAAkB5E,IAA5C,EAAkD;AACnD,yBAAK/B,aAAL,IAAsB,KAAKa,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQe,WAA5C,CAAtB;AACH,iBAFI,MAGA;AACD;AACA,0BAAM,IAAI/C,SAAJ,CAAc,wDAAd,CAAN;AACH;AACJ;AACD,mBAAO,KAAKI,aAAL,CAAP;AACH;;;4BAEW;AACR,gBAAIX,EAAEgC,KAAF,CAAQ,KAAKlB,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAMyB,YAAU,KAAKsD,UAAL,EAAhB;AAAA,oBACI0B,eAAe,KAAK/F,SAAL,EADnB;AAAA,oBAEI8F,oBAAoBC,aAAa7F,QAAb,EAFxB;AAGAxB,qBAAKmB,OAAL,CAAakB,SAAb,EAAsB,IAAIhC,SAAJ,CAAc,0DAAd,CAAtB;AACA;AACA,qBAAKO,aAAL,IAAsBX,gBAAgB6F,MAAhB,CAAuB,KAAKvE,KAAL,CAAWwE,cAAX,EAAvB,CAAtB;AACA;AACA,oBAAMuB,mBAAmB,KAAKH,SAAL,CAAepB,cAAf,EAAzB;AACA;AACA,oBAAMwB,eAAe,KAAKhG,KAAL,CAAWwE,cAAX,EAArB;AACA,oBAAMyB,OAAO,EAAb;AAAA,oBAAiBC,QAAM,EAAvB;AACA,oBAAM1E,cAAc7C,gBAAgBqD,MAAhB,CAAuB,UAAvB,EAAmCmE,IAAnC,CAAwCJ,gBAAxC,EAA0DK,OAA1D,EAApB;AAAA,oBACI9E,aAAa3C,gBAAgBqD,MAAhB,CAAuB,SAAvB,EAAkCmE,IAAlC,CAAuCJ,gBAAvC,EAAyDK,OAAzD,EADjB;AAEA;AACA,oBAAItF,UAAQe,WAAR,KAAwBgE,kBAAkB5E,IAA9C,EAAoD;AAChDgF,yBAAKD,YAAL,IAAqB,CAAElF,UAAQQ,UAAV,CAArB;AACA4E,0BAAMH,gBAAN,IAA0B,CAACzE,UAAD,CAA1B;AACA,yBAAK+E,KAAL,CAAWC,IAAX,CAAgBP,gBAAhB,EAAkC,EAAlC,EACKQ,IADL,CACU,CAACN,IAAD,EAAOC,KAAP,CADV,EAEKzB,KAFL,CAEWjD,WAFX,EAEwBkD,KAFxB,CAE8BoB,aAAahF,UAAQU,WAArB,CAF9B,EAEiEmD,OAFjE;AAGH,iBAND,MAOK,IAAI7D,UAAQE,UAAR,KAAuB6E,kBAAkB5E,IAA7C,EAAmD;AACpDgF,yBAAKD,YAAL,IAAqB,CAAElF,UAAQU,WAAV,CAArB;AACA0E,0BAAMH,gBAAN,IAA0B,CAACvE,WAAD,CAA1B;AACA,yBAAK6E,KAAL,CAAWC,IAAX,CAAgBP,gBAAhB,EAAkC,EAAlC,EACKQ,IADL,CACU,CAACN,IAAD,EAAOC,KAAP,CADV,EAEKzB,KAFL,CAEWnD,UAFX,EAEuBoD,KAFvB,CAE6BoB,aAAahF,UAAQQ,UAArB,CAF7B,EAE+DqD,OAF/D;AAGH;AACD;AACA,sBAAM,IAAI7F,SAAJ,CAAc,wDAAd,CAAN;AACH;AACD,mBAAO,KAAKO,aAAL,CAAP;AACH;;;4BAoBe;AACZ,gBAAId,EAAEgC,KAAF,CAAQ,KAAKpB,iBAAL,CAAR,CAAJ,EAAsC;AAClC,oBAAMqH,OAAO,KAAKzG,SAAL,GAAiBsE,UAAjB,GAA8BoC,gBAA9B,EAAb;AACA,oBAAM3F,YAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,SAAb,EAAsB,IAAIhC,SAAJ,CAAc,0DAAd,CAAtB;AACA;AACA,oBAAM4H,sBAAsBF,KAAKG,kBAAL,CAAwB7F,UAAQ8F,kBAAhC,CAA5B;AACA,oBAAIrI,EAAEuB,QAAF,CAAW4G,mBAAX,CAAJ,EAAqC;AACjC,yBAAKvH,iBAAL,IAA0B,KAAKY,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoC,KAAKoE,UAAL,GAAkBwC,kBAAtD,CAA1B;AACA,2BAAO,KAAKzH,iBAAL,CAAP;AACH;AACD;AACA,oBAAM0C,cAAc,KAAK9B,SAAL,GAAiBE,QAAjB,EAApB;AACA,oBAAMuB,cAAcK,YAAYR,KAAZ,CAAkBP,UAAQU,WAA1B,CAApB;AACA,oBAAMR,aAAa,KAAKjB,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQE,UAA5C,CAAnB;AACA,oBAAMM,aAAaN,WAAWK,KAAX,CAAiBP,UAAQQ,UAAzB,CAAnB;AACA,oBAAMuF,UAAU/F,UAAQ8F,kBAAxB;AACA;AACAJ,qBAAKM,kBAAL,CAAwB;AACpB7F,0BAAM4F,OADc,EACLE,OAAOF,OADF,EACWG,QAAQ,KADnB,EAC0BC,QAAQ,IADlC,EACwCC,MAAM,QAD9C;AAEpBC,4BAAQN,OAFY,EAEHO,MAAMP,OAFH,EAEYQ,SAAS,KAFrB;AAGpBC,4BAAQ,CACJ,EAACrG,MAAM,IAAP,EAAaiG,MAAM,SAAnB,EAA8BK,SAAS,IAAvC,EADI,EAEJ;AACItG,8BAAM,UADV;AAEIuG,iCAAS,IAFb;AAGIC,kCAAU,KAHd;AAIIP,8BAAO1F,YAAY0F,IAAZ,IAAoB,SAArB,GAAkC,SAAlC,GAA8C1F,YAAY0F;AAJpE,qBAFI,EAQJ;AACIjG,8BAAM,SADV;AAEIuG,iCAAS,IAFb;AAGIC,kCAAU,KAHd;AAIIP,8BAAO5F,WAAW4F,IAAX,IAAmB,SAApB,GAAiC,SAAjC,GAA6C5F,WAAW4F;AAJlE,qBARI,CAHY;AAiBpBQ,iCAAa,CACT;AACIR,8BAAM,QADV;AAEII,gCAAQ,CAAC,UAAD,EAAa,SAAb;AAFZ,qBADS,CAjBO;AAuBpB,kCAAc,CACV,EAAC,QAAQ,EAAT,EAAa,QAAQ,QAArB,EADU;AAvBM,iBAAxB;AA2BA,qBAAKnI,iBAAL,IAA0B,KAAKY,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,UAAQ8F,kBAA5C,CAA1B;AACH;AACD,mBAAO,KAAKzH,iBAAL,CAAP;AACH;;;;EAhIyCG,c;;AA0M9C;;;;;;;;;;AAQA,SAASqI,mBAAT,CAA6BpI,GAA7B,EAAkCe,QAAlC,EAA4C;AACxC;;;AAGA,QAAM2E,OAAO,IAAb;AACA,QAAMnE,UAAUmE,KAAKb,UAAL,EAAhB;AACA,QAAME,SAASW,KAAKlF,SAAL,EAAf;;AAEA,QAAIkF,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQe,WAAhC,EAA6C;AACzC;AACA,eAAOyC,OAAO/C,QAAP,CAAgBT,QAAQU,WAAxB,EAAqCoG,KAArC,GAA6C9D,IAA7C,CAAkD,UAAS+D,QAAT,EAAmB;AACxE;;AACA,gBAAItJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,uBAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,gCAAtB,CAAT,CAAP;AACH;AACD;AACA,mBAAOQ,IAAIgC,QAAJ,CAAaT,QAAQQ,UAArB,EAAiCsG,KAAjC,GAAyC9D,IAAzC,CAA8C,UAASgE,OAAT,EAAkB;AACnE,oBAAIvJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,2BAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,+BAAtB,CAAT,CAAP;AACH;AACD,oBAAMgJ,UAAU,EAAhB;AACAA,wBAAQ,UAAR,IAAsBF,QAAtB;AACAE,wBAAQ,SAAR,IAAqBD,OAArB;AACA7C,qBAAKW,SAAL,CAAepC,MAAf,CAAsBuE,OAAtB,EAA+BzH,QAA/B;AACH,aARM,CAAP;AASH,SAfM,CAAP;AAgBH,KAlBD,MAmBK,IAAI2E,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQE,UAAhC,EAA4C;AAC7C,eAAOzB,IAAIgC,QAAJ,CAAaT,QAAQU,WAArB,EAAkCoG,KAAlC,GAA0C9D,IAA1C,CAA+C,UAAS+D,QAAT,EAAmB;AACrE,gBAAItJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,uBAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,gCAAtB,CAAT,CAAP;AACH;AACD,mBAAOuF,OAAO/C,QAAP,CAAgBT,QAAQQ,UAAxB,EAAoCsG,KAApC,GAA4C9D,IAA5C,CAAiD,UAASgE,OAAT,EAAkB;AACtE;;AACA,oBAAIvJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,2BAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,+BAAtB,CAAT,CAAP;AACH;AACD,oBAAMgJ,UAAU,EAAhB;AACAA,wBAAQ,UAAR,IAAsBF,QAAtB;AACAE,wBAAQ,SAAR,IAAqBD,OAArB;AACA7C,qBAAKW,SAAL,CAAepC,MAAf,CAAsBuE,OAAtB,EAA+BzH,QAA/B;AACH,aATM,CAAP;AAUH,SAdM,CAAP;AAeH,KAhBI,MAiBA;AACD,eAAOA,SAAS,IAAIxB,SAAJ,CAAc,8CAAd,CAAT,CAAP;AACH;AACJ;AACD;;;;;;AAMA,SAASyG,OAAT,CAAiBhG,GAAjB,EAAsBe,QAAtB,EAAgC;AAC5B;;;;AAIA,QAAM2E,OAAO,IAAb;AACA,QAAI+C,MAAM,EAAV;AACA,QAAIzJ,EAAEwE,OAAF,CAAUxD,GAAV,CAAJ,EACIyI,MAAMzI,GAAN,CADJ,KAEK;AACDyI,YAAI9G,IAAJ,CAAS3B,GAAT;AACH;AACD0F,SAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,YAAIA,GAAJ,EACI/B,SAAS+B,GAAT,EADJ,KAEK;AAAA;AACD;AACA,oBAAI4F,mBAAJ;AACA,oBAAIhD,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQe,WAAhC,EAA6C;AACzCoG,iCAAahD,KAAKlF,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,QAAQE,UAA5C,CAAb;AACH,iBAFD,MAGK,IAAIiE,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQE,UAAhC,EAA4C;AAC7CiH,iCAAahD,KAAKlF,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,QAAQe,WAA5C,CAAb;AACH;AACDzD,sBAAM+C,UAAN,CAAiB6G,GAAjB,EAAsB,UAASE,IAAT,EAAe9G,EAAf,EAAmB;AACrC,2BAAOuG,oBAAoBxC,IAApB,CAAyBF,IAAzB,EAA8BgD,WAAWrF,OAAX,CAAmBsF,IAAnB,CAA9B,EAAwD9G,EAAxD,CAAP;AACH,iBAFD,EAEGd,QAFH;AATC;AAYJ;AACJ,KAhBD;AAiBH;;AAED;;;;;;;AAOA,SAAS6H,mBAAT,CAA6B5I,GAA7B,EAAkCe,QAAlC,EAA4C;AACxC;;;AAGA,QAAM2E,OAAO,IAAb;AACA,QAAMnE,UAAUmE,KAAKb,UAAL,EAAhB;AACA,QAAME,SAASW,KAAKlF,SAAL,EAAf;;AAEA,QAAIkF,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQe,WAAhC,EAA6C;AACzC;AACA,eAAOyC,OAAO/C,QAAP,CAAgBT,QAAQU,WAAxB,EAAqCoG,KAArC,GAA6C9D,IAA7C,CAAkD,UAAS+D,QAAT,EAAmB;AACxE;;AACA,gBAAItJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,uBAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,gCAAtB,CAAT,CAAP;AACH;AACD;AACA,mBAAOQ,IAAIgC,QAAJ,CAAaT,QAAQQ,UAArB,EAAiCsG,KAAjC,GAAyC9D,IAAzC,CAA8C,UAASgE,OAAT,EAAkB;AACnE,oBAAIvJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,2BAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,+BAAtB,CAAT,CAAP;AACH;AACD,oBAAMgJ,UAAU,EAAhB;AACAA,wBAAQ,UAAR,IAAsBF,QAAtB;AACAE,wBAAQ,SAAR,IAAqBD,OAArB;AACA7C,qBAAKW,SAAL,CAAenC,MAAf,CAAsBsE,OAAtB,EAA+BzH,QAA/B;AACH,aARM,CAAP;AASH,SAfM,CAAP;AAgBH,KAlBD,MAmBK,IAAI2E,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQE,UAAhC,EAA4C;AAC7C,eAAOzB,IAAIgC,QAAJ,CAAaT,QAAQU,WAArB,EAAkCoG,KAAlC,GAA0C9D,IAA1C,CAA+C,UAAS+D,QAAT,EAAmB;AACrE,gBAAItJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,uBAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,gCAAtB,CAAT,CAAP;AACH;AACD,mBAAOuF,OAAO/C,QAAP,CAAgBT,QAAQQ,UAAxB,EAAoCsG,KAApC,GAA4C9D,IAA5C,CAAiD,UAASgE,OAAT,EAAkB;AACtE;;AACA,oBAAIvJ,EAAEgC,KAAF,CAAQsH,QAAR,CAAJ,EAAuB;AACnB,2BAAOvH,SAAS,IAAIvB,iBAAJ,CAAsB,+BAAtB,CAAT,CAAP;AACH;AACD,oBAAMgJ,UAAU,EAAhB;AACAA,wBAAQ,UAAR,IAAsBF,QAAtB;AACAE,wBAAQ,SAAR,IAAqBD,OAArB;AACA7C,qBAAKW,SAAL,CAAenC,MAAf,CAAsBsE,OAAtB,EAA+BzH,QAA/B;AACH,aATM,CAAP;AAUH,SAdM,CAAP;AAeH,KAhBI,MAiBA;AACD,eAAOA,SAAS,IAAIxB,SAAJ,CAAc,8CAAd,CAAT,CAAP;AACH;AACJ;AACD;;;;;;AAMA,SAAS6G,OAAT,CAAiBpG,GAAjB,EAAsBe,QAAtB,EAAgC;AAC5B;;;;AAIA,QAAM2E,OAAO,IAAb;AACA,QAAI+C,MAAM,EAAV;AACA,QAAIzJ,EAAEwE,OAAF,CAAUxD,GAAV,CAAJ,EACIyI,MAAMzI,GAAN,CADJ,KAEK;AACDyI,YAAI9G,IAAJ,CAAS3B,GAAT;AACH;AACD0F,SAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,YAAIA,GAAJ,EACI/B,SAAS+B,GAAT,EADJ,KAEK;AAAA;AACD;AACA,oBAAI4F,mBAAJ;AACA,oBAAIhD,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQe,WAAhC,EAA6C;AACzCoG,iCAAahD,KAAKlF,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,QAAQE,UAA5C,CAAb;AACH,iBAFD,MAGK,IAAIiE,KAAKjF,KAAL,CAAWiB,IAAX,KAAoBH,QAAQE,UAAhC,EAA4C;AAC7CiH,iCAAahD,KAAKlF,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,QAAQe,WAA5C,CAAb;AACH;AACDzD,sBAAM+C,UAAN,CAAiB6G,GAAjB,EAAsB,UAASE,IAAT,EAAe9G,EAAf,EAAmB;AACrC,2BAAO+G,oBAAoBhD,IAApB,CAAyBF,IAAzB,EAA8BgD,WAAWrF,OAAX,CAAmBsF,IAAnB,CAA9B,EAAwD9G,EAAxD,CAAP;AACH,iBAFD,EAEGd,QAFH;AATC;AAYJ;AACJ,KAhBD;AAiBH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+EaqD,iB,WAAAA,iB;;;AACT;;;;;AAKA,+BAAYpE,GAAZ,EAAiBuF,WAAjB,EAA8B;AAAA;;AAAA,qIACpBvF,GADoB,EACfuF,WADe;AAE7B;AACD;;;;;;;;;AAqFA;;;;gCAIQxE,Q,EAAU;AACd,iBAAKsF,SAAL,CAAeV,OAAf,CAAuB5E,QAAvB;AACH;;AAED;;;;;;;;gCAKQA,Q,EAAU;AACd,gBAAMyE,cAAc,qHAAgBC,OAApC;AACA,gBAAMC,OAAO,IAAb;AACAA,iBAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,oBAAIA,GAAJ,EAAS;AAAE,2BAAO/B,SAAS+B,GAAT,CAAP;AAAuB;AAClC0C,4BAAYI,IAAZ,CAAiBF,IAAjB,EAAuB3E,QAAvB;AACH,aAHD;AAIH;;AAED;;;;;;;;;;;;;;;;;;;;;+BAkBOf,G,EAAKe,Q,EAAU;AAClB,gBAAM2E,OAAO,IAAb;AACA,gBAAI,OAAO3E,QAAP,KAAoB,UAAxB,EAAoC;AAAA;AAChC,wBAAM8E,IAAInC,QAAQ,GAAR,CAAV;AAAA,wBAAwBoC,WAAWD,EAAEE,KAAF,EAAnC;AACA8C,8CAA0BjD,IAA1B,CAA+BF,IAA/B,EAAqC1F,GAArC,EAA0C,UAAS8C,GAAT,EAAc;AACpD,4BAAIA,GAAJ,EAAS;AAAE,mCAAOgD,SAASG,MAAT,CAAgBnD,GAAhB,CAAP;AAA8B;AACzCgD,iCAASI,OAAT,CAAiB,IAAjB;AACH,qBAHD;AAIA;AAAA,2BAAOJ,SAASK;AAAhB;AANgC;;AAAA;AAOnC,aAPD,MAQK;AACD,uBAAO0C,0BAA0BjD,IAA1B,CAA+BF,IAA/B,EAAqC1F,GAArC,EAA0Ce,QAA1C,CAAP;AACH;AACJ;;AAED;;;;;;;;8BAKMA,Q,EAAU;AACZ,mBAAO,KAAK+H,SAAL,CAAe/H,QAAf,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;;kCAcUA,Q,EAAU;AAChB,gBAAM2E,OAAO,IAAb;AACA,gBAAI,OAAO3E,QAAP,KAAoB,UAAxB,EAAoC;AAAA;AAChC,wBAAM8E,IAAInC,QAAQ,GAAR,CAAV;AAAA,wBAAwBoC,WAAWD,EAAEE,KAAF,EAAnC;AACAgD,6CAAyBnD,IAAzB,CAA8BF,IAA9B,EAAoC,UAAS5C,GAAT,EAAc;AAC9C,4BAAIA,GAAJ,EAAS;AAAE,mCAAOgD,SAASG,MAAT,CAAgBnD,GAAhB,CAAP;AAA8B;AACzCgD,iCAASI,OAAT;AACH,qBAHD;AAIA;AAAA,2BAAOJ,SAASK;AAAhB;AANgC;;AAAA;AAOnC,aAPD,MAQK;AACD,uBAAO4C,yBAAyBnD,IAAzB,CAA8BF,IAA9B,EAAoC3E,QAApC,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;;;+BAiBOf,G,EAAKe,Q,EAAU;AAClB,gBAAM2E,OAAO,IAAb;AACA,gBAAI,OAAO3E,QAAP,KAAoB,UAAxB,EAAoC;AAAA;AAChC,wBAAM8E,IAAInC,QAAQ,GAAR,CAAV;AAAA,wBAAwBoC,WAAWD,EAAEE,KAAF,EAAnC;AACAiD,8CAA0BpD,IAA1B,CAA+BF,IAA/B,EAAqC1F,GAArC,EAA0C,UAAS8C,GAAT,EAAc;AACpD,4BAAIA,GAAJ,EAAS;AAAE,mCAAOgD,SAASG,MAAT,CAAgBnD,GAAhB,CAAP;AAA8B;AACzCgD,iCAASI,OAAT,CAAiB,IAAjB;AACH,qBAHD;AAIA;AAAA,2BAAOJ,SAASK;AAAhB;AANgC;;AAAA;AAOnC,aAPD,MAQK;AACD,uBAAO6C,0BAA0BpD,IAA1B,CAA+BF,IAA/B,EAAqC1F,GAArC,EAA0Ce,QAA1C,CAAP;AACH;AACJ;;;4BA7MW;AACR,mBAAO,KAAKsF,SAAZ;AACH;;AAED;;;;;;4BAGgB;;AAEZ,gBAAIrH,EAAEgC,KAAF,CAAQ,KAAKpB,iBAAL,CAAR,CAAJ,EAAsC;AAClC,oBAAMqH,OAAO,KAAKzG,SAAL,GAAiBsE,UAAjB,GAA8BoC,gBAA9B,EAAb;AACA,oBAAM3F,aAAU,KAAKsD,UAAL,EAAhB;AACA3F,qBAAKmB,OAAL,CAAakB,UAAb,EAAsB,IAAIhC,SAAJ,CAAc,0DAAd,CAAtB;AACA;AACA,oBAAM4H,sBAAsBF,KAAKG,kBAAL,CAAwB7F,WAAQ8F,kBAAhC,CAA5B;AACA,oBAAIrI,EAAEuB,QAAF,CAAW4G,mBAAX,CAAJ,EAAqC;AACjC,yBAAKvH,iBAAL,IAA0B,KAAKY,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,WAAQ8F,kBAA5C,CAA1B;AACA,2BAAO,KAAKzH,iBAAL,CAAP;AACH;AACD;AACA,oBAAM0C,cAAc,KAAK9B,SAAL,GAAiBE,QAAjB,EAApB;AACA,oBAAMuI,eAAe3G,YAAY4G,YAAZ,CAAyB3H,WAAQ4H,QAAjC,EAA2CxB,IAAhE;AACA,oBAAIyB,kBAAkB9G,YAAY4G,YAAZ,CAAyB3H,WAAQU,WAAjC,EAA8C0F,IAApE;AACA,oBAAIyB,oBAAoB,SAAxB,EAAmC;AAAEA,sCAAkB,SAAlB;AAA8B;AACnE,oBAAMC,aAAa;AACf,4BAAQ9H,WAAQ8F,kBADD;AAEf,8BAAU,IAFK;AAGf,8BAAU9F,WAAQ8F,kBAHH;AAIf,4BAAQ9F,WAAQ8F,kBAJD;AAKf,+BAAW,KALI;AAMf,8BAAU,CACN;AACI,gCAAQ,IADZ,EACkB,QAAQ,SAD1B,EACqC,YAAY,KADjD,EACwD,WAAW;AADnE,qBADM,EAIN;AACI,gCAAQ,QADZ,EACsB,QAAQ+B,eAD9B,EAC+C,YAAY,KAD3D,EACkE,QAAQ;AAD1E,qBAJM,EAON;AACI,gCAAQ,OADZ,EACqB,QAAQH,YAD7B,EAC2C,YAAY;AADvD,qBAPM,CANK;AAiBf,mCAAe,CACX,EAAE,QAAO,QAAT,EAAmB,UAAU,CAAE,QAAF,EAAY,OAAZ,CAA7B,EADW,CAjBA;AAoBf,kCAAc,CACV;AACI,gCAAQ,EADZ,EACgB,QAAQ;AADxB,qBADU;AApBC,iBAAnB;AA0BAhC,qBAAKM,kBAAL,CAAwB8B,UAAxB;;AAEA,qBAAKzJ,iBAAL,IAA0B,KAAKY,SAAL,GAAiBsE,UAAjB,GAA8BrE,KAA9B,CAAoCc,WAAQ8F,kBAA5C,CAA1B;AACH;AACD,mBAAO,KAAKzH,iBAAL,CAAP;AACH;;;4BAEW;AACR,gBAAIZ,EAAEgC,KAAF,CAAQ,KAAKlB,aAAL,CAAR,CAAJ,EAAkC;;AAE9B,oBAAMyB,aAAU,KAAKsD,UAAL,EAAhB;AAAA,oBACI0B,eAAe,KAAK/F,SAAL,EADnB;AAAA,oBAEI8F,oBAAoBC,aAAa7F,QAAb,EAFxB;AAGAxB,qBAAKmB,OAAL,CAAakB,UAAb,EAAsB,IAAIhC,SAAJ,CAAc,0DAAd,CAAtB;AACA;AACA,oBAAMkH,eAAe,KAAKhG,KAAL,CAAWwE,cAAX,EAArB;AACA;AACA,qBAAKnF,aAAL,IAAsBX,gBAAgB6F,MAAhB,CAAuB,KAAKvE,KAAL,CAAWwE,cAAX,EAAvB,CAAtB;AACA;AACA,qBAAKxC,MAAL,CAAY,OAAZ,EAAqB6G,OAArB;AACA;AACA,oBAAM5C,OAAO,EAAb;AAAA,oBAAiBC,QAAQ,EAAzB;AACA;AACA,oBAAM4C,gBAAgBhD,aAAa7F,QAAb,GAAwBuE,cAAxB,EAAtB;AACAyB,qBAAM6C,aAAN,IAAwB,CAAEhI,WAAQU,WAAV,CAAxB;AACA0E,sBAAOF,YAAP,IAAwB,CAAErH,gBAAgBqD,MAAhB,CAAuB,QAAvB,EAAiCmE,IAAjC,CAAsCH,YAAtC,EAAoDI,OAApD,EAAF,CAAxB;AACA,oBAAM2C,cAAcpK,gBAAgBqD,MAAhB,CAAuB,QAAvB,EAAiCmE,IAAjC,CAAsCH,YAAtC,EAAoDgD,KAAxE;AACA,qBAAK3C,KAAL,CAAWC,IAAX,CAAgBwC,aAAhB,EAA+B,EAA/B,EAAmCvC,IAAnC,CAAwC,CAACN,IAAD,EAAOC,KAAP,CAAxC,EAAuDzB,KAAvD,CAA6DsE,WAA7D,EAA0ErE,KAA1E,CAAgFnF,IAAIuB,WAAQU,WAAZ,CAAhF,EAA0GmD,OAA1G,CAAkH,KAAlH;AACH;AACD,mBAAO,KAAKtF,aAAL,CAAP;AACH;;;;EA5FkCC,c;AA2NvC;;;;;;;;AAMA,SAAS8I,yBAAT,CAAmC7I,GAAnC,EAAwCe,QAAxC,EAAkD;AAC9C,QAAM2E,OAAO,IAAb;AACA,QAAI+C,MAAM,EAAV;AACA,QAAIzJ,EAAEwE,OAAF,CAAUxD,GAAV,CAAJ,EACIyI,MAAMzI,GAAN,CADJ,KAEK;AACDyI,YAAI9G,IAAJ,CAAS3B,GAAT;AACH;AACD0F,SAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,YAAIA,GAAJ,EACI,OAAO/B,SAAS+B,GAAT,CAAP;;AAEJ,YAAM4G,QAAQjB,IAAIkB,GAAJ,CAAQ,UAAUtI,CAAV,EAAa;AAC/B,mBAAO;AACH,0BAAUqE,KAAKX,MAAL,CAAYW,KAAKnE,OAAL,CAAaU,WAAzB,CADP;AAEH,yBAASZ;AAFN,aAAP;AAIH,SALa,CAAd;AAMA,YAAIqE,KAAK/B,OAAT,EAAkB;AAAE+B,iBAAK9B,YAAL,GAAoBlB,MAApB;AAA+B;AACnD,eAAOgD,KAAK9B,YAAL,GAAoBgG,IAApB,CAAyBF,KAAzB,EAAgC3I,QAAhC,CAAP;AACH,KAZD;AAaH;AACD;;;;;AAKA,SAASgI,wBAAT,CAAkChI,QAAlC,EAA4C;AACxC,QAAM2E,OAAO,IAAb;AACAA,SAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,YAAIA,GAAJ,EAAS;AACL,mBAAO/B,SAAS+B,GAAT,CAAP;AACH;AACD,YAAI4C,KAAK/B,OAAT,EAAkB;AAAE,iBAAKC,YAAL,GAAoBlB,MAApB;AAA+B;AACnDgD,aAAK9B,YAAL,GAAoBsB,KAApB,CAA0B,QAA1B,EAAoCC,KAApC,CAA0CO,KAAKX,MAAL,CAAYW,KAAKnE,OAAL,CAAaU,WAAzB,CAA1C,EAAiFQ,MAAjF,CAAwF,IAAxF,EAA8F6B,GAA9F,GAAoGC,IAApG,CAAyG,UAASxB,MAAT,EAAiB;AACtH,gBAAIA,OAAO2B,MAAP,IAAe,CAAnB,EAAsB;AAAE,uBAAO3D,UAAP;AAAoB;AAC5C,mBAAO2E,KAAK9B,YAAL,GAAoBM,MAApB,CAA2BnB,MAA3B,EAAmCwB,IAAnC,CAAwC,YAAY;AACvD,uBAAOxD,UAAP;AACH,aAFM,CAAP;AAGH,SALD,EAKG4D,KALH,CAKS,UAAS7B,GAAT,EAAc;AACnB,mBAAO/B,SAAS+B,GAAT,CAAP;AACH,SAPD;AAQH,KAbD;AAcH;AACD;;;;;;AAMA,SAASkG,yBAAT,CAAmChJ,GAAnC,EAAwCe,QAAxC,EAAkD;AAC9C,QAAM2E,OAAO,IAAb;AACA,QAAI+C,MAAM,EAAV;AACA,QAAIzJ,EAAEwE,OAAF,CAAUxD,GAAV,CAAJ,EACIyI,MAAMzI,GAAN,CADJ,KAEK;AACDyI,YAAI9G,IAAJ,CAAS3B,GAAT;AACH;AACD0F,SAAKC,OAAL,CAAa,UAAS7C,GAAT,EAAc;AACvB,YAAIA,GAAJ,EAAS;AACL,mBAAO/B,SAAS+B,GAAT,CAAP;AACH;AACD,YAAM4G,QAAQjB,IAAIkB,GAAJ,CAAQ,UAAUtI,CAAV,EAAa;AAC/B,mBAAO;AACH,0BAAUqE,KAAKX,MAAL,CAAYW,KAAKnE,OAAL,CAAaU,WAAzB,CADP;AAEH,yBAASZ;AAFN,aAAP;AAIH,SALa,CAAd;AAMA,YAAIqE,KAAK/B,OAAT,EAAkB;AAAE+B,iBAAK9B,YAAL,GAAoBlB,MAApB;AAA+B;AACnD,eAAOgD,KAAK9B,YAAL,GAAoBM,MAApB,CAA2BwF,KAA3B,EAAkC3I,QAAlC,CAAP;AACH,KAZD;AAaH","file":"associations.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport async from 'async';\nimport {ParserUtils, DataAssociationMapping} from './types';\nimport {_} from 'lodash';\nimport {DataQueryable} from './queryable';\nimport {Args} from \"@themost/common/utils\";\nimport {QueryExpression, QueryFieldUtils} from \"@themost/query/query\";\nimport {AbstractMethodError,AbstractClassError, DataError, DataNotFoundError} from '@themost/common/errors';\n\n\nconst parentProperty = Symbol('parent');\nconst modelProperty = Symbol('model');\nconst baseModelProperty = Symbol('basemodel');\nconst mappingProperty = Symbol('model');\nconst queryProperty = Symbol('query');\n/**\n * @class\n * @abstract\n * @augments DataQueryable\n */\nexport class HasAssociation extends DataQueryable {\n    constructor(obj, associationMapping) {\n        super();\n        Args.check(new.target !== HasAssociation, new AbstractClassError());\n        //validate parent object\n        Args.notNull(obj,'Parent object');\n        //set parent\n        this[parentProperty] = obj;\n\n        if (_.isString(associationMapping)) {\n            //query mapping based on the given name\n            if (_.isObject(this.getParent())) {\n                const model = this.getParent().getModel();\n                if (_.isObject(model))\n                    this[mappingProperty] = model.inferMapping(associationMapping);\n            }\n        }\n        else if (_.isObject(associationMapping)) {\n            //get the specified mapping\n            if (associationMapping instanceof DataAssociationMapping)\n                this[mappingProperty] = associationMapping;\n            else\n                this[mappingProperty] = _.assign(new DataAssociationMapping(), associationMapping);\n        }\n    }\n\n    /**\n     * Gets the source object of this association.\n     * @returns {DataObject|*}\n     */\n    getParent() {\n        return this[parentProperty];\n    }\n\n    /**\n     * Gets the definition of this association.\n     * @returns {DataAssociationMapping}\n     */\n    getMapping() {\n        return this[mappingProperty];\n    }\n\n    /**\n     * @abstract\n     */\n    get query() {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * @abstract\n     */\n    get model() {\n        throw new AbstractMethodError();\n    }\n\n}\n\n/**\n * @class\n */\nexport class DataObjectAssociationListener {\n    /**\n     *\n     * @param {DataEventArgs} e\n     * @param {Function} callback\n     */\n    beforeSave(e, callback) {\n        try {\n            if (_.isNil(e.target)) {\n                return callback();\n            }\n            else {\n                const keys = Object.keys(e.target);\n                const mappings = [];\n                keys.forEach(function(x) {\n                    if (e.target.hasOwnProperty(x) && typeof e.target[x] === 'object' && e.target[x] != null) {\n                            //try to find field mapping, if any\n                            const mapping = e.model.inferMapping(x);\n                            if (mapping && mapping.associationType==='association' && mapping.childModel===e.model.name)\n                                mappings.push(mapping);\n                    }\n                });\n                async.eachSeries(mappings,\n                    /**\n                     * @param {DataAssociationMapping} mapping\n                     * @param {Function} cb\n                     */\n                    function(mapping, cb) {\n                        if (mapping.associationType==='association' && mapping.childModel===e.model.name) {\n                            /**\n                             * @type {DataField|*}\n                             */\n                            const field = e.model.field(mapping.childField), childField = field.property || field.name;\n                            //foreign key association\n                            if (typeof e.target[childField] !== 'object') {\n                                return cb();\n                            }\n                            if (e.target[childField].hasOwnProperty(mapping.parentField)) {\n                                return cb();\n                            }\n                            //change:21-Mar 2016\n                            //description: check if association belongs to this model or it's inherited from any base model\n                            //if current association belongs to base model\n                            if ((e.model.name !== field.model) && (!ParserUtils.parseBoolean(field.cloned))) {\n                                //do nothing and exit\n                                return cb();\n                            }\n\n                            //get associated mode\n                            const associatedModel = e.model.context.model(mapping.parentModel);\n\n                            let er;\n                            associatedModel.find(e.target[childField]).select(mapping.parentField).silent().flatten().take(1).list(function(err, result) {\n                                if (err) {\n                                    cb(err);\n                                }\n                                else if (_.isNil(result)) {\n                                    er = new Error('An associated object cannot be found.');er.code = 'EDATA';er.model = associatedModel.name;\n                                    cb(er);\n                                }\n                                else if (result.total==0) {\n                                    er = new Error('An associated object cannot be found.');er.code = 'EDATA';er.model = associatedModel.name;\n                                    cb(er);\n                                }\n                                else if (result.total>1) {\n                                    er = new Error('An associated object is defined more than once and cannot be bound.'); er.code = 'EDATA';er.model = associatedModel.name;\n                                    cb(er);\n                                }\n                                else {\n                                    e.target[childField][mapping.parentField]=result.records[0][mapping.parentField];\n                                    cb();\n                                }\n                            });\n                        }\n                        else {\n                           cb();\n                        }\n\n                    }, function(err) {\n                        callback(err);\n                    });\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n\n    }\n\n    /**\n     *\n     * @param {DataEventArgs} event\n     * @param {Function} callback\n     */\n    afterSave(event, callback) {\n        try {\n            if (typeof event.target === 'undefined' || event.target==null) {\n                callback(null);\n            }\n            else {\n                const keys = Object.keys(event.target);\n                const mappings = [];\n                keys.forEach(function(x) {\n                    if (event.target.hasOwnProperty(x)) {\n                        /**\n                         * @type DataAssociationMapping\n                         */\n                        const mapping = event.model.inferMapping(x);\n                        if (mapping)\n                            if (mapping.associationType=='junction') {\n                                mappings.push({ name:x, mapping:mapping });\n                            }\n                    }\n                });\n                async.eachSeries(mappings,\n                    /**\n                     * @param {{name:string,mapping:DataAssociationMapping}} x\n                     * @param {Function} cb\n                     */\n                    function(x, cb) {\n                        if (x.mapping.associationType=='junction') {\n                            const obj = event.model.convert(event.target);\n\n                            /**\n                             * @type {*|{deleted:Array}}\n                             */\n                            const childs = obj[x.name];\n\n                            let junction;\n                            if (!_.isArray(childs)) { return cb(); }\n                            if (x.mapping.childModel===event.model.name) {\n                                const HasParentJunction = require('./has-parent-junction').HasParentJunction;\n                                junction = new HasParentJunction(obj, x.mapping);\n                                if (event.model.$silent) {\n                                    junction.getBaseModel().silent();\n                                }\n                                if (event.state==1 || event.state==2) {\n                                    const toBeRemoved = [], toBeInserted = [];\n                                    _.forEach(childs, function(x) {\n                                        if (x.$state == 4) {\n                                            toBeRemoved.push(x);\n                                        }\n                                        else {\n                                            toBeInserted.push(x);\n                                        }\n                                    });\n                                    junction.insert(toBeInserted, function(err) {\n                                        if (err) { return cb(err); }\n                                        junction.remove(toBeRemoved, function(err) {\n                                            if (err) { return cb(err); }\n                                            return cb();\n                                        });\n                                    });\n                                }\n                                else  {\n                                    return cb();\n                                }\n                            }\n                            else if (x.mapping.parentModel===event.model.name) {\n\n                                if (event.state==1 || event.state==2) {\n                                    const DataObjectJunction = require('./data-object-junction').DataObjectJunction, HasTagAssociation = require('./data-object-tag').HasTagAssociation;\n\n                                    if (typeof x.mapping.childModel === 'undefined') {\n                                        /**\n                                         * @type {HasTagAssociation}\n                                         */\n                                        const tags = new HasTagAssociation(obj, x.mapping);\n                                        if (event.model.$silent) { tags.getBaseModel().silent(); }\n                                        return tags.silent().all().then(function(result) {\n\n                                            const toBeRemoved = result.filter(function(x) { return childs.indexOf(x)<0; });\n                                            const toBeInserted = childs.filter(function(x) { return result.indexOf(x)<0; });\n                                            if (toBeRemoved.length>0) {\n                                                return tags.remove(toBeRemoved).then(function() {\n                                                    if (toBeInserted.length==0) { return cb(); }\n                                                    return tags.insert(toBeInserted).then(function() {\n                                                        return cb();\n                                                    });\n                                                }).catch(function (err) {\n                                                    return cb(err);\n                                                });\n                                            }\n                                            if (toBeInserted.length==0) { return cb(); }\n                                            return tags.insert(toBeInserted).then(function() {\n                                                return cb();\n                                            });\n                                        }).catch(function (err) {\n                                            return cb(err);\n                                        });\n                                    }\n                                    else {\n                                        junction = new DataObjectJunction(obj, x.mapping);\n                                        if (event.model.$silent) { junction.getBaseModel().silent(); }\n                                        junction.insert(childs, function(err) {\n                                            if (err) { return cb(err); }\n                                            const toBeRemoved = [], toBeInserted = [];\n                                            _.forEach(childs, function(x) {\n                                                if (x.$state == 4) {\n                                                    toBeRemoved.push(x);\n                                                }\n                                                else {\n                                                    toBeInserted.push(x);\n                                                }\n                                            });\n                                            junction.insert(toBeInserted, function(err) {\n                                                if (err) { return cb(err); }\n                                                junction.remove(toBeRemoved, function(err) {\n                                                    if (err) { return cb(err); }\n                                                    return cb();\n                                                });\n                                            });\n                                        });\n                                    }\n                                }\n                                else  {\n                                    cb();\n                                }\n                            }\n                            else {\n                                cb();\n                            }\n                        }\n                        else\n                            cb(null);\n\n                    }, function(err) {\n                        callback(err);\n                    });\n            }\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n}\n\n/**\n * @classdesc Represents a one-to-many association between two models.\n <p>\n This association may be defined in a field of a data model as follows:\n </p>\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"Order\", \"id\": 449, \"title\": \"Order\", \"hidden\": false, \"sealed\": false,\n    \"abstract\": false, \"version\": \"1.0\",\n    \"fields\": [\n        ...\n        {\n            \"name\": \"customer\",\n            \"title\": \"Customer\",\n            \"description\": \"Party placing the order.\",\n            \"type\": \"Party\"\n        }\n        ...\n    ]\n }\n </code></pre>\n <p>\n where model Party has a one-to-many association with model Order.\n This association may also be defined in parent data model (Party) as follows:\n </p>\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"Party\", ...,\n    \"fields\": [\n        ...\n        {\n            \"name\": \"orders\",\n            \"title\": \"Orders\",\n            \"description\": \"A collection of orders made by the party (Persor or Organization).\",\n            \"type\": \"Order\",\n            \"many\":true\n        }\n        ...\n    ]\n }\n </code></pre>\n <p>\n where property orders of Party model defines an one-to-many association between Party and Order.\n HasOneToManyAssociation class inherits DataQueryable class for filtering, paging, grouping or orderind child items.\n </p>\n <pre class=\"prettyprint\"><code>\n var parties = context.model('Party');\n parties.where('id').equal(327).first().then(function(result) {\n        var party = parties.convert(result);\n        party.property('orders')\n            .select('id','orderedItem/name as productName','paymentDue')\n            .where('paymentMethod/alternateName').equal('DirectDebit')\n            .list().then(function(result) {\n               done();\n            }).catch(function(err) {\n               done(err);\n            });\n    }).catch(function(err) {\n        done(err);\n    });\n </code></pre>\n <pre class=\"prettyprint\"><code>\n //Results:\n id  productName           paymentDue\n --  --------------------  -----------------------------\n 6   Alienware X51 (2013)  2015-10-06 18:08:10.000+03:00\n 7   LaCie Blade Runner    2015-06-16 22:38:52.000+03:00\n </code></pre>\n * @class\n * @augments DataQueryable\n * @property {DataAssociationMapping} mapping - Gets or sets the mapping definition of this data object association.\n */\nexport class HasOneToManyAssociation extends HasAssociation {\n    /**\n     * @constructor\n     * @param {DataObject} obj - An instance of DataObject class which represents the parent data object\n     * @param {string|*} associationMapping - A string that represents the name of the field which holds association mapping or the association mapping itself.\n     */\n    constructor(obj, associationMapping) {\n        super(obj, associationMapping);\n    }\n\n    /**\n     * @returns {DataModel}\n     */\n    get model() {\n        if (_.isNil(this[modelProperty])) {\n            const mapping = this.getMapping();\n            Args.notNull(mapping,new Error('Data association mapping cannot be empty at this context.'));\n            this[modelProperty] = this.getParent().getContext().model(mapping.childModel);\n        }\n        return this[modelProperty];\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    get query() {\n        if (_.isNil(this[queryProperty])) {\n            const mapping = this.getMapping();\n            Args.notNull(mapping,new Error('Data association cannot be empty at this context.'));\n            //prepare query by selecting the foreign key of the related object\n            const parent = this.getParent();\n            Args.notNull(parent,new Error('Parent object cannot be empty at this context.'));\n            this[queryProperty] = QueryExpression.create(this.model.getViewAdapter())\n                .where(mapping.childField)\n                .equal(parent[mapping.parentField]).prepare();\n        }\n        return this[queryProperty];\n    }\n\n}\n\n\n/**\n * @classdesc Represents a foreign key association between two models.\n <p>\n This association may be defined in a field of a data model as follows:\n </p>\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"Order\", \"id\": 449, \"title\": \"Order\", \"hidden\": false, \"sealed\": false,\n    \"abstract\": false, \"version\": \"1.0\",\n    \"fields\": [\n        ...\n        {\n            \"name\": \"customer\",\n            \"title\": \"Customer\",\n            \"description\": \"Party placing the order.\",\n            \"type\": \"Party\"\n        }\n        ...\n    ]\n }\n </code></pre>\n <p>\n where model Order has a foreign key association with model Party (Person or Organization).\n HasManyToOneAssociation class inherits DataQueryable class for selecting the associated item.\n </p>\n <pre class=\"prettyprint\"><code>\n var orders = context.model('Order');\n orders.where('id').equal(145).first().then(function(result) {\n        var order = orders.convert(result);\n        order.property('customer')\n            .first().then(function(result) {\n                done(null, result);\n            }).catch(function(err) {\n                done(err);\n            });\n    }).catch(function(err) {\n        done(err);\n    });\n </code></pre>\n * @class\n * @augments DataQueryable\n */\nexport class HasManyToOneAssociation extends HasAssociation {\n    /**\n     * @constructor\n     * @param {DataObject} obj - An instance of DataObject class that represents the parent data object\n     * @param {string|*} associationMapping A string that represents the name of the field which holds association mapping or the association mapping itself.\n     */\n    constructor(obj, associationMapping) {\n        super(obj, associationMapping);\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    get query() {\n        if (_.isNil(this[queryProperty])) {\n            const mapping = this.getMapping();\n            Args.notNull(mapping,new Error('Data association cannot be empty at this context.'));\n            //prepare query by selecting the foreign key of the related object\n            const parent = this.getParent();\n            Args.notNull(parent,new Error('Parent object cannot be empty at this context.'));\n            this[queryProperty] = QueryExpression.create(this.model.getViewAdapter())\n                .where(mapping.parentField)\n                .equal(parent[mapping.childField]).prepare();\n        }\n        return this[queryProperty];\n    }\n\n    /**\n     * @returns {DataModel}\n     */\n    get model() {\n        if (_.isNil(this[modelProperty])) {\n            const mapping = this.getMapping();\n            Args.notNull(mapping,new Error('Data association mapping cannot be empty at this context.'));\n            this[modelProperty] = this.getParent().getContext().model(mapping.parentModel);\n        }\n        return this[modelProperty];\n    }\n}\n\n\n\n\n/**\n * @classdesc Represents a many-to-many association between two data models.\n * <p>\n *     This association may be defined in a field of a child model as follows:\n * </p>\n * <pre class=\"prettyprint\"><code>\n {\n     \"name\": \"User\", \"id\": 90, \"title\": \"Users\", \"inherits\": \"Account\", \"hidden\": false, \"sealed\": false, \"abstract\": false, \"version\": \"1.4\",\n     \"fields\": [\n        ...\n        {\n\t\t\t\"name\": \"groups\", \"title\": \"User Groups\", \"description\": \"A collection of groups where user belongs.\",\n\t\t\t\"type\": \"Group\",\n\t\t\t\"expandable\": true,\n\t\t\t\"mapping\": {\n\t\t\t\t\"associationAdapter\": \"GroupMembers\", \"parentModel\": \"Group\",\n\t\t\t\t\"parentField\": \"id\", \"childModel\": \"User\", \"childField\": \"id\",\n\t\t\t\t\"associationType\": \"junction\", \"cascade\": \"delete\",\n\t\t\t\t\"select\": [\n\t\t\t\t\t\"id\",\n\t\t\t\t\t\"name\",\n\t\t\t\t\t\"alternateName\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n        ...\n     ]\n     }\n </code></pre>\n <p>\n where model [User] has a many-to-many association with model [Group] in order to define the groups where a user belongs.\n This association will produce a database table with name of the specified association adapter name. If this name is missing\n then it will produce a table with a default name which comes of the concatenation of the model and the associated model.\n </p>\n <p>\n An instance of HasParentJunction class overrides DataQueryable methods for filtering associated objects:\n </p>\n <pre class=\"prettyprint\"><code>\n //check if the selected user belongs to Administrators group by querying user groups\n var users = context.model('User');\n users.where('name').equal('alexis.rees@example.com')\n .first().then(function(result) {\n        var user = users.convert(result);\n        user.property('groups').where('name').equal('Users').count().then(function(result) {\n            done(null, result);\n        });\n    }).catch(function(err) {\n        done(err);\n    });\n </code></pre>\n <p>\n Connects two objects (by inserting an association between parent and child object):\n </p>\n <pre class=\"prettyprint\"><code>\n //add the selected user to Administrators\n var users = context.model('User');\n users.where('name').equal('alexis.rees@example.com')\n .first().then(function(result) {\n        var user = users.convert(result);\n        user.property('groups').insert({ name:\"Administrators\" }).then(function(result) {\n            done(null, result);\n        });\n    }).catch(function(err) {\n        done(err);\n    });\n </code></pre>\n <p>\n Disconnects two objects (by removing an existing association):\n </p>\n <pre class=\"prettyprint\"><code>\n //remove the selected user from Administrators group\n var users = context.model('User');\n users.where('name').equal('alexis.rees@example.com')\n .first().then(function(result) {\n        var user = users.convert(result);\n        user.property('groups').remove({ name:\"Administrators\" }).then(function(result) {\n            done(null, result);\n        });\n    }).catch(function(err) {\n        done(err);\n    });\n </code></pre>\n * @class\n * @constructor\n * @augments DataQueryable\n * @param {DataObject} obj The parent data object reference\n * @param {string|*} association - A string that represents the name of the field which holds association mapping or the association mapping itself.\n * @property {DataModel} baseModel - The model associated with this data object junction\n * @property {DataObject} parent - Gets or sets the parent data object associated with this instance of DataObjectJunction class.\n * @property {DataAssociationMapping} mapping - Gets or sets the mapping definition of this data object association.\n */\nexport class HasManyToManyAssociation extends HasAssociation {\n    constructor(obj, association) {\n        super(obj, association);\n        }\n\n    /**\n     * @returns {DataModel}\n     */\n    get model() {\n        if (_.isNil(this[modelProperty])) {\n            const mapping = this.getMapping(),\n                parentObjectModel = this.getParent().getModel();\n            if (mapping.parentModel === parentObjectModel.name) {\n                this[modelProperty] = this.getParent().getContext().model(mapping.childModel);\n            }\n            else if(mapping.childModel === parentObjectModel.name) {\n                this[modelProperty] = this.getParent().getContext().model(mapping.parentModel);\n            }\n            else {\n                //throw association error\n                throw new DataError('Data association model cannot be found or is mispelled');\n            }\n        }\n        return this[modelProperty];\n    }\n\n    get query() {\n        if (_.isNil(this[queryProperty])) {\n            const mapping = this.getMapping(),\n                parentObject = this.getParent(),\n                parentObjectModel = parentObject.getModel();\n            Args.notNull(mapping, new DataError('Data association mapping cannot be empty at this context'));\n            //initialize query\n            this[queryProperty] = QueryExpression.create(this.model.getViewAdapter());\n            //get association adapter\n            const baseModelAdapter = this.baseModel.getViewAdapter();\n            //get model adapter\n            const modelAdapter = this.model.getViewAdapter();\n            const left = {}, right={};\n            const parentField = QueryFieldUtils.select('parentId').from(baseModelAdapter).getName(),\n                childField = QueryFieldUtils.select('valueId').from(baseModelAdapter).getName();\n            //find parent field\n            if (mapping.parentModel === parentObjectModel.name) {\n                left[modelAdapter] = [ mapping.childField ];\n                right[baseModelAdapter] = [childField];\n                this.query.join(baseModelAdapter, [])\n                    .with([left, right])\n                    .where(parentField).equal(parentObject[mapping.parentField]).prepare();\n            }\n            else if (mapping.childModel === parentObjectModel.name) {\n                left[modelAdapter] = [ mapping.parentField ];\n                right[baseModelAdapter] = [parentField];\n                this.query.join(baseModelAdapter, [])\n                    .with([left, right])\n                    .where(childField).equal(parentObject[mapping.childField]).prepare();\n            }\n            //throw association error\n            throw new DataError('Data association model cannot be found or is mispelled');\n        }\n        return this[queryProperty];\n    }\n\n    /**\n     * Overrides DataQueryable.execute() method\n     * @param callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @ignore\n     */\n    execute(callback) {\n        const executeFunc = super.prototype.execute;\n        const self = this;\n        self.migrate(function(err) {\n            if (err) { return callback(err); }\n            executeFunc.call(self, callback);\n        });\n    }\n\n    /**\n     * Gets an instance of DataModel which represents the data model where this association stores data.\n     * @returns {DataModel}\n     */\n    get baseModel() {\n        if (_.isNil(this[baseModelProperty])) {\n            const conf = this.getParent().getContext().getConfiguration();\n            const mapping = this.getMapping();\n            Args.notNull(mapping, new DataError('Data association mapping cannot be empty at this context'));\n            //search in cache (configuration.current.cache)\n            const baseModelDefinition = conf.getModelDefinition(mapping.associationAdapter);\n            if (_.isObject(baseModelDefinition)) {\n                this[baseModelProperty] = this.getParent().getContext().model(this.getMapping().associationAdapter);\n                return this[baseModelProperty];\n            }\n            //otherwise create model\n            const parentModel = this.getParent().getModel();\n            const parentField = parentModel.field(mapping.parentField);\n            const childModel = this.getParent().getContext().model(mapping.childModel);\n            const childField = childModel.field(mapping.childField);\n            const adapter = mapping.associationAdapter;\n            //set model definition\n            conf.setModelDefinition({\n                name: adapter, title: adapter, sealed: false, hidden: true, type: \"hidden\",\n                source: adapter, view: adapter, version: '1.0',\n                fields: [\n                    {name: \"id\", type: \"Counter\", primary: true},\n                    {\n                        name: 'parentId',\n                        indexed: true,\n                        nullable: false,\n                        type: (parentField.type == 'Counter') ? 'Integer' : parentField.type\n                    },\n                    {\n                        name: 'valueId',\n                        indexed: true,\n                        nullable: false,\n                        type: (childField.type == 'Counter') ? 'Integer' : childField.type\n                    }],\n                constraints: [\n                    {\n                        type: \"unique\",\n                        fields: ['parentId', 'valueId']\n                    }\n                ],\n                \"privileges\": [\n                    {\"mask\": 15, \"type\": \"global\"}\n                ]\n            });\n            this[baseModelProperty] = this.getParent().getContext().model(mapping.associationAdapter);\n        }\n        return this[baseModelProperty];\n    }\n\n    /**\n     * Inserts an association between parent object and the given object or array of objects.\n     * @param {*|Array} obj - An object or an array of objects to be related with parent object\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @returns {Promise<T>|*} - If callback parameter is missing then returns a Promise object.\n     * @example\n     //add the selected user to Administrators\n     var users = context.model('User');\n     users.where('name').equal('alexis.rees@example.com')\n     .first().then(function(result) {\n            var user = users.convert(result);\n            user.property('groups').insert({ name:\"Administrators\" }).then(function(result) {\n                done(null, result);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    insert(obj, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            insert_.call(self, obj, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(null);\n            });\n            return deferred.promise;\n        }\n        else {\n            return insert_.call(self, obj, callback);\n        }\n    }\n\n    /**\n     * Removes the association between parent object and the given object or array of objects.\n     * @param {*|Array} obj - An object or an array of objects to be disconnected from parent object\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @returns {Promise<T>|*} - If callback parameter is missing then returns a Promise object.\n     * @example\n     //remove the selected user from Administrators group\n     var users = context.model('User');\n     users.where('name').equal('alexis.rees@example.com')\n     .first().then(function(result) {\n            var user = users.convert(result);\n            user.property('groups').remove({ name:\"Administrators\" }).then(function(result) {\n                done(null, result);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    remove(obj, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            remove_.call(self, obj, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(null);\n            });\n            return deferred.promise;\n        }\n        else {\n            return remove_.call(self, obj, callback);\n        }\n    }\n\n    migrate(callback) {\n        this.baseModel.migrate(callback);\n    }\n}\n\n\n/**\n * @function\n * @memberOf HasManyToManyAssociation\n * Inserts a new association between a parent and a child object.\n * @param {DataObject|*} obj An object or an identifier that represents the child object\n * @param {Function} callback\n * @private\n */\nfunction insertSingleObject_(obj, callback) {\n    /**\n     * @type {HasManyToManyAssociation|*}\n     */\n    const self = this;\n    const mapping = self.getMapping();\n    const parent = self.getParent();\n\n    if (self.model.name === mapping.parentModel) {\n        //get parent id\n        return parent.property(mapping.parentField).value().then(function(parentId) {\n            \"use strict\";\n            if (_.isNil(parentId)) {\n                return callback(new DataNotFoundError('Parent object cannot be found.'))\n            }\n            //get child id\n            return obj.property(mapping.childField).value().then(function(valueId) {\n                if (_.isNil(parentId)) {\n                    return callback(new DataNotFoundError('Child object cannot be found.'))\n                }\n                const newItem = { };\n                newItem['parentId'] = parentId;\n                newItem['valueId'] = valueId;\n                self.baseModel.insert(newItem, callback);\n            });\n        });\n    }\n    else if (self.model.name === mapping.childModel) {\n        return obj.property(mapping.parentField).value().then(function(parentId) {\n            if (_.isNil(parentId)) {\n                return callback(new DataNotFoundError('Parent object cannot be found.'))\n            }\n            return parent.property(mapping.childField).value().then(function(valueId) {\n                \"use strict\";\n                if (_.isNil(parentId)) {\n                    return callback(new DataNotFoundError('Child object cannot be found.'))\n                }\n                const newItem = { };\n                newItem['parentId'] = parentId;\n                newItem['valueId'] = valueId;\n                self.baseModel.insert(newItem, callback);\n            });\n        });\n    }\n    else {\n        return callback(new DataError('Data association mapping cannot be resolved.'));\n    }\n}\n/**\n * @memberOf HasManyToManyAssociation\n * @param {*} obj\n * @param {Function} callback\n * @private\n */\nfunction insert_(obj, callback) {\n    /**\n     *\n     * @type {HasAssociation|*}\n     */\n    const self = this;\n    let arr = [];\n    if (_.isArray(obj))\n        arr = obj;\n    else {\n        arr.push(obj);\n    }\n    self.migrate(function(err) {\n        if (err)\n            callback(err);\n        else {\n            //get other model\n            let otherModel;\n            if (self.model.name === mapping.parentModel) {\n                otherModel = self.getParent().getContext().model(mapping.childModel);\n            }\n            else if (self.model.name === mapping.childModel) {\n                otherModel = self.getParent().getContext().model(mapping.parentModel);\n            }\n            async.eachSeries(arr, function(item, cb) {\n                return insertSingleObject_.call(self,otherModel.convert(item), cb)\n            }, callback);\n        }\n    });\n}\n\n/**\n * @memberOf HasManyToManyAssociation\n * Removes a relation between a parent and a child object.\n * @param {*} obj An object or an identifier that represents the child object\n * @param {Function} callback\n * @private\n */\nfunction removeSingleObject_(obj, callback) {\n    /**\n     * @type {HasManyToManyAssociation|*}\n     */\n    const self = this;\n    const mapping = self.getMapping();\n    const parent = self.getParent();\n\n    if (self.model.name === mapping.parentModel) {\n        //get parent id\n        return parent.property(mapping.parentField).value().then(function(parentId) {\n            \"use strict\";\n            if (_.isNil(parentId)) {\n                return callback(new DataNotFoundError('Parent object cannot be found.'))\n            }\n            //get child id\n            return obj.property(mapping.childField).value().then(function(valueId) {\n                if (_.isNil(parentId)) {\n                    return callback(new DataNotFoundError('Child object cannot be found.'))\n                }\n                const newItem = { };\n                newItem['parentId'] = parentId;\n                newItem['valueId'] = valueId;\n                self.baseModel.remove(newItem, callback);\n            });\n        });\n    }\n    else if (self.model.name === mapping.childModel) {\n        return obj.property(mapping.parentField).value().then(function(parentId) {\n            if (_.isNil(parentId)) {\n                return callback(new DataNotFoundError('Parent object cannot be found.'))\n            }\n            return parent.property(mapping.childField).value().then(function(valueId) {\n                \"use strict\";\n                if (_.isNil(parentId)) {\n                    return callback(new DataNotFoundError('Child object cannot be found.'))\n                }\n                const newItem = { };\n                newItem['parentId'] = parentId;\n                newItem['valueId'] = valueId;\n                self.baseModel.remove(newItem, callback);\n            });\n        });\n    }\n    else {\n        return callback(new DataError('Data association mapping cannot be resolved.'));\n    }\n}\n/**\n * @memberOf HasManyToManyAssociation\n * @param {*} obj\n * @param {Function} callback\n * @private\n */\nfunction remove_(obj, callback) {\n    /**\n     *\n     * @type {HasAssociation|*}\n     */\n    const self = this;\n    let arr = [];\n    if (_.isArray(obj))\n        arr = obj;\n    else {\n        arr.push(obj);\n    }\n    self.migrate(function(err) {\n        if (err)\n            callback(err);\n        else {\n            //get other model\n            let otherModel;\n            if (self.model.name === mapping.parentModel) {\n                otherModel = self.getParent().getContext().model(mapping.childModel);\n            }\n            else if (self.model.name === mapping.childModel) {\n                otherModel = self.getParent().getContext().model(mapping.parentModel);\n            }\n            async.eachSeries(arr, function(item, cb) {\n                return removeSingleObject_.call(self,otherModel.convert(item), cb)\n            }, callback);\n        }\n    });\n}\n\n/**\n * @classdesc Represents a collection of values associated with a data object e.g. a collection of tags of an article, a set of skills of a person etc.\n * <p>\n *     This association may be defined in a field of a data model as follows:\n * </p>\n * <pre class=\"prettyprint\"><code>\n {\n     \"name\": \"Person\", \"title\": \"Persons\", \"inherits\":\"Party\", \"version\": \"1.1\",\n     \"fields\": [\n        ...\n        {\n            \"@id\": \"https://themost.io/skills\",\n            \"name\": \"skills\",\n            \"title\": \"Skills\",\n            \"description\": \"A collection of skills of this person.\",\n            \"many\": true,\n            \"type\": \"Text\"\n        }\n        ...\n     ]\n     }\n </code></pre>\n <p>\n where model [Person] has a one-to-many association with a collection of strings in order to define the skills of a person.\n </p>\n <p>\n An instance of HasTagAssociation class overrides DataQueryable methods for filtering associated values:\n </p>\n <pre class=\"prettyprint\"><code>\n var persons = context.model('Person');\n persons.where('email').equal('veronica.fletcher@example.com')\n .getTypedItem().then(function(person) {\n            person.property('skills').all().then(function(result) {\n                return done(null, result);\n            });\n        }).catch(function(err) {\n            return done(err);\n        });\n </code></pre>\n <p>\n Insert item(s):\n </p>\n <pre class=\"prettyprint\"><code>\n var persons = context.model('Person');\n persons.where('email').equal('veronica.fletcher@example.com')\n .getTypedItem().then(function(person) {\n                person.property('skills').insert([\n                    \"node.js\",\n                    \"C#.NET\",\n                    \"PHP\"\n                ]).then(function() {\n                    return done();\n                });\n            }).catch(function(err) {\n                return done(err);\n            });\n </code></pre>\n <p>\n Remove item(s):\n </p>\n <pre class=\"prettyprint\"><code>\n var persons = context.model('Person');\n persons.where('email').equal('veronica.fletcher@example.com')\n .getTypedItem().then(function(person) {\n                person.property('skills').remove([\n                    \"C#.NET\"\n                ]).then(function() {\n                    return done();\n                });\n            }).catch(function(err) {\n                return done(err);\n            });\n </code></pre>\n * @class\n * @augments DataQueryable\n * @property {DataModel} baseModel - The model associated with this data object junction\n * @property {DataObject} parent - Gets or sets the parent data object associated with this instance of HasTagAssociation class.\n * @property {DataAssociationMapping} mapping - Gets or sets the mapping definition of this data object association.\n */\nexport class HasTagAssociation extends HasAssociation {\n    /**\n     * @constructor\n     * @param {DataObject} obj An object which represents the parent data object\n     * @param {String|*} association A string that represents the name of the field which holds association mapping or the association mapping itself.\n     */\n    constructor(obj, association) {\n        super(obj, association);\n    }\n    /**\n     * @returns {DataModel}\n     */\n    get model() {\n        return this.baseModel;\n    }\n\n    /**\n     * @returns {DataModel}\n     */\n    get baseModel() {\n\n        if (_.isNil(this[baseModelProperty])) {\n            const conf = this.getParent().getContext().getConfiguration();\n            const mapping = this.getMapping();\n            Args.notNull(mapping, new DataError('Data association mapping cannot be empty at this context'));\n            //search in cache (configuration.current.cache)\n            const baseModelDefinition = conf.getModelDefinition(mapping.associationAdapter);\n            if (_.isObject(baseModelDefinition)) {\n                this[baseModelProperty] = this.getParent().getContext().model(mapping.associationAdapter);\n                return this[baseModelProperty];\n            }\n            //otherwise create model\n            const parentModel = this.getParent().getModel();\n            const refersToType = parentModel.getAttribute(mapping.refersTo).type;\n            let parentFieldType = parentModel.getAttribute(mapping.parentField).type;\n            if (parentFieldType === 'Counter') { parentFieldType = 'Integer'; }\n            const definition = {\n                \"name\": mapping.associationAdapter,\n                \"hidden\": true,\n                \"source\": mapping.associationAdapter,\n                \"view\": mapping.associationAdapter,\n                \"version\": \"1.0\",\n                \"fields\": [\n                    {\n                        \"name\": \"id\", \"type\": \"Counter\", \"nullable\": false, \"primary\": true\n                    },\n                    {\n                        \"name\": \"object\", \"type\": parentFieldType, \"nullable\": false, \"many\": false\n                    },\n                    {\n                        \"name\": \"value\", \"type\": refersToType, \"nullable\": false\n                    }\n                ],\n                \"constraints\": [\n                    { \"type\":\"unique\", \"fields\": [ \"object\", \"value\" ] }\n                ],\n                \"privileges\": [\n                    {\n                        \"mask\": 15, \"type\": \"global\"\n                    }\n                ]\n            };\n            conf.setModelDefinition(definition);\n\n            this[baseModelProperty] = this.getParent().getContext().model(mapping.associationAdapter);\n        }\n        return this[baseModelProperty];\n    }\n\n    get query() {\n        if (_.isNil(this[queryProperty])) {\n\n            const mapping = this.getMapping(),\n                parentObject = this.getParent(),\n                parentObjectModel = parentObject.getModel();\n            Args.notNull(mapping, new DataError('Data association mapping cannot be empty at this context'));\n            //get model adapter\n            const modelAdapter = this.model.getViewAdapter();\n            //initialize query\n            this[queryProperty] = QueryExpression.create(this.model.getViewAdapter());\n            //add select\n            this.select(\"value\").asArray();\n            //modify query (add join)\n            const left = {}, right = {};\n            //get parent object adapter\n            const parentAdapter = parentObject.getModel().getViewAdapter();\n            left[ parentAdapter ] = [ mapping.parentField ];\n            right[ modelAdapter ] = [ QueryFieldUtils.select(\"object\").from(modelAdapter).getName() ];\n            const objectField = QueryFieldUtils.select(\"object\").from(modelAdapter).$name;\n            this.query.join(parentAdapter, []).with([left, right]).where(objectField).equal(obj[mapping.parentField]).prepare(false);\n        }\n        return this[queryProperty];\n    }\n\n    /**\n     * Migrates the underlying data association adapter.\n     * @param callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    migrate(callback) {\n        this.baseModel.migrate(callback);\n    }\n\n    /**\n     * Overrides DataQueryable.execute() method\n     * @param callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @ignore\n     */\n    execute(callback) {\n        const executeFunc = super.prototype.execute;\n        const self = this;\n        self.migrate(function(err) {\n            if (err) { return callback(err); }\n            executeFunc.call(self, callback);\n        });\n    }\n\n    /**\n     * Inserts an array of values\n     * @param {*} obj\n     * @param {Function=} callback\n     * @example\n     context.model('Person').where('email').equal('veronica.fletcher@example.com')\n     .getTypedItem().then(function(person) {\n            person.property('skills').insert([\n                \"node.js\",\n                \"C#.NET\"\n            ]).then(function() {\n                return done();\n            });\n        }).catch(function(err) {\n            return done(err);\n        });\n     *\n     */\n    insert(obj, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            HasTagAssociation_Insert_.call(self, obj, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(null);\n            });\n            return deferred.promise;\n        }\n        else {\n            return HasTagAssociation_Insert_.call(self, obj, callback);\n        }\n    }\n\n    /**\n     * Removes all values\n     * @param {Function=} callback\n     * @deprecated - This method is deprecated. Use removeAll() method instead\n     */\n    clear(callback) {\n        return this.removeAll(callback);\n    }\n\n    /**\n     * Removes all values\n     * @param {Function=} callback\n     * @example\n     context.model('Person').where('email').equal('veronica.fletcher@example.com')\n     .getTypedItem().then(function(person) {\n            person.property('skills').removeAll().then(function() {\n                return done();\n            });\n        }).catch(function(err) {\n            return done(err);\n        });\n     *\n     */\n    removeAll(callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            HasTagAssociation_Clear_.call(self, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve();\n            });\n            return deferred.promise;\n        }\n        else {\n            return HasTagAssociation_Clear_.call(self, callback);\n        }\n    }\n\n    /**\n     * Removes a value or an array of values\n     * @param {Array|*} obj\n     * @param {Function=} callback\n     * @example\n     context.model('Person').where('email').equal('veronica.fletcher@example.com')\n     .getTypedItem().then(function(person) {\n            person.property('skills').remove([\n                \"node.js\"\n            ]).then(function() {\n                return done();\n            });\n        }).catch(function(err) {\n            return done(err);\n        });\n     *\n     */\n    remove(obj, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            HasTagAssociation_Remove_.call(self, obj, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(null);\n            });\n            return deferred.promise;\n        }\n        else {\n            return HasTagAssociation_Remove_.call(self, obj, callback);\n        }\n    }\n}\n/**\n * @memberOf HasTagAssociation\n * @param {*} obj\n * @param {Function} callback\n * @private\n */\nfunction HasTagAssociation_Insert_(obj, callback) {\n    const self = this;\n    let arr = [];\n    if (_.isArray(obj))\n        arr = obj;\n    else {\n        arr.push(obj);\n    }\n    self.migrate(function(err) {\n        if (err)\n            return callback(err);\n\n        const items = arr.map(function (x) {\n            return {\n                \"object\": self.parent[self.mapping.parentField],\n                \"value\": x\n            }\n        });\n        if (self.$silent) { self.getBaseModel().silent(); }\n        return self.getBaseModel().save(items, callback);\n    });\n}\n/**\n * @memberOf HasTagAssociation\n * @param {Function} callback\n * @private\n */\nfunction HasTagAssociation_Clear_(callback) {\n    const self = this;\n    self.migrate(function(err) {\n        if (err) {\n            return callback(err);\n        }\n        if (self.$silent) { this.getBaseModel().silent(); }\n        self.getBaseModel().where(\"object\").equal(self.parent[self.mapping.parentField]).select(\"id\").all().then(function(result) {\n            if (result.length==0) { return callback(); }\n            return self.getBaseModel().remove(result).then(function () {\n                return callback();\n            });\n        }).catch(function(err) {\n            return callback(err);\n        });\n    });\n}\n/**\n * @memberOf HasTagAssociation\n * @param {*} obj\n * @param {Function} callback\n * @private\n */\nfunction HasTagAssociation_Remove_(obj, callback) {\n    const self = this;\n    let arr = [];\n    if (_.isArray(obj))\n        arr = obj;\n    else {\n        arr.push(obj);\n    }\n    self.migrate(function(err) {\n        if (err) {\n            return callback(err);\n        }\n        const items = arr.map(function (x) {\n            return {\n                \"object\": self.parent[self.mapping.parentField],\n                \"value\": x\n            }\n        });\n        if (self.$silent) { self.getBaseModel().silent(); }\n        return self.getBaseModel().remove(items, callback);\n    });\n}"]}