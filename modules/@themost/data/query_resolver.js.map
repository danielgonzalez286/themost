{"version":3,"sources":["query_resolver.es6"],"names":["_","Q","Args","LangUtils","QueryOptionsResolver","q","option","isNil","promise","resolve","check","test","TypeError","$top","parseInt","take","skip"],"mappings":";;;;;;;qjBAAA;;;;;;;;;AASA;;IAAOA,C;;AACP;;IAAOC,C;;AACP;;IAAQC,I,UAAAA,I;;AACR;;IAAQC,S,WAAAA,S;;;;;;IAEKC,oB,WAAAA,oB;;;;;;;;;AAET;;;;;8CAK6BC,C,EAAGC,M,EAAQ;AACpC,gBAAIN,EAAEO,KAAF,CAAQD,MAAR,CAAJ,EAAqB;AACjB,uBAAOL,GAAP;AACH;AACD,mBAAOA,EAAEO,OAAF,CAAU,UAACC,OAAD,EAAY;AACzBP,qBAAKQ,KAAL,CAAW,gBAAgBC,IAAhB,CAAqBL,MAArB,CAAX,EAAyC,IAAIM,SAAJ,CAAc,qCAAd,CAAzC;AACA,oBAAMC,OAAOV,UAAUW,QAAV,CAAmBR,MAAnB,CAAb;AACAD,kBAAEU,IAAF,CAAOF,QAAM,CAAN,GAAU,CAAC,CAAX,GAAeA,IAAtB;AACA,uBAAOJ,SAAP;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;+CAI8BJ,C,EAAGC,M,EAAQ;AACrC,gBAAIN,EAAEO,KAAF,CAAQD,MAAR,CAAJ,EAAqB;AACjB,uBAAOL,GAAP;AACH;AACD,mBAAOA,EAAEO,OAAF,CAAU,UAACC,OAAD,EAAY;AACzBP,qBAAKQ,KAAL,CAAW,eAAeC,IAAf,CAAoBL,MAApB,CAAX,EAAuC,IAAIM,SAAJ,CAAc,8CAAd,CAAvC;AACAP,kBAAEW,IAAF,CAAOb,UAAUW,QAAV,CAAmBR,MAAnB,CAAP;AACA,uBAAOG,SAAP;AACH,aAJM,CAAP;AAKH","file":"query_resolver.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport _ from 'lodash';\nimport Q from 'q';\nimport {Args} from \"@themost/common/utils\";\nimport {LangUtils} from \"../common/utils\";\n\nexport class QueryOptionsResolver {\n\n    /**\n     * @param {DataQueryable} q\n     * @param {*} option\n     * @returns Promise\n     */\n    static resolveTopQueryOption(q, option) {\n        if (_.isNil(option)) {\n            return Q();\n        }\n        return Q.promise((resolve)=> {\n            Args.check(/^[+-]?[0-9]*$/.test(option), new TypeError('Top query option must be an integer'));\n            const $top = LangUtils.parseInt(option);\n            q.take($top<=0 ? -1 : $top);\n            return resolve();\n        });\n    }\n\n    /**\n     * @param {DataQueryable} q\n     * @param {*} option\n     */\n    static resolveSkipQueryOption(q, option) {\n        if (_.isNil(option)) {\n            return Q();\n        }\n        return Q.promise((resolve)=> {\n            Args.check(/^[+]?[0-9]*$/.test(option),new TypeError('Skip query option must be a positive integer'));\n            q.skip(LangUtils.parseInt(option));\n            return resolve()\n        });\n    }\n\n}"]}