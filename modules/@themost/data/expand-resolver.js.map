{"version":3,"sources":["expand-resolver.es6"],"names":["_","testSplitExpandExpr_","s","ix","paren","charAt","ix1","isLiteral","lastSplitIndex","matches","match","length","substr","push","DataExpandResolver","isNil","result","reOptions","i","name","replace","expand","lastIndex","params","expandOptions","matchOption","exec","options"],"mappings":"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","file":"expand-resolver.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport _ from 'lodash';\n\n/**\n * @param {string} s\n * @returns {Array}\n * @private\n */\nfunction testSplitExpandExpr_(s) {\n    let ix = 0;\n    let paren = -1;\n    let charAt;\n    let ix1 = -1;\n    let isLiteral = false;\n    let lastSplitIndex = 0;\n    //let hasParen = false;\n    const matches = [];\n    let match = null;\n    while(ix<s.length) {\n        charAt=s.charAt(ix);\n        if ((charAt==='(') && !isLiteral) {\n            if (paren<0) {\n                match = [];\n                match[0] = s.substr(lastSplitIndex, ix-lastSplitIndex);\n                paren = 0;\n            }\n            if (ix1===-1) { ix1 = ix; }\n            //hasParen = true;\n            paren += 1;\n        }\n        else if ((charAt===')') && !isLiteral) {\n            if (paren>0) { paren -= 1; }\n        }\n        else if (charAt==='\\'') {\n            isLiteral = !isLiteral;\n        }\n        else if ((charAt===',') && (paren ===-1)) {\n            if (match===null) {\n                matches.push([s.substr(lastSplitIndex, ix-lastSplitIndex)]);\n            }\n            lastSplitIndex = ix+1;\n            //hasParen = false;\n        }\n\n        if ((ix === s.length - 1) && (paren === -1)) {\n            matches.push([s.substr(lastSplitIndex, ix-lastSplitIndex+1)]);\n            match = null;\n        }\n        else if (paren === 0) {\n            match = match || [ ];\n            match[1] = s.substr(ix1+1, ix-ix1-1);\n            matches.push(match);\n            paren = -1;\n            ix1 = -1;\n        }\n        ix += 1;\n    }\n    return matches;\n}\n\n/**\n * @ignore\n * @constructor\n */\nexport class DataExpandResolver {\n    /**\n     * Tests a string expression and returns an array of matched expandable entities\n     * @param {string} s\n     */\n    static testExpandExpression(s) {\n        if (_.isNil(s)) {\n            return [];\n        }\n        const result = [], reOptions = /(;|^)(\\$expand|\\$filter|\\$levels|\\$orderby|\\$groupby|\\$select|\\$top|\\$skip|\\$search|\\$count)=(.*?)(;\\$|$)/ig;\n        const matches = testSplitExpandExpr_(s);\n        for (let i = 0; i < matches.length; i++) {\n            const match = matches[i];\n            if (typeof match[1] === 'undefined') {\n                result.push({ name:match[0].replace(/^\\s+|\\s+$/,\"\") });\n            }\n            else {\n                const expand = { };\n                expand[\"name\"] = match[0].replace(/^\\s+|\\s+$/,\"\");\n                reOptions.lastIndex = 0;\n                const params = { };\n                const expandOptions = match[1];\n                let matchOption = reOptions.exec(expandOptions);\n                while(matchOption) {\n                    if (matchOption[3]) {\n                        params[matchOption[2]] = matchOption[3];\n                        reOptions.lastIndex = reOptions.lastIndex-2;\n                    }\n                    matchOption = reOptions.exec(expandOptions);\n                }\n                expand.options = params;\n                result.push(expand);\n            }\n        }\n        return result;\n    }\n}"]}