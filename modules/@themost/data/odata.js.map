{"version":3,"sources":["odata.es6"],"names":["_","ConfigurationStrategy","Args","LangUtils","DataConfigurationStrategy","SchemaLoaderStrategy","DataModel","DataContext","XDocument","Q","pluralize","AbstractMethodError","moment","nameProperty","Symbol","entityTypesProperty","entityContainerProperty","ignoreEntityTypesProperty","builderProperty","entityTypeProperty","edmProperty","singletonProperty","SchemaDefaultNamespace","EdmType","EdmBinary","EdmBoolean","EdmByte","EdmDate","EdmDateTimeOffset","EdmDouble","EdmDecimal","EdmDuration","EdmGuid","EdmInt16","EdmInt32","EdmInt64","EdmSByte","EdmSingle","EdmStream","EdmString","EdmTimeOfDay","EdmMultiplicity","Many","One","Unknown","ZeroOrOne","EntitySetKind","EntitySet","Singleton","FunctionImport","ActionImport","ProcedureConfiguration","name","parameters","isBound","type","returnType","returnCollectionType","nullable","notString","findRe","RegExp","p","find","x","test","push","isBoolean","ActionConfiguration","FunctionConfiguration","EntityTypeConfiguration","property","ignoredProperty","navigationProperty","actions","functions","baseType","a","hasAction","parameter","camelCase","isEmpty","hasFunction","exists","findIndex","assign","multiplicity","hasProperty","splice","key","isArray","propertyRef","hasKeyIndex","addProperty","EntitySetConfiguration","builder","entityType","check","ODataModelBuilder","TypeError","hasEntity","addEntity","kind","url","result","forEach","baseEntityType","getBuilder","getEntity","deep","re","deep_","concat","apply","contextLinkFunc","getContextLink","idLinkFunc","getIdLink","readLinkFunc","getReadLink","editLinkFunc","getEditLink","SingletonConfiguration","config","defaultNamespace","isNil","hasSingleton","getSingleton","hasEntitySet","getEntitySet","entityName","indexOf","hasOwnProperty","self","promise","resolve","reject","schema","namespace","entityContainer","keys","filter","entitySet","err","all","getEdm","then","doc","rootElement","createElement","setAttribute","appendChild","dataServicesElement","schemaElement","actionElements","functionElements","action","actionElement","paramElement","func","functionElement","returnTypeElement","entityTypeElement","keyElement","keyRefElement","propertyElement","entityContainerElement","child","childElement","childAnnotation","getUrl","catch","jsonFormatterFunc","jsonFormatter","context","instance","options","defaults","addContextAttribute","addCountAttribute","entityProperty","getEntityTypePropertyList","entityNavigationProperty","getEntityTypeNavigationPropertyList","getEntityTypeIgnoredPropertyList","singleJsonFormatter","parseBoolean","format","isObject","match","exec","getEntityTypeEntitySet","value","map","EntityDataContext","configuration","getConfiguration","dataTypes","definition","model","ODataConventionModelBuilder","superAddEntitySet","strategy","getStrategy","modelEntitySet","bind","modelEntityType","inheritedAttributes","primaryKey","attributes","primary","inherits","addEntitySet","derivesFrom","baseModel","base","attributeNames","mapping","inferMapping","dataType","edmType","hasKey","namespacedType","isNullable","addNavigationProperty","many","hasContextLink","hasIdLink","hasReadLink","schemaLoader","getModelPath","nativeFsModule","fs","require","modelPath","readdir","files","models","superGetEdm","initialize"],"mappings":"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","file":"odata.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport _ from 'lodash';\nimport {ConfigurationStrategy} from '@themost/common/config';\nimport {Args} from \"@themost/common/utils\";\nimport {DataConfigurationStrategy, SchemaLoaderStrategy} from \"./config\";\nimport {DataModel} from \"./model\";\nimport {DataContext} from \"./types\";\nimport {XDocument} from 'most-xml';\nimport Q from 'q';\nconst nameProperty = Symbol('name');\nconst entityTypesProperty = Symbol('entityTypes');\nconst entityContainerProperty = Symbol('entityContainer');\nconst ignoreEntityTypesProperty = Symbol('ignoredEntityTypes');\nconst builderProperty = Symbol('builder');\nconst entityTypeProperty = Symbol('entityType');\nconst edmProperty = Symbol('edm');\nconst singletonProperty = Symbol('singleton');\nimport pluralize from 'pluralize';\nimport {AbstractMethodError} from \"@themost/common/errors\";\nimport moment from 'moment';\nimport {LangUtils} from \"@themost/common/utils\";\n\nconst SchemaDefaultNamespace = \"Edm.Models\";\n\n/**\n * @class\n * @abstract\n */\nexport class EdmType {\n\n}\n\nEdmType.EdmBinary = \"Edm.Binary\";\nEdmType.EdmBoolean=\"Edm.Boolean\";\nEdmType.EdmByte=\"Edm.Byte\";\nEdmType.EdmDate=\"Edm.Date\";\nEdmType.EdmDateTimeOffset=\"Edm.DateTimeOffset\";\nEdmType.EdmDouble=\"Edm.Double\";\nEdmType.EdmDecimal=\"Edm.Decimal\";\nEdmType.EdmDuration=\"Edm.Duration\";\nEdmType.EdmGuid=\"Edm.Guid\";\nEdmType.EdmInt16=\"Edm.Int16\";\nEdmType.EdmInt32=\"Edm.Int32\";\nEdmType.EdmInt64=\"Edm.Int64\";\nEdmType.EdmSByte=\"Edm.SByte\";\nEdmType.EdmSingle=\"Edm.Single\";\nEdmType.EdmStream=\"Edm.Stream\";\nEdmType.EdmString=\"Edm.String\";\nEdmType.EdmTimeOfDay=\"Edm.TimeOfDay\";\n\n/**\n * @enum\n */\nexport class EdmMultiplicity {\n\n}\nEdmMultiplicity.Many = \"Many\";\nEdmMultiplicity.One = \"One\";\nEdmMultiplicity.Unknown = \"Unknown\";\nEdmMultiplicity.ZeroOrOne = \"ZeroOrOne\";\n\n/**\n * @enum\n */\nexport class EntitySetKind {\n\n}\nEntitySetKind.EntitySet = \"EntitySet\";\nEntitySetKind.Singleton = \"Singleton\";\nEntitySetKind.FunctionImport = \"FunctionImport\";\nEntitySetKind.ActionImport = \"ActionImport\";\n\nexport class ProcedureConfiguration {\n    /**\n     * @constructor\n     * @param {string} name\n     */\n    constructor(name) {\n        this.name = name;\n        this.parameters = [];\n        this.isBound = false;\n    }\n\n    /**\n     * @param type\n     * @returns {ProcedureConfiguration}\n     */\n    returns(type) {\n        this.returnType = type;\n        return this;\n    }\n    /**\n     * @param type\n     * @returns {ProcedureConfiguration}\n     */\n    returnsCollection(type) {\n        this.returnCollectionType =  type;\n        return this;\n    }\n    /**\n     * @param {string} name\n     * @param {string} type\n     * @param {boolean=} nullable\n     */\n    parameter(name, type, nullable) {\n        Args.notString(name, \"Action parameter name\");\n        Args.notString(type, \"Action parameter type\");\n        const findRe = new RegExp(`^${name}$` ,\"ig\");\n        const p = _.find(this.parameters, function(x) {\n            return findRe.test(x.name);\n        });\n        if (p) {\n            p.type = type;\n        }\n        else {\n            this.parameters.push({\n                \"name\":name,\n                \"type\":type,\n                \"nullable\": _.isBoolean(nullable) ? nullable : false\n            });\n        }\n        return this;\n    }\n\n}\n\n/**\n * @class\n * @augments ProcedureConfiguration\n */\nexport class ActionConfiguration extends ProcedureConfiguration {\n    /**\n     * @constructor\n     * @param {string} name\n     */\n    constructor(name) {\n        super(name);\n        this.isBound = false;\n    }\n\n}\n\n/**\n * @class\n * @augments ProcedureConfiguration\n */\nexport class FunctionConfiguration extends ProcedureConfiguration {\n    /**\n     * @constructor\n     * @param {string} name\n     */\n    constructor(name) {\n        super(name);\n        this.isBound = false;\n    }\n\n}\n\n/**\n * @class\n */\nexport class EntityTypeConfiguration {\n    /**\n     *\n     * @param {string} name\n     */\n    constructor(name) {\n        Args.notString(name, 'Entity type name');\n        this[nameProperty] = name;\n        this.property = [];\n        this.ignoredProperty = [];\n        this.navigationProperty = [];\n        this.actions = [];\n        this.functions = [];\n    }\n\n    get name() {\n        return this[nameProperty];\n    }\n\n    /**\n     * @param {string} name\n     */\n    derivesFrom(name) {\n        Args.notString(name,\"Enity type name\");\n        this.baseType = name;\n    }\n\n    /**\n     * Creates an action that bind to this entity type\n     * @param {string} name\n     * @returns ActionConfiguration\n     */\n    addAction(name) {\n        /**\n         * @type {ActionConfiguration|*}\n         */\n        let a = this.hasAction(name);\n        if (a) {\n            return a;\n        }\n        a = new ActionConfiguration(name);\n        //add current entity as parameter\n        a.parameter(_.camelCase(this.name), this.name);\n        a.isBound = true;\n        this.actions.push(a);\n        return a;\n    }\n\n    /**\n     * Checks if entity type has an action with the given name\n     * @param {string} name\n     * @returns {ActionConfiguration|*}\n     */\n    hasAction(name) {\n        if (_.isEmpty(name)) {\n            return;\n        }\n        const findRe = new RegExp(`^${name}$` ,\"ig\");\n        return _.find(this.actions, function(x) {\n           return findRe.test(x.name);\n        });\n    }\n\n    /**\n     * Creates an action that bind to this entity type\n     * @param {string} name\n     * @returns ActionConfiguration\n     */\n    addFunction(name) {\n        let a = this.hasFunction(name);\n        if (a) {\n            return a;\n        }\n        a = new FunctionConfiguration(name);\n        a.isBound = true;\n        a.parameter(_.camelCase(this.name), this.name);\n        //add current entity as parameter\n        this.functions.push(a);\n        return a;\n    }\n\n    /**\n     * Checks if entity type has a function with the given name\n     * @param {string} name\n     * @returns {ActionConfiguration|*}\n     */\n    hasFunction(name) {\n        if (_.isEmpty(name)) {\n            return;\n        }\n        const findRe = new RegExp(`^${name}$` ,\"ig\");\n        return _.find(this.functions, function(x) {\n            return findRe.test(x.name);\n        });\n    }\n\n    /**\n     * Adds a new EDM primitive property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {boolean=} nullable\n     * @returns EntityTypeConfiguration\n     */\n    addProperty(name, type, nullable) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (exists<0) {\n            const p = {\n                \"name\":name,\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            };\n            this.property.push(p);\n        }\n        else {\n            _.assign(this.property[exists], {\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Adds a new EDM navigation property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {string} multiplicity\n     * @returns EntityTypeConfiguration\n     */\n    addNavigationProperty(name, type, multiplicity) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.navigationProperty, (x)=> {\n            return x.name === name;\n        });\n\n        const p = {\n            \"name\":name,\n            \"type\": (multiplicity===\"Many\") ? `Collection(${type})` : type\n        };\n        if ((multiplicity===EdmMultiplicity.ZeroOrOne) || (multiplicity===EdmMultiplicity.Many)) {\n            p.nullable = true;\n        }\n\n        if (exists<0) {\n            this.navigationProperty.push(p);\n        }\n        else {\n            _.assign(this.navigationProperty[exists], p);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the navigation property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeNavigationProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Ignores a property from the entity\n     * @param name\n     * @returns {EntityTypeConfiguration}\n     */\n    ignore(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.ignoredProperty, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            return this;\n        }\n        this.ignoredProperty.push(name);\n\n    }\n\n    /**\n     * Removes the property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the property from the entity keys collection.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeKey(name) {\n        Args.notString(name,\"Key name\");\n        if (this.key && _.isArray(this.key.propertyRef)) {\n            const hasKeyIndex = _.findIndex(this.key.propertyRef, (x)=> {\n                return x.name === name;\n            });\n            if (hasKeyIndex<0) {\n                return this;\n            }\n            this.key.propertyRef.splice(hasKeyIndex, 1);\n            return this;\n        }\n    }\n\n    /**\n     * Configures the key property(s) for this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @returns {EntityTypeConfiguration}\n     */\n    hasKey(name, type) {\n        this.addProperty(name, type, false);\n        this.key = {\n            propertyRef: [\n                {\n                    \"name\": name\n                }\n            ]\n        };\n        return this;\n    }\n\n}\n\n/**\n *\n */\nexport class EntitySetConfiguration {\n    /**\n     * @param {ODataModelBuilder} builder\n     * @param {string} entityType\n     * @param {string} name\n     */\n    constructor(builder, entityType, name) {\n        Args.check(builder instanceof ODataModelBuilder, new TypeError('Invalid argument. Configuration builder must be an instance of ODataModelBuilder class'));\n        Args.notString(entityType, 'Entity Type');\n        Args.notString(name, 'EntitySet Name');\n        this[builderProperty] = builder;\n        this[entityTypeProperty] = entityType;\n        //ensure entity type\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        this.name = name;\n        this.kind = EntitySetKind.EntitySet;\n        //use the given name as entity set URL by default\n        this.url = name;\n    }\n\n    hasUrl(url) {\n        Args.notString(url, 'Entity Resource Path');\n        this.url = url;\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * @returns {ODataModelBuilder}\n     */\n    getBuilder() {\n        return this[builderProperty];\n    }\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypePropertyList() {\n        const result = {};\n        _.forEach(this.entityType.property, function(x) {\n           result[x.name] = x;\n        });\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            _.forEach(baseEntityType.property, function(x) {\n                result[x.name] = x;\n            });\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n\n    /**\n     * @param {string} name\n     * @param  {boolean=} deep\n     * @returns {*}\n     */\n    getEntityTypeProperty(name, deep) {\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        let p = _.find(this.entityType.property, function(x) {\n            return re.test(x.name);\n        });\n        if (p) {\n            return p;\n        }\n        const deep_ = _.isBoolean(deep) ? deep : true;\n        if (deep_) {\n            let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n            while (baseEntityType) {\n                p = _.find(baseEntityType.property, function(x) {\n                    return re.test(x.name);\n                });\n                if (p) {\n                    return p;\n                }\n                baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n            }\n        }\n    }\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypeIgnoredPropertyList() {\n        const result = [].concat(this.entityType.ignoredProperty);\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            result.push.apply(result, baseEntityType.ignoredProperty);\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n    /**\n     * @param {string} name\n     * @param  {boolean=} deep\n     * @returns {*}\n     */\n    getEntityTypeNavigationProperty(name, deep) {\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        let p = _.find(this.entityType.navigationProperty, function(x) {\n            return re.test(x.name);\n        });\n        if (p) {\n            return p;\n        }\n        const deep_ = _.isBoolean(deep) ? deep : true;\n        if (deep_) {\n            let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n            while (baseEntityType) {\n                p = _.find(baseEntityType.navigationProperty, function(x) {\n                    return re.test(x.name);\n                });\n                if (p) {\n                    return p;\n                }\n                baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n            }\n        }\n    }\n\n\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypeNavigationPropertyList() {\n        const result = [];\n        _.forEach(this.entityType.navigationProperty, function(x) {\n            result[x.name] = x;\n        });\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            _.forEach(baseEntityType.navigationProperty, function(x) {\n                result[x.name] = x;\n            });\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n\n    /**\n     * @returns {EntityTypeConfiguration}\n     */\n    get entityType() {\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            return this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        return this[builderProperty].getEntity(this[entityTypeProperty]);\n    }\n\n    /**\n     * @param contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} idLinkFunc\n     */\n    hasIdLink(idLinkFunc) {\n        this.getIdLink = idLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} readLinkFunc\n     */\n    hasReadLink(readLinkFunc) {\n        this.getReadLink = readLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} editLinkFunc\n     */\n    hasEditLink(editLinkFunc) {\n        this.getEditLink = editLinkFunc;\n    }\n\n}\n\nexport class SingletonConfiguration  extends EntitySetConfiguration {\n    constructor(builder, entityType, name) {\n        super(builder, entityType, name);\n        this.kind = EntitySetKind.Singleton;\n    }\n}\n\n/**\n * @classdesc Represents the OData model builder of an HTTP application\n * @property {string} serviceRoot - Gets or sets the service root URI\n * @class\n */\nexport class ODataModelBuilder extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[entityTypesProperty] = {};\n        this[ignoreEntityTypesProperty] = [];\n        this[entityContainerProperty] = [];\n        this.defaultNamespace = SchemaDefaultNamespace;\n    }\n\n    /**\n     * Gets a registered entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration|*}\n     */\n    getEntity(name) {\n        if (_.isNil(name)) {\n            return;\n        }\n        Args.notString(name, 'Entity type name');\n        return this[entityTypesProperty][name];\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    addEntity(name) {\n        if (!this.hasEntity(name)) {\n            this[entityTypesProperty][name] = new EntityTypeConfiguration(name);\n        }\n        return this.getEntity(name)\n    }\n\n    /**\n     * @param {*} entityType\n     * @param {string} name\n     * @returns SingletonConfiguration|*\n     */\n    addSingleton(entityType, name) {\n        if (!this.hasSingleton(name)) {\n            this[entityContainerProperty].push(new SingletonConfiguration(this, entityType, name));\n        }\n        return this.getSingleton(name);\n    }\n\n    /**\n     * Gets an entity set\n     * @param name\n     * @returns {SingletonConfiguration}\n     */\n    getSingleton(name) {\n        Args.notString(name, 'Singleton Name');\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return re.test(x.name) && x.kind === EntitySetKind.Singleton;\n        });\n    }\n\n    /**\n     * @param {string} name\n     * @returns {SingletonConfiguration|*}\n     */\n    hasSingleton(name) {\n        const findRe = new RegExp(`^${name}$` ,\"ig\");\n        return _.findIndex(this[entityContainerProperty], (x) => {\n            return findRe.test(x.name) && x.kind === EntitySetKind.Singleton;\n        })>=0;\n    }\n\n    /**\n     * Checks if the given entity set exists in entity container\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntitySet(name) {\n        const findRe = new RegExp(`^${name}$` ,\"ig\");\n        return _.findIndex(this[entityContainerProperty], (x) => {\n            return findRe.test(x.name) && x.kind === EntitySetKind.EntitySet;\n        })>=0;\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        if (!this.hasEntitySet(name)) {\n            this[entityContainerProperty].push(new EntitySetConfiguration(this, entityType, name));\n        }\n        return this.getEntitySet(name);\n    }\n\n    /**\n     * Gets an entity set\n     * @param name\n     * @returns {EntitySetConfiguration}\n     */\n    getEntitySet(name) {\n        Args.notString(name, 'EntitySet Name');\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return re.test(x.name) && x.kind === EntitySetKind.EntitySet;\n        });\n    }\n\n    /**\n     * Gets an entity set based on the given entity name\n     * @param {string} entityName\n     * @returns {EntitySetConfiguration}\n     */\n    getEntityTypeEntitySet(entityName) {\n        Args.notString(entityName, 'Entity Name');\n        const re = new RegExp(\"^\" + entityName + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return x.entityType && re.test(x.entityType.name);\n        });\n    }\n\n    /**\n     * Ignores the entity type with the given name\n     * @param {string} name\n     * @returns {ODataModelBuilder}\n     */\n    ignore(name) {\n        const hasEntity = this[ignoreEntityTypesProperty].indexOf(name);\n        if (hasEntity < 0) {\n            this[ignoreEntityTypesProperty].push(name);\n        }\n        return this;\n    }\n\n    /**\n     * Checks if the given entity type exists in entity's collection\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntity(name) {\n        return this[entityTypesProperty].hasOwnProperty(name);\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                const schema = {\n                    namespace:self.defaultNamespace,\n                    entityType:[],\n                    entityContainer: {\n                        \"name\":\"DefaultContainer\",\n                        \"entitySet\":[]\n                    }\n                };\n                //get entity types by excluding ignored entities\n                const keys = _.filter(_.keys(self[entityTypesProperty]), (x)=> {\n                    return self[ignoreEntityTypesProperty].indexOf(x)<0;\n                });\n                //enumerate entity types\n                _.forEach(keys, (key)=> {\n                    schema.entityType.push(self[entityTypesProperty][key]);\n                });\n                //apply entity sets\n                schema.entityContainer.entitySet.push.apply(schema.entityContainer.entitySet, self[entityContainerProperty]);\n\n                return resolve(schema);\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n\n    /**\n     * @param {boolean=} all\n     * @returns {ODataModelBuilder}\n     */\n    clean(all) {\n        delete this[edmProperty];\n        if (typeof all === 'boolean' && all === true) {\n            this[entityTypesProperty] = {};\n            this[ignoreEntityTypesProperty] = [];\n            this[entityContainerProperty] = [];\n        }\n        return this;\n    }\n\n    /**\n     * Creates and returns an XML structure based on the configuration performed using this builder\n     * @returns {Promise<XDocument>}\n     */\n    getEdmDocument() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                return self.getEdm().then((schema)=> {\n                    const doc = new XDocument();\n                    const rootElement = doc.createElement(\"edmx:Edmx\");\n                    rootElement.setAttribute(\"xmlns:edmx\", \"http://docs.oasis-open.org/odata/ns/edmx\");\n                    rootElement.setAttribute(\"Version\",\"4.0\");\n                    doc.appendChild(rootElement);\n\n                    const dataServicesElement = doc.createElement(\"edmx:DataServices\");\n                    const schemaElement = doc.createElement(\"Schema\");\n                    schemaElement.setAttribute(\"xmlns\", \"http://docs.oasis-open.org/odata/ns/edm\");\n                    schemaElement.setAttribute(\"Namespace\", schema.namespace);\n                    const actionElements = [], functionElements = [];\n                    //append edmx:DataServices > Schema\n                    dataServicesElement.appendChild(schemaElement);\n                    _.forEach(schema.entityType,\n                        /**\n                         *\n                         * @param {EntityTypeConfiguration} entityType\n                         */\n                        (entityType) => {\n\n                            //search for bound actions\n                            _.forEach(entityType.actions, function(action) {\n                                const actionElement = doc.createElement(\"Action\");\n                                actionElement.setAttribute(\"Name\", action.name);\n                                actionElement.setAttribute(\"IsBound\", true);\n                                actionElement.setAttribute(\"IsComposable\", true);\n                                _.forEach(action.parameters, function(parameter) {\n                                   const paramElement =  doc.createElement(\"Parameter\");\n                                   paramElement.setAttribute(\"Name\", parameter.name);\n                                   paramElement.setAttribute(\"Type\", parameter.type);\n                                   paramElement.setAttribute(\"Nullable\", _.isBoolean(parameter.nullable) ? parameter.nullable : false);\n                                    //append Action > Parameter\n                                   actionElement.appendChild(paramElement)\n                                });\n                                actionElements.push(actionElement);\n                            });\n\n                            //search for bound functions\n                            _.forEach(entityType.functions, function(func) {\n                                const functionElement = doc.createElement(\"Function\");\n                                functionElement.setAttribute(\"Name\", func.name);\n                                functionElement.setAttribute(\"IsBound\", true);\n                                functionElement.setAttribute(\"IsComposable\", true);\n                                _.forEach(func.parameters, function(parameter) {\n                                    const paramElement =  doc.createElement(\"Parameter\");\n                                    paramElement.setAttribute(\"Name\", parameter.name);\n                                    paramElement.setAttribute(\"Type\", parameter.type);\n                                    paramElement.setAttribute(\"Nullable\", _.isBoolean(parameter.nullable) ? parameter.nullable : false);\n                                    //append Function > Parameter\n                                    functionElement.appendChild(paramElement)\n                                });\n                                const returnTypeElement =  doc.createElement(\"ReturnType\");\n                                let returnType = func.returnType;\n                                if (func.returnCollectionType) {\n                                    returnType = func.returnCollectionType;\n                                    returnTypeElement.setAttribute(\"Type\", `Collection(${returnType})`);\n                                }\n                                else {\n                                    returnTypeElement.setAttribute(\"Type\", returnType);\n                                }\n                                returnTypeElement.setAttribute(\"Nullable\", true);\n                                functionElement.appendChild(returnTypeElement);\n                                functionElements.push(functionElement);\n                            });\n\n                            //create element Schema > EntityType\n                            const entityTypeElement = doc.createElement(\"EntityType\");\n                            entityTypeElement.setAttribute(\"Name\", entityType.name);\n                            entityTypeElement.setAttribute(\"OpenType\", true);\n                            if (entityType.baseType) {\n                                entityTypeElement.setAttribute(\"BaseType\", entityType.baseType);\n                            }\n\n                            if (entityType.key && entityType.key.propertyRef) {\n                                const keyElement = doc.createElement('Key');\n                                _.forEach(entityType.key.propertyRef, (key)=> {\n                                    const keyRefElement = doc.createElement('PropertyRef');\n                                    keyRefElement.setAttribute(\"Name\",key.name);\n                                    keyElement.appendChild(keyRefElement);\n                                });\n                                entityTypeElement.appendChild(keyElement);\n                            }\n                            //enumerate properties\n                            _.forEach(entityType.property, function(x) {\n                                const propertyElement = doc.createElement('Property');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (_.isBoolean(x.nullable) && (x.nullable===false)) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //enumerate navigation properties\n                            _.forEach(entityType.navigationProperty, function(x) {\n                                const propertyElement = doc.createElement('NavigationProperty');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (!x.nullable) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //append Schema > EntityType\n                            schemaElement.appendChild(entityTypeElement);\n                        });\n\n                    //append action elements to schema\n                    _.forEach(actionElements, function(actionElement) {\n                       schemaElement.appendChild(actionElement);\n                    });\n                    //append function elements to schema\n                    _.forEach(functionElements, function(functionElement) {\n                        schemaElement.appendChild(functionElement);\n                    });\n\n\n\n                    //create Schema > EntityContainer\n                    const entityContainerElement = doc.createElement(\"EntityContainer\");\n                    entityContainerElement.setAttribute(\"Name\", schema.entityContainer.name || \"DefaultContainer\");\n\n                    _.forEach(schema.entityContainer.entitySet,\n                        /**\n                         * @param {EntitySetConfiguration} child\n                         */\n                        (child) => {\n                            const childElement = doc.createElement(child.kind);\n                            childElement.setAttribute(\"Name\", child.name);\n                            if ((child.kind === EntitySetKind.EntitySet) || (child.kind === EntitySetKind.Singleton)) {\n                                childElement.setAttribute(\"EntityType\", child.entityType.name);\n                            }\n                            const childAnnotation = doc.createElement(\"Annotation\");\n                            childAnnotation.setAttribute(\"Term\", \"Org.OData.Core.V1.ResourcePath\");\n                            childAnnotation.setAttribute(\"String\", child.getUrl());\n                            childElement.appendChild(childAnnotation);\n                            //append Schema > EntityContainer > (EntitySet, Singleton, FunctionImport)\n                            entityContainerElement.appendChild(childElement);\n                        });\n\n                    //append Schema > EntityContainer\n                    schemaElement.appendChild(entityContainerElement);\n\n                    //append edmx:Edmx > edmx:DataServices\n                    rootElement.appendChild(dataServicesElement);\n                    return resolve(doc);\n                }).catch((err)=> {\n                    return reject(err);\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n\n    }\n\n    /**\n     * @param {Function} contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n\n    hasJsonFormatter(jsonFormatterFunc) {\n        this.jsonFormatter = jsonFormatterFunc;\n    }\n\n\n    /**\n     * @param {EntitySetConfiguration} entitySet\n     * @param {*} instance\n     * @param {*=} options\n     * @returns *\n     */\n    jsonFormatter(context, entitySet, instance, options) {\n        const self = this;\n        const defaults = _.assign({\n            addContextAttribute:true,\n            addCountAttribute:false\n        }, options);\n        const entityProperty = entitySet.getEntityTypePropertyList();\n        const entityNavigationProperty = entitySet.getEntityTypeNavigationPropertyList();\n        const ignoredProperty = entitySet.getEntityTypeIgnoredPropertyList();\n        const singleJsonFormatter = function(instance) {\n            const result = {};\n            _.forEach(_.keys(instance), function(key) {\n                if (ignoredProperty.indexOf(key)<0) {\n                    if (entityProperty.hasOwnProperty(key)) {\n                        const p = entityProperty[key];\n                        if (p.type === EdmType.EdmBoolean) {\n                            result[key] = LangUtils.parseBoolean(instance[key]);\n                        }\n                        else if (p.type === EdmType.EdmDate) {\n                            if (!_.isNil(instance[key])) {\n                                result[key] = moment(instance[key]).format('YYYY-MM-DD');\n                            }\n                        }\n                        else if (p.type === EdmType.EdmDateTimeOffset) {\n                            if (!_.isNil(instance[key])) {\n                                result[key] = moment(instance[key]).format('YYYY-MM-DDTHH:mm:ssZ');\n                            }\n                        }\n                        else {\n                            result[key] = instance[key];\n                        }\n                    }\n                    else if (entityNavigationProperty.hasOwnProperty(key)) {\n                        if (_.isObject(instance[key])) {\n                            const match = /^Collection\\((.*?)\\)$/.exec(entityNavigationProperty[key].type);\n                            const entityType = match ? match[1] : entityNavigationProperty[key].type;\n                            const entitySet = self.getEntityTypeEntitySet(/\\.?(\\w+)$/.exec(entityType)[1]);\n                            result[key] = self.jsonFormatter(context, entitySet, instance[key], {\n                                addContextAttribute:false\n                            });\n                        }\n                    }\n                    else {\n                        result[key] = instance[key];\n                    }\n                }\n            });\n            return result;\n        };\n        let value;\n        const result = {};\n        if (defaults.addContextAttribute) {\n            _.assign(result, {\n                \"@odata.context\":self.getContextLink(context).concat(\"$metadata#\", entitySet.name)\n            });\n        }\n        if (_.isArray(instance)) {\n            value = _.map(instance, function(x) {\n                return singleJsonFormatter(x);\n            });\n            _.assign(result, {\n                \"value\":value\n            });\n        }\n        else if (_.isObject(instance)) {\n            value = singleJsonFormatter(instance);\n            if (defaults.addContextAttribute) {\n                _.assign(result, {\n                    \"@odata.context\":self.getContextLink(context).concat(\"$metadata#\", entitySet.name, \"/$entity\")\n                });\n            }\n            _.assign(result, value);\n        }\n        return result;\n    }\n\n}\n\nclass EntityDataContext extends DataContext {\n    /**\n     * @param {DataConfigurationStrategy=} configuration\n     */\n    constructor(configuration) {\n        super();\n        this.getConfiguration = ()=> configuration;\n    }\n\n    model(name) {\n        if (this.getConfiguration().dataTypes.hasOwnProperty(name)) {\n            return;\n        }\n        const definition = this.getConfiguration().model(name);\n        if (_.isNil(definition)) {\n            return;\n        }\n        return new DataModel(definition, this);\n    }\n\n}\n\n/**\n * @class\n * @augments ODataModelBuilder\n */\nexport class ODataConventionModelBuilder extends ODataModelBuilder {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * Automatically registers an entity type from the given model\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        const self = this;\n        const superAddEntitySet = super.addEntitySet;\n        /**\n         * @type {EntityTypeConfiguration}\n         */\n        if (this.hasEntitySet(name)) {\n            return this.getEntitySet(name);\n        }\n        /**\n         * @type {DataConfigurationStrategy|*}\n         */\n        const strategy = self.getConfiguration().getStrategy(DataConfigurationStrategy);\n        if (strategy) {\n            let modelEntitySet = superAddEntitySet.bind(self)(entityType, name);\n            /**\n             * @type {EntityTypeConfiguration}\n             */\n            let modelEntityType = modelEntitySet.entityType;\n            /**\n             * @type {DataModel}\n             */\n            const definition = strategy.model(entityType);\n            if (definition) {\n                const model = new DataModel(definition, new EntityDataContext(strategy));\n                let inheritedAttributes = [];\n                const primaryKey = _.find(model.attributes, function(x) {\n                    return x.primary;\n                });\n                if (model.inherits) {\n                    //add base entity\n                    self.addEntitySet(model.inherits, pluralize(model.inherits));\n                    //set inheritance\n                    modelEntityType.derivesFrom(model.inherits);\n                    const baseModel = model.base();\n                    if (baseModel) {\n                        inheritedAttributes = baseModel.attributeNames;\n                    }\n                }\n                _.forEach(_.filter(model.attributes, function(x) {\n                    if (x.primary && model.inherits) {\n                        return false;\n                    }\n                    return (x.model === model.name) && (inheritedAttributes.indexOf(x.name)<0);\n                }), function(x) {\n                    const name = x.property || x.name;\n                    const mapping = model.inferMapping(x.name);\n                    if (_.isNil(mapping)) {\n                        //find data type\n                        const dataType = strategy.dataTypes[x.type];\n                        //add property\n                        const edmType = _.isObject(dataType) ? (dataType.hasOwnProperty(\"edmtype\") ? dataType[\"edmtype\"]: \"Edm.\" + x.type) : self.defaultNamespace.concat(\".\",x.type);\n                        modelEntityType.addProperty(name, edmType, x.hasOwnProperty('nullable') ? x.nullable : true);\n                        if (x.primary) {\n                            modelEntityType.hasKey(name, edmType);\n                        }\n                    }\n                    else {\n                        const namespacedType = self.defaultNamespace.concat(\".\",x.type);\n                        //add navigation property\n                        const isNullable = x.hasOwnProperty('nullable') ? x.nullable : true;\n                        modelEntityType.addNavigationProperty(name, namespacedType, x.many ? EdmMultiplicity.Many: (isNullable ? EdmMultiplicity.ZeroOrOne : EdmMultiplicity.One));\n                        //add navigation property entity (if type is not a primitive type)\n                        if (!strategy.dataTypes.hasOwnProperty(x.type)) {\n                            self.addEntitySet(x.type, pluralize(x.type));\n                        }\n                    }\n                });\n                //add link function\n                if (typeof self.getContextLink === 'function') {\n                    modelEntitySet.hasContextLink(function(context) {\n                       return self.getContextLink(context).concat(\"$metadata#\",modelEntitySet.name);\n                    });\n                }\n                //add id link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasIdLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n                //add read link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasReadLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n            }\n            return modelEntitySet;\n        }\n        return superAddEntitySet.bind(self)(entityType, name);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    initialize() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            /**\n             * @type {SchemaLoaderStrategy|DefaultSchemaLoaderStrategy|*}\n             */\n            const schemaLoader = self.getConfiguration().getStrategy(SchemaLoaderStrategy);\n            if (typeof schemaLoader.getModelPath === 'function') {\n                const nativeFsModule = 'fs';\n                const fs = require(nativeFsModule);\n                const modelPath = schemaLoader.getModelPath();\n                if (_.isNil(modelPath)) {\n                    return resolve();\n                }\n                return fs.readdir(modelPath, (err, files) => {\n                    try {\n                        if (err) {\n                            return reject(err);\n                        }\n                        const models = _.map( _.filter(files, function(x) {\n                            return /\\.json$/.test(x);\n                        }), (x) => {\n                            return /(.*?)\\.json$/.exec(x)[1];\n                        });\n                        _.forEach(models, (x)=> {\n                            if (!_.isNil(x)) {\n                                self.addEntitySet(x, pluralize(x));\n                            }\n                        });\n                        return resolve();\n                    }\n                    catch(err) {\n                        return reject(err);\n                    }\n                });\n            }\n            return resolve();\n        });\n\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this, superGetEdm = super.getEdm;\n        return Q.promise((resolve, reject) => {\n            try{\n                if (_.isObject(self[edmProperty])) {\n                    return resolve(self[edmProperty]);\n                }\n                return self.initialize().then(()=> {\n                    return superGetEdm.bind(self)().then((result) => {\n                        self[edmProperty] = result;\n                        return resolve(self[edmProperty]);\n                    });\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n}"]}