{"version":3,"sources":["odata.es6"],"names":["_","ConfigurationStrategy","Args","DataConfigurationStrategy","SchemaLoaderStrategy","DataModel","DataContext","XDocument","Q","pluralize","AbstractMethodError","moment","LangUtils","nameProperty","Symbol","entityTypesProperty","entityContainerProperty","ignoreEntityTypesProperty","builderProperty","entityTypeProperty","edmProperty","SchemaDefaultNamespace","EdmType","EdmBinary","EdmBoolean","EdmByte","EdmDate","EdmDateTimeOffset","EdmDouble","EdmDecimal","EdmDuration","EdmGuid","EdmInt16","EdmInt32","EdmInt64","EdmSByte","EdmSingle","EdmStream","EdmString","EdmTimeOfDay","EdmMultiplicity","Many","One","Unknown","ZeroOrOne","EntitySetKind","EntitySet","Singleton","FunctionImport","EntityTypeConfiguration","name","notString","property","ignoredProperty","navigationProperty","baseType","type","nullable","exists","findIndex","x","p","isBoolean","push","assign","multiplicity","hasProperty","splice","key","isArray","propertyRef","hasKeyIndex","addProperty","EntitySetConfiguration","builder","entityType","check","ODataModelBuilder","TypeError","hasEntity","addEntity","kind","url","result","forEach","baseEntityType","getBuilder","getEntity","deep","re","RegExp","find","test","deep_","concat","apply","contextLinkFunc","getContextLink","idLinkFunc","getIdLink","readLinkFunc","getReadLink","editLinkFunc","getEditLink","config","isNil","hasEntitySet","getEntitySet","entityName","indexOf","hasOwnProperty","self","promise","resolve","reject","schema","namespace","entityContainer","keys","filter","entitySet","err","all","getEdm","then","doc","rootElement","createElement","setAttribute","appendChild","dataServicesElement","schemaElement","entityTypeElement","keyElement","keyRefElement","propertyElement","entityContainerElement","child","childElement","childAnnotation","getUrl","jsonFormatterFunc","jsonFormatter","context","instance","options","defaults","addContextAttribute","addCountAttribute","entityProperty","getEntityTypePropertyList","entityNavigationProperty","getEntityTypeNavigationPropertyList","getEntityTypeIgnoredPropertyList","singleJsonFormatter","parseBoolean","format","isObject","match","exec","getEntityTypeEntitySet","value","map","EntityDataContext","configuration","getConfiguration","dataTypes","definition","model","ODataConventionModelBuilder","superAddEntitySet","strategy","getStrategy","modelEntitySet","bind","modelEntityType","inheritedAttributes","primaryKey","attributes","primary","inherits","addEntitySet","derivesFrom","baseModel","base","attributeNames","mapping","inferMapping","dataType","edmType","hasKey","namespacedType","isNullable","addNavigationProperty","many","hasContextLink","hasIdLink","hasReadLink","schemaLoader","getModelPath","nativeFsModule","fs","require","modelPath","readdir","files","models","superGetEdm","initialize"],"mappings":"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","file":"odata.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport _ from 'lodash';\nimport {ConfigurationStrategy} from '@themost/common/config';\nimport {Args} from \"@themost/common/utils\";\nimport {DataConfigurationStrategy, SchemaLoaderStrategy} from \"./config\";\nimport {DataModel} from \"./model\";\nimport {DataContext} from \"./types\";\nimport {XDocument} from 'most-xml';\nimport Q from 'q';\nconst nameProperty = Symbol('name');\nconst entityTypesProperty = Symbol('entityTypes');\nconst entityContainerProperty = Symbol('entityContainer');\nconst ignoreEntityTypesProperty = Symbol('ignoredEntityTypes');\nconst builderProperty = Symbol('builder');\nconst entityTypeProperty = Symbol('entityType');\nconst edmProperty = Symbol('edm');\nimport pluralize from 'pluralize';\nimport {AbstractMethodError} from \"@themost/common/errors\";\nimport moment from 'moment';\nimport {LangUtils} from \"../common/utils\";\n\nconst SchemaDefaultNamespace = \"Edm.Models\";\n\n/**\n * @class\n * @abstract\n */\nexport class EdmType {\n\n}\n\nEdmType.EdmBinary = \"Edm.Binary\";\nEdmType.EdmBoolean=\"Edm.Boolean\";\nEdmType.EdmByte=\"Edm.Byte\";\nEdmType.EdmDate=\"Edm.Date\";\nEdmType.EdmDateTimeOffset=\"Edm.DateTimeOffset\";\nEdmType.EdmDouble=\"Edm.Double\";\nEdmType.EdmDecimal=\"Edm.Decimal\";\nEdmType.EdmDuration=\"Edm.Duration\";\nEdmType.EdmGuid=\"Edm.Guid\";\nEdmType.EdmInt16=\"Edm.Int16\";\nEdmType.EdmInt32=\"Edm.Int32\";\nEdmType.EdmInt64=\"Edm.Int64\";\nEdmType.EdmSByte=\"Edm.SByte\";\nEdmType.EdmSingle=\"Edm.Single\";\nEdmType.EdmStream=\"Edm.Stream\";\nEdmType.EdmString=\"Edm.String\";\nEdmType.EdmTimeOfDay=\"Edm.TimeOfDay\";\n\n/**\n * @enum\n */\nexport class EdmMultiplicity {\n\n}\nEdmMultiplicity.Many = \"Many\";\nEdmMultiplicity.One = \"One\";\nEdmMultiplicity.Unknown = \"Unknown\";\nEdmMultiplicity.ZeroOrOne = \"ZeroOrOne\";\n\n/**\n * @enum\n */\nexport class EntitySetKind {\n\n}\nEntitySetKind.EntitySet = \"EntitySet\";\nEntitySetKind.Singleton = \"Singleton\";\nEntitySetKind.FunctionImport = \"FunctionImport\";\n\n\n/**\n * @class\n */\nexport class EntityTypeConfiguration {\n    /**\n     *\n     * @param {string} name\n     */\n    constructor(name) {\n        Args.notString(name, 'Entity type name');\n        this[nameProperty] = name;\n        this.property = [];\n        this.ignoredProperty = [];\n        this.navigationProperty = [];\n    }\n\n    get name() {\n        return this[nameProperty];\n    }\n\n    /**\n     * @param {string} name\n     */\n    derivesFrom(name) {\n        Args.notString(name,\"Enity type name\");\n        this.baseType = name;\n    }\n\n    /**\n     * Adds a new EDM primitive property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {boolean=} nullable\n     * @returns EntityTypeConfiguration\n     */\n    addProperty(name, type, nullable) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (exists<0) {\n            const p = {\n                \"name\":name,\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            };\n            this.property.push(p);\n        }\n        else {\n            _.assign(this.property[exists], {\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Adds a new EDM navigation property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {string} multiplicity\n     * @returns EntityTypeConfiguration\n     */\n    addNavigationProperty(name, type, multiplicity) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.navigationProperty, (x)=> {\n            return x.name === name;\n        });\n\n        const p = {\n            \"name\":name,\n            \"type\": (multiplicity===\"Many\") ? `Collection(${type})` : type\n        };\n        if ((multiplicity===EdmMultiplicity.ZeroOrOne) || (multiplicity===EdmMultiplicity.Many)) {\n            p.nullable = true;\n        }\n\n        if (exists<0) {\n            this.navigationProperty.push(p);\n        }\n        else {\n            _.assign(this.navigationProperty[exists], p);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the navigation property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeNavigationProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Ignores a property from the entity\n     * @param name\n     * @returns {EntityTypeConfiguration}\n     */\n    ignore(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.ignoredProperty, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            return this;\n        }\n        this.ignoredProperty.push(name);\n\n    }\n\n    /**\n     * Removes the property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the property from the entity keys collection.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeKey(name) {\n        Args.notString(name,\"Key name\");\n        if (this.key && _.isArray(this.key.propertyRef)) {\n            const hasKeyIndex = _.findIndex(this.key.propertyRef, (x)=> {\n                return x.name === name;\n            });\n            if (hasKeyIndex<0) {\n                return this;\n            }\n            this.key.propertyRef.splice(hasKeyIndex, 1);\n            return this;\n        }\n    }\n\n    /**\n     * Configures the key property(s) for this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @returns {EntityTypeConfiguration}\n     */\n    hasKey(name, type) {\n        this.addProperty(name, type, false);\n        this.key = {\n            propertyRef: [\n                {\n                    \"name\": name\n                }\n            ]\n        };\n        return this;\n    }\n\n}\n\n/**\n *\n */\nexport class EntitySetConfiguration {\n    /**\n     * @param {ODataModelBuilder} builder\n     * @param {string} entityType\n     * @param {string} name\n     */\n    constructor(builder, entityType, name) {\n        Args.check(builder instanceof ODataModelBuilder, new TypeError('Invalid argument. Configuration builder must be an instance of ODataModelBuilder class'));\n        Args.notString(entityType, 'Entity Type');\n        Args.notString(name, 'EntitySet Name');\n        this[builderProperty] = builder;\n        this[entityTypeProperty] = entityType;\n        //ensure entity type\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        this.name = name;\n        this.kind = EntitySetKind.EntitySet;\n        //use the given name as entity set URL by default\n        this.url = name;\n    }\n\n    hasUrl(url) {\n        Args.notString(url, 'Entity Resource Path');\n        this.url = url;\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * @returns {ODataModelBuilder}\n     */\n    getBuilder() {\n        return this[builderProperty];\n    }\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypePropertyList() {\n        const result = {};\n        _.forEach(this.entityType.property, function(x) {\n           result[x.name] = x;\n        });\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            _.forEach(baseEntityType.property, function(x) {\n                result[x.name] = x;\n            });\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n\n    /**\n     * @param {string} name\n     * @param  {boolean=} deep\n     * @returns {*}\n     */\n    getEntityTypeProperty(name, deep) {\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        let p = _.find(this.entityType.property, function(x) {\n            return re.test(x.name);\n        });\n        if (p) {\n            return p;\n        }\n        const deep_ = _.isBoolean(deep) ? deep : true;\n        if (deep_) {\n            let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n            while (baseEntityType) {\n                p = _.find(baseEntityType.property, function(x) {\n                    return re.test(x.name);\n                });\n                if (p) {\n                    return p;\n                }\n                baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n            }\n        }\n    }\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypeIgnoredPropertyList() {\n        const result = [].concat(this.entityType.ignoredProperty);\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            result.push.apply(result, baseEntityType.ignoredProperty);\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n    /**\n     * @param {string} name\n     * @param  {boolean=} deep\n     * @returns {*}\n     */\n    getEntityTypeNavigationProperty(name, deep) {\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        let p = _.find(this.entityType.navigationProperty, function(x) {\n            return re.test(x.name);\n        });\n        if (p) {\n            return p;\n        }\n        const deep_ = _.isBoolean(deep) ? deep : true;\n        if (deep_) {\n            let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n            while (baseEntityType) {\n                p = _.find(baseEntityType.navigationProperty, function(x) {\n                    return re.test(x.name);\n                });\n                if (p) {\n                    return p;\n                }\n                baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n            }\n        }\n    }\n\n\n\n    /**\n     * @returns {*}\n     */\n    getEntityTypeNavigationPropertyList() {\n        const result = [];\n        _.forEach(this.entityType.navigationProperty, function(x) {\n            result[x.name] = x;\n        });\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            _.forEach(baseEntityType.navigationProperty, function(x) {\n                result[x.name] = x;\n            });\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n\n    /**\n     * @returns {EntityTypeConfiguration}\n     */\n    get entityType() {\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            return this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        return this[builderProperty].getEntity(this[entityTypeProperty]);\n    }\n\n    /**\n     * @param contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} idLinkFunc\n     */\n    hasIdLink(idLinkFunc) {\n        this.getIdLink = idLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} readLinkFunc\n     */\n    hasReadLink(readLinkFunc) {\n        this.getReadLink = readLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} editLinkFunc\n     */\n    hasEditLink(editLinkFunc) {\n        this.getEditLink = editLinkFunc;\n    }\n\n}\n\n/**\n * @classdesc Represents the OData model builder of an HTTP application\n * @property {string} serviceRoot - Gets or sets the service root URI\n * @class\n */\nexport class ODataModelBuilder extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[entityTypesProperty] = {};\n        this[ignoreEntityTypesProperty] = [];\n        this[entityContainerProperty] = [];\n    }\n\n    /**\n     * Gets a registered entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration|*}\n     */\n    getEntity(name) {\n        if (_.isNil(name)) {\n            return;\n        }\n        Args.notString(name, 'Entity type name');\n        return this[entityTypesProperty][name];\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    addEntity(name) {\n        if (!this.hasEntity(name)) {\n            this[entityTypesProperty][name] = new EntityTypeConfiguration(name);\n        }\n        return this.getEntity(name)\n    }\n\n    /**\n     * Checks if the given entity set exists in entity container\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntitySet(name) {\n        return _.findIndex(this[entityContainerProperty], (x) => {\n            return x.name === name;\n        })>=0;\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        if (!this.hasEntitySet(name)) {\n            this[entityContainerProperty].push(new EntitySetConfiguration(this, entityType, name));\n        }\n        return this.getEntitySet(name);\n    }\n\n    /**\n     * Gets an entity set\n     * @param name\n     * @returns {EntitySetConfiguration}\n     */\n    getEntitySet(name) {\n        Args.notString(name, 'EntitySet Name');\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return re.test(x.name);\n        });\n    }\n\n    /**\n     * Gets an entity set based on the given entity name\n     * @param {string} entityName\n     * @returns {EntitySetConfiguration}\n     */\n    getEntityTypeEntitySet(entityName) {\n        Args.notString(entityName, 'Entity Name');\n        const re = new RegExp(\"^\" + entityName + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return x.entityType && re.test(x.entityType.name);\n        });\n    }\n\n    /**\n     * Ignores the entity type with the given name\n     * @param {string} name\n     * @returns {ODataModelBuilder}\n     */\n    ignore(name) {\n        const hasEntity = this[ignoreEntityTypesProperty].indexOf(name);\n        if (hasEntity < 0) {\n            this[ignoreEntityTypesProperty].push(name);\n        }\n        return this;\n    }\n\n    /**\n     * Checks if the given entity type exists in entity's collection\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntity(name) {\n        return this[entityTypesProperty].hasOwnProperty(name);\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                const schema = {\n                    namespace:SchemaDefaultNamespace,\n                    entityType:[],\n                    entityContainer: {\n                        \"name\":\"DefaultContainer\",\n                        \"entitySet\":[]\n                    }\n                };\n                //get entity types by excluding ignored entities\n                const keys = _.filter(_.keys(self[entityTypesProperty]), (x)=> {\n                    return self[ignoreEntityTypesProperty].indexOf(x)<0;\n                });\n                //enumerate entity types\n                _.forEach(keys, (key)=> {\n                    schema.entityType.push(self[entityTypesProperty][key]);\n                });\n                //enumerate entity sets\n                schema.entityContainer.entitySet.push.apply(schema.entityContainer.entitySet, self[entityContainerProperty]);\n\n                return resolve(schema);\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n\n    /**\n     * @param {boolean=} all\n     * @returns {ODataModelBuilder}\n     */\n    clean(all) {\n        delete this[edmProperty];\n        if (typeof all === 'boolean' && all === true) {\n            this[entityTypesProperty] = {};\n            this[ignoreEntityTypesProperty] = [];\n            this[entityContainerProperty] = [];\n        }\n        return this;\n    }\n\n    /**\n     * Creates and returns an XML structure based on the configuration performed using this builder\n     * @returns {Promise<XDocument>}\n     */\n    getEdmDocument() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                return self.getEdm().then((schema)=> {\n                    const doc = new XDocument();\n                    const rootElement = doc.createElement(\"edmx:Edmx\");\n                    rootElement.setAttribute(\"xmlns:edmx\", \"http://docs.oasis-open.org/odata/ns/edmx\");\n                    rootElement.setAttribute(\"Version\",\"4.0\");\n                    doc.appendChild(rootElement);\n\n                    const dataServicesElement = doc.createElement(\"edmx:DataServices\");\n                    const schemaElement = doc.createElement(\"Schema\");\n                    schemaElement.setAttribute(\"xmlns\", \"http://docs.oasis-open.org/odata/ns/edm\");\n                    schemaElement.setAttribute(\"Namespace\", schema.namespace);\n                    //schemaElement.setAttribute(\"Namespace\", \"Most.Data.Models\");\n\n                    //append edmx:DataServices > Schema\n                    dataServicesElement.appendChild(schemaElement);\n                    _.forEach(schema.entityType,\n                        /**\n                         *\n                         * @param {EntityTypeConfiguration} entityType\n                         */\n                        (entityType) => {\n\n                            //create element Schema > EntityType\n                            const entityTypeElement = doc.createElement(\"EntityType\");\n                            entityTypeElement.setAttribute(\"Name\", entityType.name);\n                            entityTypeElement.setAttribute(\"OpenType\", true);\n                            if (entityType.baseType) {\n                                entityTypeElement.setAttribute(\"BaseType\", schema.namespace.concat(\".\", entityType.baseType));\n                            }\n\n                            if (entityType.key && entityType.key.propertyRef) {\n                                const keyElement = doc.createElement('Key');\n                                _.forEach(entityType.key.propertyRef, (key)=> {\n                                    const keyRefElement = doc.createElement('PropertyRef');\n                                    keyRefElement.setAttribute(\"Name\",key.name);\n                                    keyElement.appendChild(keyRefElement);\n                                });\n                                entityTypeElement.appendChild(keyElement);\n                            }\n                            //enumerate properties\n                            _.forEach(entityType.property, function(x) {\n                                const propertyElement = doc.createElement('Property');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (_.isBoolean(x.nullable) && (x.nullable===false)) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //enumerate navigation properties\n                            _.forEach(entityType.navigationProperty, function(x) {\n                                const propertyElement = doc.createElement('NavigationProperty');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (!x.nullable) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //append Schema > EntityType\n                            schemaElement.appendChild(entityTypeElement);\n                        });\n\n                    //create Schema > EntityContainer\n                    const entityContainerElement = doc.createElement(\"EntityContainer\");\n                    entityContainerElement.setAttribute(\"Name\", schema.entityContainer.name || \"DefaultContainer\");\n\n                    _.forEach(schema.entityContainer.entitySet,\n                        /**\n                         * @param {EntitySetConfiguration} child\n                         */\n                        (child) => {\n                            const childElement = doc.createElement(child.kind);\n                            childElement.setAttribute(\"Name\", child.name);\n                            if ((child.kind === EntitySetKind.EntitySet) || (child.kind === EntitySetKind.Singleton)) {\n                                childElement.setAttribute(\"EntityType\", schema.namespace.concat(\".\", child.entityType.name));\n                            }\n                            const childAnnotation = doc.createElement(\"Annotation\");\n                            childAnnotation.setAttribute(\"Term\", \"Org.OData.Core.V1.ResourcePath\");\n                            childAnnotation.setAttribute(\"String\", child.getUrl());\n                            childElement.appendChild(childAnnotation);\n                            //append Schema > EntityContainer > (EntitySet, Singleton, FunctionImport)\n                            entityContainerElement.appendChild(childElement);\n                        });\n\n                    //append Schema > EntityContainer\n                    schemaElement.appendChild(entityContainerElement);\n\n                    //append edmx:Edmx > edmx:DataServices\n                    rootElement.appendChild(dataServicesElement);\n                    return resolve(doc);\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n\n    }\n\n    /**\n     * @param {Function} contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n\n    hasJsonFormatter(jsonFormatterFunc) {\n        this.jsonFormatter = jsonFormatterFunc;\n    }\n\n\n    /**\n     * @param {EntitySetConfiguration} entitySet\n     * @param {*} instance\n     * @param {*=} options\n     * @returns *\n     */\n    jsonFormatter(context, entitySet, instance, options) {\n        const self = this;\n        const defaults = _.assign({\n            addContextAttribute:true,\n            addCountAttribute:false\n        }, options);\n        const entityProperty = entitySet.getEntityTypePropertyList();\n        const entityNavigationProperty = entitySet.getEntityTypeNavigationPropertyList();\n        const ignoredProperty = entitySet.getEntityTypeIgnoredPropertyList();\n        const singleJsonFormatter = function(instance) {\n            const result = {};\n            _.forEach(_.keys(instance), function(key) {\n                if (ignoredProperty.indexOf(key)<0) {\n                    if (entityProperty.hasOwnProperty(key)) {\n                        const p = entityProperty[key];\n                        if (p.type === EdmType.EdmBoolean) {\n                            result[key] = LangUtils.parseBoolean(instance[key]);\n                        }\n                        else if (p.type === EdmType.EdmDate) {\n                            if (!_.isNil(instance[key])) {\n                                result[key] = moment(instance[key]).format('YYYY-MM-DD');\n                            }\n                        }\n                        else if (p.type === EdmType.EdmDateTimeOffset) {\n                            if (!_.isNil(instance[key])) {\n                                result[key] = moment(instance[key]).format('YYYY-MM-DDTHH:mm:ssZ');\n                            }\n                        }\n                        else {\n                            result[key] = instance[key];\n                        }\n                    }\n                    else if (entityNavigationProperty.hasOwnProperty(key)) {\n                        if (_.isObject(instance[key])) {\n                            const match = /^Collection\\((.*?)\\)$/.exec(entityNavigationProperty[key].type);\n                            const entityType = match ? match[1] : entityNavigationProperty[key].type;\n                            const entitySet = self.getEntityTypeEntitySet(/\\.?(\\w+)$/.exec(entityType)[1]);\n                            result[key] = self.jsonFormatter(context, entitySet, instance[key], {\n                                addContextAttribute:false\n                            });\n                        }\n                    }\n                    else {\n                        result[key] = instance[key];\n                    }\n                }\n            });\n            return result;\n        };\n        let value;\n        const result = {};\n        if (defaults.addContextAttribute) {\n            _.assign(result, {\n                \"@odata.context\":self.getContextLink(context).concat(\"$metadata#\", entitySet.name)\n            });\n        }\n        if (_.isArray(instance)) {\n            value = _.map(instance, function(x) {\n                return singleJsonFormatter(x);\n            });\n            _.assign(result, {\n                \"value\":value\n            });\n        }\n        else if (_.isObject(instance)) {\n            value = singleJsonFormatter(instance);\n            if (defaults.addContextAttribute) {\n                _.assign(result, {\n                    \"@odata.context\":self.getContextLink(context).concat(\"$metadata#\", entitySet.name, \"/$entity\")\n                });\n            }\n            _.assign(result, value);\n        }\n        return result;\n    }\n\n}\n\nclass EntityDataContext extends DataContext {\n    /**\n     * @param {DataConfigurationStrategy=} configuration\n     */\n    constructor(configuration) {\n        super();\n        this.getConfiguration = ()=> configuration;\n    }\n\n    model(name) {\n        if (this.getConfiguration().dataTypes.hasOwnProperty(name)) {\n            return;\n        }\n        const definition = this.getConfiguration().model(name);\n        if (_.isNil(definition)) {\n            return;\n        }\n        return new DataModel(definition, this);\n    }\n\n}\n\n/**\n * @class\n * @augments ODataModelBuilder\n */\nexport class ODataConventionModelBuilder extends ODataModelBuilder {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * Automatically registers an entity type from the given model\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        const self = this;\n        const superAddEntitySet = super.addEntitySet;\n        /**\n         * @type {EntityTypeConfiguration}\n         */\n        if (this.hasEntitySet(name)) {\n            return this.getEntitySet(name);\n        }\n        /**\n         * @type {DataConfigurationStrategy|*}\n         */\n        const strategy = self.getConfiguration().getStrategy(DataConfigurationStrategy);\n        if (strategy) {\n            let modelEntitySet = superAddEntitySet.bind(self)(entityType, name);\n            /**\n             * @type {EntityTypeConfiguration}\n             */\n            let modelEntityType = modelEntitySet.entityType;\n            /**\n             * @type {DataModel}\n             */\n            const definition = strategy.model(entityType);\n            if (definition) {\n                const model = new DataModel(definition, new EntityDataContext(strategy));\n                let inheritedAttributes = [];\n                const primaryKey = _.find(model.attributes, function(x) {\n                    return x.primary;\n                });\n                if (model.inherits) {\n                    //add base entity\n                    self.addEntitySet(model.inherits, pluralize(model.inherits));\n                    //set inheritance\n                    modelEntityType.derivesFrom(model.inherits);\n                    const baseModel = model.base();\n                    if (baseModel) {\n                        inheritedAttributes = baseModel.attributeNames;\n                    }\n                }\n                _.forEach(_.filter(model.attributes, function(x) {\n                    if (x.primary && model.inherits) {\n                        return false;\n                    }\n                    return (x.model === model.name) && (inheritedAttributes.indexOf(x.name)<0);\n                }), function(x) {\n                    const name = x.property || x.name;\n                    const mapping = model.inferMapping(x.name);\n                    if (_.isNil(mapping)) {\n                        //find data type\n                        const dataType = strategy.dataTypes[x.type];\n                        //add property\n                        const edmType = _.isObject(dataType) ? (dataType.hasOwnProperty(\"edmtype\") ? dataType[\"edmtype\"]: \"Edm.\" + x.type) : SchemaDefaultNamespace.concat(\".\",x.type);\n                        modelEntityType.addProperty(name, edmType, x.hasOwnProperty('nullable') ? x.nullable : true);\n                        if (x.primary) {\n                            modelEntityType.hasKey(name, edmType);\n                        }\n                    }\n                    else {\n                        const namespacedType = SchemaDefaultNamespace.concat(\".\",x.type);\n                        //add navigation property\n                        const isNullable = x.hasOwnProperty('nullable') ? x.nullable : true;\n                        modelEntityType.addNavigationProperty(name, namespacedType, x.many ? EdmMultiplicity.Many: (isNullable ? EdmMultiplicity.ZeroOrOne : EdmMultiplicity.One));\n                        //add navigation property entity (if type is not a primitive type)\n                        if (!strategy.dataTypes.hasOwnProperty(x.type)) {\n                            self.addEntitySet(x.type, pluralize(x.type));\n                        }\n                    }\n                });\n                //add link function\n                if (typeof self.getContextLink === 'function') {\n                    modelEntitySet.hasContextLink(function(context) {\n                       return self.getContextLink(context).concat(\"$metadata#\",modelEntitySet.name);\n                    });\n                }\n                //add id link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasIdLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n                //add read link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasReadLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n            }\n            return modelEntitySet;\n        }\n        return superAddEntitySet.bind(self)(entityType, name);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    initialize() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            /**\n             * @type {SchemaLoaderStrategy|DefaultSchemaLoaderStrategy|*}\n             */\n            const schemaLoader = self.getConfiguration().getStrategy(SchemaLoaderStrategy);\n            if (typeof schemaLoader.getModelPath === 'function') {\n                const nativeFsModule = 'fs';\n                const fs = require(nativeFsModule);\n                const modelPath = schemaLoader.getModelPath();\n                if (_.isNil(modelPath)) {\n                    return resolve();\n                }\n                return fs.readdir(modelPath, (err, files) => {\n                    try {\n                        if (err) {\n                            return reject(err);\n                        }\n                        const models = _.map( _.filter(files, function(x) {\n                            return /\\.json$/.test(x);\n                        }), (x) => {\n                            return /(.*?)\\.json$/.exec(x)[1];\n                        });\n                        _.forEach(models, (x)=> {\n                            if (!_.isNil(x)) {\n                                self.addEntitySet(x, pluralize(x));\n                            }\n                        });\n                        return resolve();\n                    }\n                    catch(err) {\n                        return reject(err);\n                    }\n                });\n            }\n            return resolve();\n        });\n\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this, superGetEdm = super.getEdm;\n        return Q.promise((resolve, reject) => {\n            try{\n                if (_.isObject(self[edmProperty])) {\n                    return resolve(self[edmProperty]);\n                }\n                return self.initialize().then(()=> {\n                    return superGetEdm.bind(self)().then((result) => {\n                        self[edmProperty] = result;\n                        return resolve(self[edmProperty]);\n                    });\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n}"]}