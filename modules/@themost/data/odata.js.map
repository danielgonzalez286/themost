{"version":3,"sources":["odata.es6"],"names":["_","ConfigurationStrategy","Args","DataConfigurationStrategy","SchemaLoaderStrategy","DataModel","DataContext","XDocument","Q","pluralize","nameProperty","Symbol","entityTypesProperty","entityContainerProperty","ignoreEntityTypesProperty","builderProperty","entityTypeProperty","edmProperty","SchemaDefaultNamespace","EdmType","EdmBinary","EdmBoolean","EdmByte","EdmDate","EdmDateTimeOffset","EdmDouble","EdmDecimal","EdmDuration","EdmGuid","EdmInt16","EdmInt32","EdmInt64","EdmSByte","EdmSingle","EdmStream","EdmString","EdmTimeOfDay","EdmMultiplicity","Many","One","Unknown","ZeroOrOne","EntitySetKind","EntitySet","Singleton","FunctionImport","EntityTypeConfiguration","name","notString","property","ignoredProperty","navigationProperty","baseType","type","nullable","exists","findIndex","x","p","isBoolean","push","assign","multiplicity","hasProperty","splice","key","isArray","propertyRef","hasKeyIndex","addProperty","EntitySetConfiguration","builder","entityType","check","ODataModelBuilder","TypeError","hasEntity","addEntity","kind","url","result","Array","prototype","apply","baseEntityType","getBuilder","getEntity","contextLinkFunc","getContextLink","idLinkFunc","getIdLink","readLinkFunc","getReadLink","editLinkFunc","getEditLink","config","isNil","hasEntitySet","getEntitySet","re","RegExp","find","test","indexOf","hasOwnProperty","self","promise","resolve","reject","schema","namespace","entityContainer","keys","filter","forEach","entitySet","err","all","getEdm","then","doc","rootElement","createElement","setAttribute","appendChild","dataServicesElement","schemaElement","entityTypeElement","concat","keyElement","keyRefElement","propertyElement","entityContainerElement","child","childElement","childAnnotation","getUrl","EntityDataContext","configuration","getConfiguration","dataTypes","definition","model","ODataConventionModelBuilder","superAddEntitySet","strategy","getStrategy","modelEntitySet","bind","modelEntityType","inheritedAttributes","primaryKey","attributes","primary","inherits","addEntitySet","derivesFrom","baseModel","base","attributeNames","mapping","inferMapping","dataType","edmType","isObject","hasKey","namespacedType","addNavigationProperty","many","hasContextLink","context","hasIdLink","instance","hasReadLink","schemaLoader","getModelPath","nativeFsModule","fs","require","modelPath","readdir","files","models","map","exec","superGetEdm","initialize","ODataMediaTypeFormatter"],"mappings":"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","file":"odata.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport _ from 'lodash';\nimport {ConfigurationStrategy} from '@themost/common/config';\nimport {Args} from \"@themost/common/utils\";\nimport {DataConfigurationStrategy, SchemaLoaderStrategy} from \"./config\";\nimport {DataModel} from \"./model\";\nimport {DataContext} from \"./types\";\nimport {XDocument} from 'most-xml';\nimport Q from 'q';\nconst nameProperty = Symbol('name');\nconst entityTypesProperty = Symbol('entityTypes');\nconst entityContainerProperty = Symbol('entityContainer');\nconst ignoreEntityTypesProperty = Symbol('ignoredEntityTypes');\nconst builderProperty = Symbol('builder');\nconst entityTypeProperty = Symbol('entityType');\nconst edmProperty = Symbol('edm');\nimport pluralize from 'pluralize';\n\nconst SchemaDefaultNamespace = \"Edm.Models\";\n\n/**\n * @class\n * @abstract\n */\nexport class EdmType {\n\n}\n\nEdmType.EdmBinary = \"Edm.Binary\";\nEdmType.EdmBoolean=\"Edm.Boolean\";\nEdmType.EdmByte=\"Edm.Byte\";\nEdmType.EdmDate=\"Edm.Date\";\nEdmType.EdmDateTimeOffset=\"Edm.DateTimeOffset\";\nEdmType.EdmDouble=\"Edm.Double\";\nEdmType.EdmDecimal=\"Edm.Decimal\";\nEdmType.EdmDuration=\"Edm.Duration\";\nEdmType.EdmGuid=\"Edm.Guid\";\nEdmType.EdmInt16=\"Edm.Int16\";\nEdmType.EdmInt32=\"Edm.Int32\";\nEdmType.EdmInt64=\"Edm.Int64\";\nEdmType.EdmSByte=\"Edm.SByte\";\nEdmType.EdmSingle=\"Edm.Single\";\nEdmType.EdmStream=\"Edm.Stream\";\nEdmType.EdmString=\"Edm.String\";\nEdmType.EdmTimeOfDay=\"Edm.TimeOfDay\";\n\n/**\n * @enum\n */\nexport class EdmMultiplicity {\n\n}\nEdmMultiplicity.Many = \"Many\";\nEdmMultiplicity.One = \"One\";\nEdmMultiplicity.Unknown = \"Unknown\";\nEdmMultiplicity.ZeroOrOne = \"ZeroOrOne\";\n\n/**\n * @enum\n */\nexport class EntitySetKind {\n\n}\nEntitySetKind.EntitySet = \"EntitySet\";\nEntitySetKind.Singleton = \"Singleton\";\nEntitySetKind.FunctionImport = \"FunctionImport\";\n\n\n/**\n * @class\n */\nexport class EntityTypeConfiguration {\n    /**\n     *\n     * @param {string} name\n     */\n    constructor(name) {\n        Args.notString(name, 'Entity type name');\n        this[nameProperty] = name;\n        this.property = [];\n        this.ignoredProperty = [];\n        this.navigationProperty = [];\n    }\n\n    get name() {\n        return this[nameProperty];\n    }\n\n    /**\n     * @param {string} name\n     */\n    derivesFrom(name) {\n        Args.notString(name,\"Enity type name\");\n        this.baseType = name;\n    }\n\n    /**\n     * Adds a new EDM primitive property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {boolean=} nullable\n     * @returns EntityTypeConfiguration\n     */\n    addProperty(name, type, nullable) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (exists<0) {\n            const p = {\n                \"name\":name,\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            };\n            this.property.push(p);\n        }\n        else {\n            _.assign(this.property[exists], {\n                \"type\":type,\n                \"nullable\":_.isBoolean(nullable) ? nullable : true\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Adds a new EDM navigation property to this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @param {string} multiplicity\n     * @returns EntityTypeConfiguration\n     */\n    addNavigationProperty(name, type, multiplicity) {\n        Args.notString(name,\"Property name\");\n        const exists =_.findIndex(this.navigationProperty, (x)=> {\n            return x.name === name;\n        });\n\n        const p = {\n            \"name\":name,\n            \"type\": (multiplicity===\"Many\") ? `Collection(${type})` : type\n        };\n        if (multiplicity===EdmMultiplicity.ZeroOrOne) {\n            p.nullable = true;\n        }\n\n        if (exists<0) {\n            this.navigationProperty.push(p);\n        }\n        else {\n            _.assign(this.navigationProperty[exists], p);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the navigation property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeNavigationProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Ignores a property from the entity\n     * @param name\n     * @returns {EntityTypeConfiguration}\n     */\n    ignore(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.ignoredProperty, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            return this;\n        }\n        this.ignoredProperty.push(name);\n\n    }\n\n    /**\n     * Removes the property from the entity.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeProperty(name) {\n        Args.notString(name,\"Property name\");\n        const hasProperty =_.findIndex(this.property, (x)=> {\n            return x.name === name;\n        });\n        if (hasProperty>=0) {\n            this.property.splice(hasProperty, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Removes the property from the entity keys collection.\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    removeKey(name) {\n        Args.notString(name,\"Key name\");\n        if (this.key && _.isArray(this.key.propertyRef)) {\n            const hasKeyIndex = _.findIndex(this.key.propertyRef, (x)=> {\n                return x.name === name;\n            });\n            if (hasKeyIndex<0) {\n                return this;\n            }\n            this.key.propertyRef.splice(hasKeyIndex, 1);\n            return this;\n        }\n    }\n\n    /**\n     * Configures the key property(s) for this entity type.\n     * @param {string} name\n     * @param {string} type\n     * @returns {EntityTypeConfiguration}\n     */\n    hasKey(name, type) {\n        this.addProperty(name, type, false);\n        this.key = {\n            propertyRef: [\n                {\n                    \"name\": name\n                }\n            ]\n        };\n        return this;\n    }\n\n}\n\n/**\n *\n */\nexport class EntitySetConfiguration {\n    /**\n     * @param {ODataModelBuilder} builder\n     * @param {string} entityType\n     * @param {string} name\n     */\n    constructor(builder, entityType, name) {\n        Args.check(builder instanceof ODataModelBuilder, new TypeError('Invalid argument. Configuration builder must be an instance of ODataModelBuilder class'));\n        Args.notString(entityType, 'Entity Type');\n        Args.notString(name, 'EntitySet Name');\n        this[builderProperty] = builder;\n        this[entityTypeProperty] = entityType;\n        //ensure entity type\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        this.name = name;\n        this.kind = EntitySetKind.EntitySet;\n        //use the given name as entity set URL by default\n        this.url = name;\n    }\n\n    hasUrl(url) {\n        Args.notString(url, 'Entity Resource Path');\n        this.url = url;\n    }\n\n    getUrl() {\n        return this.url;\n    }\n\n    /**\n     * @returns {ODataModelBuilder}\n     */\n    getBuilder() {\n        return this[builderProperty];\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getEntityTypeProperty() {\n        const result = [];\n        Array.prototype.push.apply(result,this.entityType.property);\n        let baseEntityType = this.getBuilder().getEntity(this.entityType.baseType);\n        while (baseEntityType) {\n            Array.prototype.push.apply(result, baseEntityType.property);\n            baseEntityType = this.getBuilder().getEntity(baseEntityType.baseType);\n        }\n        return result;\n    }\n\n    /**\n     * @returns {EntityTypeConfiguration}\n     */\n    get entityType() {\n        if (!this[builderProperty].hasEntity(this[entityTypeProperty])) {\n            return this[builderProperty].addEntity(this[entityTypeProperty]);\n        }\n        return this[builderProperty].getEntity(this[entityTypeProperty]);\n    }\n\n    /**\n     * @param contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} idLinkFunc\n     */\n    hasIdLink(idLinkFunc) {\n        this.getIdLink = idLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} readLinkFunc\n     */\n    hasReadLink(readLinkFunc) {\n        this.getReadLink = readLinkFunc;\n    }\n\n    /**\n     *\n     * @param {Function} editLinkFunc\n     */\n    hasEditLink(editLinkFunc) {\n        this.getEditLink = editLinkFunc;\n    }\n\n\n}\n\n/**\n * @classdesc Represents the OData model builder of an HTTP application\n * @property {string} serviceRoot - Gets or sets the service root URI\n * @class\n */\nexport class ODataModelBuilder extends ConfigurationStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[entityTypesProperty] = {};\n        this[ignoreEntityTypesProperty] = [];\n        this[entityContainerProperty] = [];\n    }\n\n    /**\n     * Gets a registered entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration|*}\n     */\n    getEntity(name) {\n        if (_.isNil(name)) {\n            return;\n        }\n        Args.notString(name, 'Entity type name');\n        return this[entityTypesProperty][name];\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} name\n     * @returns {EntityTypeConfiguration}\n     */\n    addEntity(name) {\n        if (!this.hasEntity(name)) {\n            this[entityTypesProperty][name] = new EntityTypeConfiguration(name);\n        }\n        return this.getEntity(name)\n    }\n\n    /**\n     * Checks if the given entity set exists in entity container\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntitySet(name) {\n        return _.findIndex(this[entityContainerProperty], (x) => {\n            return x.name === name;\n        })>=0;\n    }\n\n    /**\n     * Registers an entity type\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        if (!this.hasEntitySet(name)) {\n            this[entityContainerProperty].push(new EntitySetConfiguration(this, entityType, name));\n        }\n        return this.getEntitySet(name);\n    }\n\n    /**\n     * Gets an entity set\n     * @param name\n     * @returns {EntitySetConfiguration}\n     */\n    getEntitySet(name) {\n        Args.notString(name, 'EntitySet Name');\n        const re = new RegExp(\"^\" + name + \"$\",\"ig\");\n        return _.find(this[entityContainerProperty], (x)=> {\n            return re.test(x.name);\n        });\n    }\n\n    /**\n     * Ignores the entity type with the given name\n     * @param {string} name\n     * @returns {ODataModelBuilder}\n     */\n    ignore(name) {\n        const hasEntity = this[ignoreEntityTypesProperty].indexOf(name);\n        if (hasEntity < 0) {\n            this[ignoreEntityTypesProperty].push(name);\n        }\n        return this;\n    }\n\n    /**\n     * Checks if the given entity type exists in entity's collection\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasEntity(name) {\n        return this[entityTypesProperty].hasOwnProperty(name);\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                const schema = {\n                    namespace:SchemaDefaultNamespace,\n                    entityType:[],\n                    entityContainer: {\n                        \"name\":\"DefaultContainer\",\n                        \"entitySet\":[]\n                    }\n                };\n                //get entity types by excluding ignored entities\n                const keys = _.filter(_.keys(self[entityTypesProperty]), (x)=> {\n                    return self[ignoreEntityTypesProperty].indexOf(x)<0;\n                });\n                //enumerate entity types\n                _.forEach(keys, (key)=> {\n                    schema.entityType.push(self[entityTypesProperty][key]);\n                });\n                //enumerate entity sets\n                schema.entityContainer.entitySet.push.apply(schema.entityContainer.entitySet, self[entityContainerProperty]);\n\n                return resolve(schema);\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n\n    /**\n     * @param {boolean=} all\n     * @returns {ODataModelBuilder}\n     */\n    clean(all) {\n        delete this[edmProperty];\n        if (typeof all === 'boolean' && all === true) {\n            this[entityTypesProperty] = {};\n            this[ignoreEntityTypesProperty] = [];\n            this[entityContainerProperty] = [];\n        }\n        return this;\n    }\n\n    /**\n     * Creates and returns an XML structure based on the configuration performed using this builder\n     * @returns {Promise<XDocument>}\n     */\n    getEdmDocument() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            try{\n                return self.getEdm().then((schema)=> {\n                    const doc = new XDocument();\n                    const rootElement = doc.createElement(\"edmx:Edmx\");\n                    rootElement.setAttribute(\"xmlns:edmx\", \"http://docs.oasis-open.org/odata/ns/edmx\");\n                    rootElement.setAttribute(\"Version\",\"4.0\");\n                    doc.appendChild(rootElement);\n\n                    const dataServicesElement = doc.createElement(\"edmx:DataServices\");\n                    const schemaElement = doc.createElement(\"Schema\");\n                    schemaElement.setAttribute(\"xmlns\", \"http://docs.oasis-open.org/odata/ns/edm\");\n                    schemaElement.setAttribute(\"Namespace\", schema.namespace);\n                    //schemaElement.setAttribute(\"Namespace\", \"Most.Data.Models\");\n\n                    //append edmx:DataServices > Schema\n                    dataServicesElement.appendChild(schemaElement);\n                    _.forEach(schema.entityType,\n                        /**\n                         *\n                         * @param {EntityTypeConfiguration} entityType\n                         */\n                        (entityType) => {\n\n                            //create element Schema > EntityType\n                            const entityTypeElement = doc.createElement(\"EntityType\");\n                            entityTypeElement.setAttribute(\"Name\", entityType.name);\n                            entityTypeElement.setAttribute(\"OpenType\", true);\n                            if (entityType.baseType) {\n                                entityTypeElement.setAttribute(\"BaseType\", schema.namespace.concat(\".\", entityType.baseType));\n                            }\n\n                            if (entityType.key && entityType.key.propertyRef) {\n                                const keyElement = doc.createElement('Key');\n                                _.forEach(entityType.key.propertyRef, (key)=> {\n                                    const keyRefElement = doc.createElement('PropertyRef');\n                                    keyRefElement.setAttribute(\"Name\",key.name);\n                                    keyElement.appendChild(keyRefElement);\n                                });\n                                entityTypeElement.appendChild(keyElement);\n                            }\n                            //enumerate properties\n                            _.forEach(entityType.property, function(x) {\n                                const propertyElement = doc.createElement('Property');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (_.isBoolean(x.nullable) && (x.nullable===false)) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //enumerate navigation properties\n                            _.forEach(entityType.navigationProperty, function(x) {\n                                const propertyElement = doc.createElement('NavigationProperty');\n                                propertyElement.setAttribute(\"Name\",x.name);\n                                propertyElement.setAttribute(\"Type\",x.type);\n                                if (!x.nullable) {\n                                    propertyElement.setAttribute(\"Nullable\",false);\n                                }\n                                entityTypeElement.appendChild(propertyElement);\n                            });\n                            //append Schema > EntityType\n                            schemaElement.appendChild(entityTypeElement);\n                        });\n\n                    //create Schema > EntityContainer\n                    const entityContainerElement = doc.createElement(\"EntityContainer\");\n                    entityContainerElement.setAttribute(\"Name\", schema.entityContainer.name || \"DefaultContainer\");\n\n                    _.forEach(schema.entityContainer.entitySet,\n                        /**\n                         * @param {EntitySetConfiguration} child\n                         */\n                        (child) => {\n                            const childElement = doc.createElement(child.kind);\n                            childElement.setAttribute(\"Name\", child.name);\n                            if ((child.kind === EntitySetKind.EntitySet) || (child.kind === EntitySetKind.Singleton)) {\n                                childElement.setAttribute(\"EntityType\", schema.namespace.concat(\".\", child.entityType.name));\n                            }\n                            const childAnnotation = doc.createElement(\"Annotation\");\n                            childAnnotation.setAttribute(\"Term\", \"Org.OData.Core.V1.ResourcePath\");\n                            childAnnotation.setAttribute(\"String\", child.getUrl());\n                            childElement.appendChild(childAnnotation);\n                            //append Schema > EntityContainer > (EntitySet, Singleton, FunctionImport)\n                            entityContainerElement.appendChild(childElement);\n                        });\n\n                    //append Schema > EntityContainer\n                    schemaElement.appendChild(entityContainerElement);\n\n                    //append edmx:Edmx > edmx:DataServices\n                    rootElement.appendChild(dataServicesElement);\n                    return resolve(doc);\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n\n    }\n\n    /**\n     * @param {Function} contextLinkFunc\n     */\n    hasContextLink(contextLinkFunc) {\n        this.getContextLink = contextLinkFunc;\n    }\n\n}\n\nclass EntityDataContext extends DataContext {\n    /**\n     * @param {DataConfigurationStrategy=} configuration\n     */\n    constructor(configuration) {\n        super();\n        this.getConfiguration = ()=> configuration;\n    }\n\n    model(name) {\n        if (this.getConfiguration().dataTypes.hasOwnProperty(name)) {\n            return;\n        }\n        const definition = this.getConfiguration().model(name);\n        if (_.isNil(definition)) {\n            return;\n        }\n        return new DataModel(definition, this);\n    }\n\n}\n\n/**\n * @class\n * @augments ODataModelBuilder\n */\nexport class ODataConventionModelBuilder extends ODataModelBuilder {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * Automatically registers an entity type from the given model\n     * @param {string} entityType\n     * @param {string} name\n     * @returns {EntitySetConfiguration}\n     */\n    addEntitySet(entityType, name) {\n        const self = this;\n        const superAddEntitySet = super.addEntitySet;\n        /**\n         * @type {EntityTypeConfiguration}\n         */\n        if (this.hasEntitySet(name)) {\n            return this.getEntitySet(name);\n        }\n        /**\n         * @type {DataConfigurationStrategy|*}\n         */\n        const strategy = self.getConfiguration().getStrategy(DataConfigurationStrategy);\n        if (strategy) {\n            let modelEntitySet = superAddEntitySet.bind(self)(entityType, name);\n            /**\n             * @type {EntityTypeConfiguration}\n             */\n            let modelEntityType = modelEntitySet.entityType;\n            /**\n             * @type {DataModel}\n             */\n            const definition = strategy.model(entityType);\n            if (definition) {\n                const model = new DataModel(definition, new EntityDataContext(strategy));\n                let inheritedAttributes = [];\n                const primaryKey = _.find(model.attributes, function(x) {\n                    return x.primary;\n                });\n                if (model.inherits) {\n                    //add base entity\n                    self.addEntitySet(model.inherits, pluralize(model.inherits));\n                    //set inheritance\n                    modelEntityType.derivesFrom(model.inherits);\n                    const baseModel = model.base();\n                    if (baseModel) {\n                        inheritedAttributes = baseModel.attributeNames;\n                    }\n                }\n                _.forEach(_.filter(model.attributes, function(x) {\n                    if (x.primary && model.inherits) {\n                        return false;\n                    }\n                    return (x.model === model.name) && (inheritedAttributes.indexOf(x.name)<0);\n                }), function(x) {\n                    const name = x.property || x.name;\n                    const mapping = model.inferMapping(x.name);\n                    if (_.isNil(mapping)) {\n                        //find data type\n                        const dataType = strategy.dataTypes[x.type];\n                        //add property\n                        const edmType = _.isObject(dataType) ? (dataType.hasOwnProperty(\"edmtype\") ? dataType[\"edmtype\"]: \"Edm.\" + x.type) : SchemaDefaultNamespace.concat(\".\",x.type);\n                        modelEntityType.addProperty(name, edmType, x.nullable);\n                        if (x.primary) {\n                            modelEntityType.hasKey(name, edmType);\n                        }\n                    }\n                    else {\n                        const namespacedType = SchemaDefaultNamespace.concat(\".\",x.type);\n                        //add navigation property\n                        modelEntityType.addNavigationProperty(name, namespacedType, x.many ? EdmMultiplicity.Many: EdmMultiplicity.One);\n                        //add navigation property entity (if type is not a primitive type)\n                        if (!strategy.dataTypes.hasOwnProperty(x.type)) {\n                            self.addEntitySet(x.type, pluralize(x.type));\n                        }\n                    }\n                });\n                //add link function\n                if (typeof self.getContextLink === 'function') {\n                    modelEntitySet.hasContextLink(function(context) {\n                       return self.getContextLink(context).concat(\"$metadata#\",modelEntitySet.name);\n                    });\n                }\n                //add id link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasIdLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n                //add read link\n                if (typeof self.getContextLink === 'function') {\n                    if (primaryKey) {\n                        modelEntitySet.hasReadLink(function(context, instance) {\n                            //get parent model\n                            if (_.isNil(instance[primaryKey.name])) {\n                                return;\n                            }\n                            return self.getContextLink(context).concat(modelEntitySet.name, \"(\", instance[primaryKey.name], \")\");\n                        });\n                    }\n                }\n            }\n            return modelEntitySet;\n        }\n        return superAddEntitySet.bind(self)(entityType, name);\n    }\n\n    /**\n     * @returns {Promise}\n     */\n    initialize() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            /**\n             * @type {SchemaLoaderStrategy|DefaultSchemaLoaderStrategy|*}\n             */\n            const schemaLoader = self.getConfiguration().getStrategy(SchemaLoaderStrategy);\n            if (typeof schemaLoader.getModelPath === 'function') {\n                const nativeFsModule = 'fs';\n                const fs = require(nativeFsModule);\n                const modelPath = schemaLoader.getModelPath();\n                if (_.isNil(modelPath)) {\n                    return resolve();\n                }\n                return fs.readdir(modelPath, (err, files) => {\n                    try {\n                        if (err) {\n                            return reject(err);\n                        }\n                        const models = _.map( _.filter(files, function(x) {\n                            return /\\.json$/.test(x);\n                        }), (x) => {\n                            return /(.*?)\\.json$/.exec(x)[1];\n                        });\n                        _.forEach(models, (x)=> {\n                            if (!_.isNil(x)) {\n                                self.addEntitySet(x, pluralize(x));\n                            }\n                        });\n                        return resolve();\n                    }\n                    catch(err) {\n                        return reject(err);\n                    }\n                });\n            }\n            return resolve();\n        });\n\n    }\n\n    /**\n     * Creates and returns a structure based on the configuration performed using this builder\n     * @returns {Promise}\n     */\n    getEdm() {\n        const self = this, superGetEdm = super.getEdm;\n        return Q.promise((resolve, reject) => {\n            try{\n                if (_.isObject(self[edmProperty])) {\n                    return resolve(self[edmProperty]);\n                }\n                return self.initialize().then(()=> {\n                    return superGetEdm.bind(self)().then((result) => {\n                        self[edmProperty] = result;\n                        return resolve(self[edmProperty]);\n                    });\n                });\n            }\n            catch(err) {\n                return reject(err);\n            }\n        });\n    }\n}\n\nexport class ODataMediaTypeFormatter {\n\n}"]}