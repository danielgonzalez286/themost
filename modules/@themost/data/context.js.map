{"version":3,"sources":["context.es6"],"names":["DataContext","_","TraceUtils","DataConfiguration","DefaultDataContext","db_","finalize_","close","self","getDb","adapter","getConfiguration","adapters","find","x","er","Error","code","adapterType","adapterTypes","invariantName","isNil","createInstance","options","setDb","value","db","Object","defineProperty","get","set","configurable","enumerable","getCurrent","name","undefined","obj","model","DataModel","require","context","cb","call","func","callback","ctx","err","finalize","NamedDataContext","debug","name_"],"mappings":"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","file":"context.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport {DataContext} from './types';\nimport {_} from 'lodash';\nimport {TraceUtils} from '@themost/common/utils';\nimport {DataConfiguration} from './config';\n\n\n/**\n * @classdesc Represents the default data context of MOST Data Applications.\n * The default data context uses the adapter which is registered as the default adapter in application configuration.\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"...\", \"default\":false,\n    \"options\": {\n      \"server\":\"localhost\",\n      \"user\":\"user\",\n      \"password\":\"password\",\n      \"database\":\"test\"\n    }\n},\n { \"name\":\"development_with_pool\", \"invariantName\":\"pool\", \"default\":true,\n    \"options\": {\n      \"adapter\":\"development\"\n    }\n}\n ...\n ]\n </code></pre>\n * @class\n * @augments DataContext\n * @property {DataAdapter} db - Gets a data adapter based on the current configuration settings.\n */\nexport class DefaultDataContext extends DataContext {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n        /**\n         * @type {DataAdapter}\n         * @private\n         */\n        let db_= null;\n        /**\n         * @private\n         */\n        this.finalize_ = function() {\n            if (db_)\n                db_.close();\n            db_=null;\n        };\n        const self = this;\n\n        self.getDb = function() {\n            if (db_)\n                return db_;\n            //otherwise load database options from configuration\n            const adapter = self.getConfiguration().adapters.find(function(x) {\n                return x[\"default\"];\n            });\n            if (typeof adapter ==='undefined' || adapter==null) {\n                er = new Error('The default data adapter is missing.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            /**\n             * @type {{createInstance:Function}|*}\n             */\n            const adapterType = self.getConfiguration().adapterTypes[adapter.invariantName];\n            //validate data adapter type\n            let er;\n            if (_.isNil(adapterType)) {\n                er = new Error('Invalid adapter type.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            if (typeof adapterType.createInstance !== 'function') {\n                er= new Error('Invalid adapter type. Adapter initialization method is missing.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            //otherwise load adapter\n            db_ = adapterType.createInstance(adapter.options);\n            return db_;\n        };\n\n        self.setDb = function(value) {\n            db_ = value;\n        };\n\n        delete self.db;\n\n        Object.defineProperty(self, 'db', {\n            get: function() {\n                return self.getDb();\n            },\n            set: function(value) {\n                self.setDb(value);\n            },\n            configurable: true,\n            enumerable:false });\n    }\n\n    /**\n     * Gets an instance of DataConfiguration class which is associated with this data context\n     * @returns {DataConfiguration}\n     */\n    getConfiguration() {\n        return DataConfiguration.getCurrent();\n    }\n\n    /**\n     * Gets an instance of DataModel class based on the given name.\n     * @param name {string} - A string that represents the model name.\n     * @returns {DataModel} - An instance of DataModel class associated with this data context.\n     */\n    model(name) {\n        const self = this;\n        if ((name == null) || (name === undefined))\n            return null;\n        const obj = self.getConfiguration().model(name);\n        if (_.isNil(obj))\n            return null;\n        const DataModel = require('./model').DataModel, model = new DataModel(obj);\n        //set model context\n        model.context = self;\n        //return model\n        return model;\n    }\n\n    /**\n     * Finalizes the current data context\n     * @param {Function} cb - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    finalize(cb) {\n        cb = cb || function () {};\n        this.finalize_();\n        cb.call(this);\n    }\n\n    /**\n     *\n     * @param {Function} func\n     * @param {Function} callback\n     */\n    static execute(func, callback) {\n        func = func || function() {};\n        const ctx = new DefaultDataContext();\n        func.call(null, ctx, function(err) {\n            ctx.finalize(function() {\n               if (err) { return callback(err); }\n               return callback();\n            });\n        });\n    }\n\n}\n\n/**\n * @classdesc Represents a data context based on a data adapter's name.\n * The specified adapter name must be registered in application configuration.\n * @class\n * @augments DataContext\n * @property {DataAdapter} db - Gets a data adapter based on the given adapter's name.\n */\nclass NamedDataContext extends DataContext {\n    /**\n     * @constructor\n     * @param {string} name\n     */\n    constructor(name) {\n        super();\n        /**\n         * @type {DataAdapter}\n         * @private\n         */\n        let db_;\n        /**\n         * @private\n         */\n        this.finalize_ = function() {\n            try {\n                if (db_)\n                    db_.close();\n            }\n            catch(err) {\n                TraceUtils.debug('An error occure while closing the underlying database context.');\n                TraceUtils.debug(err);\n            }\n            db_ = null;\n        };\n        //set the name specified\n        const self = this, name_ = name;\n\n        self.getDb = function() {\n            if (db_)\n                return db_;\n            //otherwise load database options from configuration\n            const adapter = self.getConfiguration().adapters.find(function(x) {\n                return x.name == name_;\n            });\n            let er;\n            if (typeof adapter ==='undefined' || adapter==null) {\n                er = new Error('The specified data adapter is missing.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            //get data adapter type\n            const adapterType = self.getConfiguration().adapterTypes[adapter.invariantName];\n            //validate data adapter type\n            if (_.isNil(adapterType)) {\n                er = new Error('Invalid adapter type.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            if (typeof adapterType.createInstance !== 'function') {\n                er= new Error('Invalid adapter type. Adapter initialization method is missing.'); er.code = 'EADAPTER';\n                throw er;\n            }\n            //otherwise load adapter\n            db_ = adapterType.createInstance(adapter.options);\n            return db_;\n        };\n\n        self.setDb = function(value) {\n            db_ = value;\n        };\n\n        /**\n         * Gets an instance of DataConfiguration class which is associated with this data context\n         * @returns {DataConfiguration}\n         */\n        this.getConfiguration = function() {\n            return DataConfiguration.getCurrent();\n        };\n\n        delete self.db;\n\n        Object.defineProperty(self, 'db', {\n            get : function() {\n                return self.getDb();\n            },\n            set : function(value) {\n                self.setDb(value);\n            },\n            configurable : true,\n            enumerable:false });\n\n    }\n\n    /**\n     * Gets an instance of DataModel class based on the given name.\n     * @param name {string} - A string that represents the model name.\n     * @returns {DataModel} - An instance of DataModel class associated with this data context.\n     */\n    model(name) {\n        const self = this;\n        if ((name == null) || (name === undefined))\n            return null;\n        const obj = self.getConfiguration().model(name);\n        if (_.isNil(obj))\n            return null;\n        const DataModel = require('./model').DataModel;\n        const model = new DataModel(obj);\n        //set model context\n        model.context = self;\n        //return model\n        return model;\n    }\n\n    finalize(cb) {\n        cb = cb || function () {};\n        this.finalize_();\n        cb.call(this);\n    }\n}"]}