{"version":3,"sources":["validators.es6"],"names":["_","sprintf","DataConfigurationStrategy","DataValidator","context_","setContext","context","getContext","zeroPad_","number","length","res","toString","PatternValidator","pattern","val","isNil","valueTo","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","offset","getTimezoneOffset","timezone","Math","floor","re","RegExp","test","innerMessage","message","DefaultMessage","translate","code","MinLengthValidator","minLength","hasOwnProperty","MaxLengthValidator","maxLength","MinValueValidator","min","minValue","MaxValueValidator","max","maxValue","RangeValidator","minValidator","maxValidator","minValidation","maxValidation","validateSync","DataTypeValidator","type","dataType","getCurrent","dataTypes","properties","validator","validationResult","patternMessage","DataValidatorListener","event","callback","state","model","validateForInsert","target","then","catch","err","validateForUpdate","RequiredValidator","invalid","isNaN"],"mappings":"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","file":"validators.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport _ from 'lodash';\nimport sprintf from 'sprintf';\nimport {DataConfigurationStrategy} from './config'\n\n/**\n * @class\n * @property {*} target - Gets or sets the target data object\n * @constructor\n */\nexport class DataValidator {\n    constructor() {\n        let context_;\n        /**\n         * Sets the current data context.\n         * @param {DataContext|*} context\n         */\n        this.setContext = function(context) {\n            context_ = context;\n        };\n        /**\n         * Gets the current data context, if any.\n         * @returns {DataContext|*}\n         */\n        this.getContext = function() {\n            return context_;\n        };\n    }\n\n}\n\nfunction zeroPad_(number, length) {\n    number = number || 0;\n    let res = number.toString();\n    while (res.length < length) {\n        res = '0' + res;\n    }\n    return res;\n}\n\n/**\n * @class\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @augments DataValidator\n * @classdesc\n * Validates a variable against the regular expression provided\n *\n <p>PatternValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a max length in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"model\",\n    \"title\": \"Model\",\n    \"description\": \"The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.\",\n    \"type\": \"Text\",\n    \"validation\": {\n        \"pattern\":\"^[A-Z]{2}\\\\.\\\\d{3}$\",\n        \"patternMessage\":\"Product model seems to be invalid. Valid values are VC.100, DX.010 etc.\"\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"model\": \"FS240098701\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EPATTERN\",\n    \"model\": \"Product\",\n    \"field\": \"model\",\n    \"message\": \"Product model seems to be invalid. Valid values are VC.100, DX.010 etc.\"\n}\n </code></pre>\n */\nexport class PatternValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {string} pattern - A string which represents a regular expression\n     */\n    constructor(pattern) {\n        super();\n        this.pattern = pattern;\n    }\n\n    /**\n     * Validates the given value and returns a validation result or undefined if the specified value is invalid\n     * @param val\n     * @returns {{code: string, message: string, innerMessage: *}|undefined}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n        let valueTo = val;\n        if (val instanceof Date) {\n            const year   = val.getFullYear();\n            const month  = zeroPad_(val.getMonth() + 1, 2);\n            const day    = zeroPad_(val.getDate(), 2);\n            const hour   = zeroPad_(val.getHours(), 2);\n            const minute = zeroPad_(val.getMinutes(), 2);\n            const second = zeroPad_(val.getSeconds(), 2);\n            const millisecond = zeroPad_(val.getMilliseconds(), 3);\n            //format timezone\n            const offset = (new Date()).getTimezoneOffset(), timezone = (offset>=0 ? '+' : '') + zeroPad_(Math.floor(offset/60),2) + ':' + zeroPad_(offset%60,2);\n            valueTo = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + millisecond + timezone;\n        }\n        const re = new RegExp(this.pattern, \"ig\");\n        if  (!re.test(valueTo)) {\n\n            let innerMessage = null, message = this.message || PatternValidator.DefaultMessage;\n            if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                innerMessage = message;\n                message = this.getContext().translate(this.message || PatternValidator.DefaultMessage);\n            }\n\n            return {\n                code:\"EPATTERN\",\n                \"message\":message,\n                \"innerMessage\":innerMessage\n            }\n        }\n    }\n}\n\nPatternValidator.DefaultMessage = \"The value seems to be invalid.\";\n\n/**\n * @class\n * @property {number} minLength - Gets or sets an integer which represents the minimum length.\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @augments {DataValidator}\n * @classdesc Validates a variable which has a length property (e.g. a string) against the minimum length provided\n <p>MinLengthValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a min length in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"model\",\n    \"title\": \"Model\",\n    \"description\": \"The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.\",\n    \"type\": \"Text\",\n    \"validation\": {\n        minLength:4\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"model\": \"FS2\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>Result:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EMINLEN\",\n    \"model\": \"Product\",\n    \"field\": \"model\",\n    \"message\": \"The value is too short. It should have 4 characters or more.\"\n}\n </code></pre>\n */\nexport class MinLengthValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {number} length - A number which represents the minimum length\n     */\n    constructor(length) {\n        super();\n        this.minLength = length;\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, minLength: number, message:string, innerMessage: string}|undefined}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n        if (val.hasOwnProperty('length')) {\n            if (val.length<this.minLength) {\n\n                let innerMessage = null, message = sprintf.sprintf(this.message || MinLengthValidator.DefaultMessage, this.minLength);\n                if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                    innerMessage = message;\n                    message = sprintf.sprintf(this.getContext().translate(this.message || MinLengthValidator.DefaultMessage), this.minLength);\n                }\n\n                return {\n                    code:\"EMINLEN\",\n                    minLength:this.minLength,\n                    message:message,\n                    innerMessage:innerMessage\n                }\n\n            }\n        }\n    }\n}\n\nMinLengthValidator.DefaultMessage = \"The value is too short. It should have %s characters or more.\";\n\n/**\n * @class\n * @augments {DataValidator}\n * @property {number} maxLength - Gets or sets an integer which represents the maximum length.\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @constructor\n * @classdesc Validates a variable which has a length property (e.g. a string) against the maximum length provided\n <p>MaxLengthValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a max length in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"model\",\n    \"title\": \"Model\",\n    \"description\": \"The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.\",\n    \"type\": \"Text\",\n    \"validation\": {\n        maxLength:8\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"model\": \"FS240098701\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>Result:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EMAXLEN\",\n    \"model\": \"Product\",\n    \"field\": \"model\",\n    \"message\": \"The value is too long. It should have 8 characters or fewer.\"\n}\n </code></pre>\n <p><strong>Note:</strong>If validation.maxLength is missing and data model's attribute has a defined size then the operation will try to validate data object against this size.\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"model\",\n    \"title\": \"Model\",\n    \"description\": \"The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.\",\n    \"type\": \"Text\",\n    \"size\":8\n}\n </code></pre>\n */\nexport class MaxLengthValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {number} length - A number which represents the maximum length\n     */\n    constructor(length) {\n        super();\n        this.maxLength = length;\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, maxLength: number, message:string, innerMessage: string}|undefined|*}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n\n        let innerMessage = null, message = sprintf.sprintf(this.message || MaxLengthValidator.DefaultMessage, this.maxLength);\n        if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n            innerMessage = message;\n            message = sprintf.sprintf(this.getContext().translate(this.message || MaxLengthValidator.DefaultMessage), this.maxLength);\n        }\n\n        if (val.hasOwnProperty('length')) {\n            if (val.length>this.maxLength) {\n                return {\n                    code:\"EMAXLEN\",\n                    maxLength:this.maxLength,\n                    message: message,\n                    innerMessage:innerMessage\n                }\n            }\n        }\n    }\n}\n\nMaxLengthValidator.DefaultMessage = \"The value is too long. It should have %s characters or fewer.\";\n\n/**\n * @class\n * @augments {DataValidator}\n * @property {*} minValue - Gets or sets a value which represents the minimum value.\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @constructor\n * @classdesc Validates a value against the minimum value provided\n <p>MinValueValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a max value in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"validation\": {\n        \"minValue\":5\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\":2.5\n            \"model\": \"FS2USB42\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EMINVAL\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"The value should be greater than or equal to 5.\"\n}\n </code></pre>\n */\nexport class MinValueValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {number|Date|*} min - A value which represents the minimum value\n     */\n    constructor(min) {\n        super();\n        this.minValue = min;\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, maxLength: number, message:string, innerMessage: string}|undefined|*}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n        if (val<this.minValue) {\n\n            let innerMessage = null, message = sprintf.sprintf(this.message || MinValueValidator.DefaultMessage, this.minValue);\n            if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                innerMessage = message;\n                message = sprintf.sprintf(this.getContext().translate(this.message || MinValueValidator.DefaultMessage), this.minValue);\n            }\n\n            return {\n                code:\"EMINVAL\",\n                minValue:this.minValue,\n                message:message,\n                innerMessage:innerMessage\n            }\n        }\n    }\n}\n\nMinValueValidator.DefaultMessage = \"The value should be greater than or equal to %s.\";\n\n/**\n * @class\n * @augments {DataValidator}\n * @property {*} maxValue - Gets or sets a value which represents the maximum value.\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @classdesc Validates a value against the maximum value provided\n <p>MaxValueValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a min value in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"validation\": {\n        \"maxValue\":1000\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\":1245.50\n            \"model\": \"FS2USB42\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>Result:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EMAXVAL\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"The value should be lower or equal to 1000.\"\n}\n </code></pre>\n */\nexport class MaxValueValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {number|Date|*} max - A value which represents the maximum value\n     */\n    constructor(max) {\n        super();\n        this.maxValue = max;\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, maxLength: number, message:string, innerMessage: string}|undefined|*}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n        if (val>this.maxValue) {\n\n            let innerMessage = null, message = sprintf.sprintf(this.message || MaxValueValidator.DefaultMessage , this.maxValue);\n            if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                innerMessage = message;\n                message = sprintf.sprintf(this.getContext().translate(this.message || MaxValueValidator.DefaultMessage), this.maxValue);\n            }\n\n            return {\n                code:\"EMAXVAL\",\n                maxValue:this.maxValue,\n                message:message,\n                innerMessage:innerMessage\n            }\n        }\n    }\n}\n\n\nMaxValueValidator.DefaultMessage = \"The value should be lower or equal to %s.\";\n\n/**\n * @class\n * @param {number|Date|*} min - A value which represents the minimum value\n * @param {number|Date|*} max - A value which represents the maximum value\n * @augments {DataValidator}\n * @property {*} minValue - Gets or sets a value which represents the minimum value\n * @property {*} maxValue - Gets or sets a value which represents the maximum value\n * @property {string} message - Gets or sets a string which represents a custom validator message.\n * @constructor\n * @classdesc Validates a value against a minimum and maximum value\n <p>RangeValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define min and max values in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"validation\": {\n        \"minValue\":5,\n        \"maxValue\":100\n    }\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\":102.5\n            \"model\": \"FS2USB42\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"ERANGE\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"The value should be between 5 to 100.\"\n}\n </code></pre>\n */\nexport class RangeValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {number|Date|*} min - A value which represents the minimum value\n     * @param {number|Date|*} max - A value which represents the maximum value\n     */\n    constructor(min, max) {\n        super();\n        this.minValue = min;\n        this.maxValue = max;\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, maxLength: number, message:string, innerMessage: string}|undefined|*}\n     */\n    validateSync(val) {\n        if (_.isNil(val)) {\n            return;\n        }\n        let minValidator, maxValidator, minValidation, maxValidation;\n        if (typeof this.minValue !== 'undefined' && this.minValue !== null) {\n            minValidator = new MinValueValidator(this.minValue);\n            minValidation = minValidator.validateSync(val);\n        }\n        if (typeof this.maxValue !== 'undefined' && this.maxValue !== null) {\n            maxValidator = new MaxValueValidator(this.maxValue);\n            maxValidation = maxValidator.validateSync(val);\n        }\n        if (minValidator && maxValidator && (minValidation || maxValidation)) {\n            let innerMessage = null, message = sprintf.sprintf(this.message || RangeValidator.DefaultMessage, this.minValue, this.maxValue);\n            if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                innerMessage = message;\n                message = sprintf.sprintf(this.getContext().translate(this.message || RangeValidator.DefaultMessage), this.minValue, this.maxValue);\n            }\n            return {\n                code:\"ERANGE\",\n                maxValue:this.maxValue,\n                message:message,\n                innerMessage:innerMessage\n            }\n        }\n        else if (minValidation) {\n            return minValidation;\n        }\n        else if (maxValidation) {\n            return maxValidation;\n        }\n    }\n}\n\nRangeValidator.DefaultMessage = \"The value should be between %s to %s.\";\n\n/**\n * @class\n * @property {*} dataType - Gets or sets the data type which is going to be used for data validation\n * @augments {DataValidator}\n * @classdesc Validates a value against a pre-defined data type\n *\n <p>DataTypeValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may define a data type in validation properties:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"validation\": {\n        \"type\":\"NonNegativeNumber\"\n    }\n}\n </code></pre>\n <p>There is a collection of pre-defined data types. This collection may also be extended by using dataTypes.json configuration.</p>\n <table class=\"table-flat\">\n <thead><tr><th>Type</th><th>Description</th></tr></thead>\n <tbody>\n <tr><td>NegativeInteger</td><td>An integer containing only negative values (..,-2,-1)</td></tr>\n <tr><td>NegativeNumber</td><td>A number containing only negative values (..,-2,-1)</td></tr>\n <tr><td>NonNegativeInteger</td><td>An integer containing only non-negative values (0,1,2,..)</td></tr>\n <tr><td>NonNegativeNumber</td><td>An number containing only non-negative values (0,1,2,..)</td></tr>\n <tr><td>NonPositiveInteger</td><td>An integer containing only non-positive values (..,-2,-1,0)</td></tr>\n <tr><td>NonPositiveNumber</td><td>A number containing only non-positive values (..,-2,-1,0)</td></tr>\n <tr><td>PositiveInteger</td><td>An integer containing only positive values (1,2,..)</td></tr>\n <tr><td>PositiveNumber</td><td>A number containing only positive values (0.1,+1,2,..)</td></tr>\n <tr><td>Float</td><td>Float data type is a single-precision floating point.</td></tr>\n <tr><td>Email</td><td>A string which represents an email address (e.g. user@example.com)</td></tr>\n <tr><td>Guid</td><td>A string which represents a global unique identifier (e.g. 21EC2020-3AEA-4069-A2DD-08002B30309D).</td></tr>\n <tr><td>AbsoluteURI</td><td>A string which represents an absolute URI address (e.g. https://www.example.com/help?article=1001)</td></tr>\n <tr><td>RelativeURI</td><td>A string which represents a relative URI address (e.g. /help?article=1001)</td></tr>\n <tr><td>Time</td><td>A string which represents an instant of time that recurs every day (e.g. 13:20:45)</td></tr>\n <tr><td>Date</td><td>Represents a date value.</td></tr>\n <tr><td>DateTime</td><td>Represents a date and time value.</td></tr>\n <tr><td>Duration</td><td>A string which represents a duration of time (e.g. P1Y1M10D, P10D, -P0Y1M10D2H15M30S etc)</td></tr>\n <tr><td>IP</td><td>A string which represents an IPv4 address (e.g. 127.0.0.1)</td></tr>\n </tbody>\n </table>\n <p>A custom data type may be defined as follows:</p>\n <pre class=\"prettyprint\"><code>\n \"ProductModel\": {\n\"comment\": \"A string which represents the model of a product\",\n\"label\": \"Product Model\",\n\"properties\": {\n  \"pattern\":\"^[A-Z]{2}\\\\.\\\\d{3}$\",\n  \"patternMessage\":\"Product model seems to be invalid. Valid values are VC.100, DX.010 etc.\"\n},\n\"supertypes\": [\n  \"Text\"\n],\n\"type\": \"string\",\n\"sqltype\":\"Text\",\n\"version\":\"1.0\"\n}\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\":-10.75\n            \"model\": \"FS2USB42\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EPATTERN\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"The value should be a number greater or equal to zero.\"\n}\n </code></pre>\n */\nexport class DataTypeValidator extends DataValidator {\n    /**\n     * @constructor\n     * @param {string|*} type - The data type which is going to be used for data validation\n     */\n    constructor(type) {\n        super();\n        if (typeof type === 'string')\n            this.dataType = DataConfigurationStrategy.getCurrent().dataTypes[type];\n        else\n            this.dataType = type;\n    }\n\n    /**\n     * @param val\n     * @returns {*}\n     */\n    validateSync(val) {\n        if (typeof this.dataType === 'undefined') {\n            return;\n        }\n        /**\n         * @type {{pattern:string,patternMessage:string,minValue:*,maxValue:*,minLength:number,maxLength:number}}\n         */\n        const properties = this.dataType.properties;\n        if (typeof properties !== 'undefined') {\n            let validator, validationResult;\n            //validate pattern if any\n            if (properties.pattern) {\n                validator = new PatternValidator(properties.pattern);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    if (properties.patternMessage) {\n\n                        validationResult.message = properties.patternMessage;\n                        if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                            validationResult.innerMessage = validationResult.message;\n                            validationResult.message = this.getContext().translate(properties.patternMessage);\n                        }\n                    }\n                    return validationResult;\n                }\n            }\n            if (properties.hasOwnProperty('minValue') && properties.hasOwnProperty('maxValue')) {\n                validator = new RangeValidator(properties.minValue, properties.maxValue);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    return validationResult;\n                }\n            }\n            else if (properties.hasOwnProperty('minValue')) {\n                validator = new MinValueValidator(properties.minValue);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    return validationResult;\n                }\n            }\n            else if (properties.hasOwnProperty('maxValue')) {\n                validator = new MaxValueValidator(properties.maxValue);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    return validationResult;\n                }\n            }\n            if (properties.hasOwnProperty('minLength')) {\n                validator = new MinLengthValidator(properties.minLength);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    return validationResult;\n                }\n            }\n            if (properties.hasOwnProperty('maxLength')) {\n                validator = new MaxLengthValidator(properties.maxLength);\n                validator.setContext(this.getContext());\n                validationResult = validator.validateSync(val);\n                if (validationResult) {\n                    return validationResult;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @class\n * @classdesc DataValidatorListener is one of the default listeners of MOST data models. Validates data objects against validation rules defined in model attributes.\n * <h4>Validation Rules</h4>\n * <p>Each attribute may have a set of validation rules. These rules may validate data against:\n * <ul>\n * <li><a href=\"module-most-data_data-validator-MaxValueValidator.html\">a maximum value</a></li>\n * <li><a href=\"module-most-data_data-validator-MinValueValidator.html\">a minimum value</a></li>\n * <li><a href=\"module-most-data_data-validator-MaxLengthValidator.html\">a maximum length</a></li>\n * <li><a href=\"module-most-data_data-validator-MinLengthValidator.html\">a minimum length</a></li>\n * <li><a href=\"module-most-data_data-validator-RangeValidator.html\">a value range</a></li>\n * <li><a href=\"module-most-data_data-validator-RequiredValidator.html\">a required attribute</a></li>\n * <li><a href=\"module-most-data_data-validator-PatternValidator.html\">a regular expression</a></li>\n * <li><a href=\"module-most-data_data-validator-DataTypeValidator.html\">a pre-defined data type</a></li>\n * <li><a href=\"#custom\">a custom validator</a></li>\n * </ul>\n * </p>\n <h6>Use default validation rules</h6>\n <p>\n In the following example price attribute has a validation which allows values between 0 to 1000:\n <pre class=\"prettyprint\"><code>\n {\n     \"name\": \"price\",\n     \"title\": \"Price\",\n     \"description\": \"The price of the product.\",\n     \"type\": \"Number\",\n     \"nullable\":false,\n     \"validation\": {\n         \"minValue\":0,\n         \"maxValue\":1000\n     }\n }\n </code></pre>\n </p>\n <p>\n The following code snippet tries to save an object with a negative value in price:\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\": -23.45,\n            \"model\": \"FS2400\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>\n and the result is:\n </p>\n <pre class=\"prettyprint\"><code>\n {\n     \"code\": \"ERANGE\",\n     \"model\": \"Product\",\n     \"field\": \"price\",\n     \"message\": \"The value should be between 0 to 1000.\"\n }\n </code></pre>\n <h6>Use data type validation</h6>\n <p>\n A validation may be performed by using a pre-defined data type:\n <pre class=\"prettyprint\"><code>\n {\n     \"name\": \"price\",\n     \"title\": \"Price\",\n     \"description\": \"The price of the product.\",\n     \"type\": \"Number\",\n     \"nullable\":false,\n     \"validation\": {\n        \"type\":\"NonNegativeNumber\"\n     }\n }\n </code></pre>\n <p>An operation tries to save a product with a negative price:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"price\": -23.45,\n            \"model\": \"FS2400\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EPATTERN\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"The value should be a number greater or equal to zero.\"\n}\n </code></pre>\n <p>The following list contains a set of pre-defined data types which may be used for data type validation:</p>\n <table class=\"table-flat\">\n <thead><tr><th>Type</th><th>Description</th></tr></thead>\n <tbody>\n <tr><td>NegativeInteger</td><td>An integer containing only negative values (..,-2,-1)</td></tr>\n <tr><td>NegativeNumber</td><td>A number containing only negative values (..,-2,-1)</td></tr>\n <tr><td>NonNegativeInteger</td><td>An integer containing only non-negative values (0,1,2,..)</td></tr>\n <tr><td>NonNegativeNumber</td><td>An number containing only non-negative values (0,1,2,..)</td></tr>\n <tr><td>NonPositiveInteger</td><td>An integer containing only non-positive values (..,-2,-1,0)</td></tr>\n <tr><td>NonPositiveNumber</td><td>A number containing only non-positive values (..,-2,-1,0)</td></tr>\n <tr><td>PositiveInteger</td><td>An integer containing only positive values (1,2,..)</td></tr>\n <tr><td>PositiveNumber</td><td>A number containing only positive values (0.1,+1,2,..)</td></tr>\n <tr><td>Float</td><td>Float data type is a single-precision floating point.</td></tr>\n <tr><td>Email</td><td>A string which represents an email address (e.g. user@example.com)</td></tr>\n <tr><td>Guid</td><td>A string which represents a global unique identifier (e.g. 21EC2020-3AEA-4069-A2DD-08002B30309D).</td></tr>\n <tr><td>AbsoluteURI</td><td>A string which represents an absolute URI address (e.g. https://www.example.com/help?article=1001)</td></tr>\n <tr><td>RelativeURI</td><td>A string which represents a relative URI address (e.g. /help?article=1001)</td></tr>\n <tr><td>Time</td><td>A string which represents an instant of time that recurs every day (e.g. 13:20:45)</td></tr>\n <tr><td>Date</td><td>Represents a date value.</td></tr>\n <tr><td>DateTime</td><td>Represents a date and time value.</td></tr>\n <tr><td>Duration</td><td>A string which represents a duration of time (e.g. P1Y1M10D, P10D, -P0Y1M10D2H15M30S etc)</td></tr>\n <tr><td>IP</td><td>A string which represents an IPv4 address (e.g. 127.0.0.1)</td></tr>\n </tbody>\n </table>\n </p>\n <h6><a name=\"custom\">Use custom validator</a></h6>\n Value validation may be performed by custom validator which is being registered as follows:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"nullable\":false,\n    \"validation\": {\n      \"validator\":\"./validators/price-validator\"\n    }\n}\n </code></pre>\n <p>where price-validator is a module which exports a createInstance() method\n that returns an instance of a class which inherits DataValidator class.</p>\n <pre class=\"prettyprint\"><code>\n //# ./validators/price-validator\n var util = require(\"util\"),\n most = require(\"most-data\");\n\n function PriceValidator(attr) {\nthis.attr = attr;\nPriceValidator.super_.call(this);\n}\n util.inherits(PriceValidator, most.validators.DataValidator);\n PriceValidator.prototype.validateSync = function(val) {\nif (typeof val === 'number') {\n    if (val<=0) {\n        return {\n            code:\"EPRICE\",\n            \"message\":\"A valid price must be always greater than zero.\"\n        };\n    }\n}\nelse {\n    return {\n        code:\"EPRICE\",\n        \"message\":\"A valid price must be always a number greater than zero.\"\n    };\n}\n};\n exports.createInstance = function() {\nreturn new PriceValidator();\n};\n </code></pre>\n <p>An operation tries to save a data object:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n    \"price\":-10.75,\n    \"model\": \"FS2USB3\",\n    \"name\": \"USB 3.0 Adapter\"\n};\n context.model(\"Product\").save(obj).then(function() {\n   return done();\n}).catch(function(err) {\n   return done(err);\n});\n </code></pre>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EPRICE\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"A valid price must be always greater than zero.\"\n}\n </code></pre>\n <p>A custom validator may use async validate(val,callback) method:</p>\n <pre class=\"prettyprint\"><code>\n PriceValidator.prototype.validate = function(val, callback) {\nthis.getContext().model(\"Product\")\n.where(\"price\").lowerThan(val).count()\n.then(function(result) {\n    if (result<=5) {\n        return callback(null, {\n            code:\"EPRICE\",\n            \"message\":sprintf.sprintf(\"You have already 5 products with price lower than %s.\", val)\n        });\n    }\n    return callback();\n}).catch(function(err) {\n    return callback(err);\n});\n};\n </code></pre>\n <p>and the result may be:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EPRICE\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"You have already 5 products with price lower than 10.\"\n}\n </code></pre>\n </p>\n * @constructor\n */\nexport class DataValidatorListener {\n    /**\n     * Occurs before creating or updating a data object.\n     * @param {DataEventArgs|*} event - An object that represents the event arguments passed to this operation.\n     * @param {Function} callback - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    beforeSave(event, callback) {\n        if (event.state === 4) { return callback(); }\n        if (event.state === 1) {\n            return event.model.validateForInsert(event.target).then(function() {\n                return callback();\n            }).catch(function(err) {\n                return callback(err);\n            });\n        }\n        else if  (event.state === 2) {\n            return event.model.validateForUpdate(event.target).then(function() {\n                return callback();\n            }).catch(function(err) {\n                return callback(err);\n            });\n        }\n        else {\n            return callback();\n        }\n    }\n}\n\n/**\n * @class\n * @augments most-data/data-validator~DataValidator\n * @constructor\n * @classdesc Validates a required attribute\n <p>RequiredValidator is used by <a href=\"DataValidatorListener.html\">DataValidatorListener</a> for validating data objects.</p>\n <p>\n An attribute of a data model may be defined as required:\n <pre class=\"prettyprint\"><code>\n {\n    \"name\": \"price\",\n    \"title\": \"Price\",\n    \"description\": \"The price of the product.\",\n    \"type\": \"Number\",\n    \"nullable\": false\n}\n </code></pre>\n <p>An operation tries to save a data object without price:</p>\n <pre class=\"prettyprint\"><code>\n var obj = {\n            \"model\": \"FS2USB42\",\n            \"name\": \"USB 3.0 Adapter\"\n        };\n context.model(\"Product\").save(obj).then(function() {\n           return done();\n       }).catch(function(err) {\n           return done(err);\n       });\n </code></pre>\n </p>\n <p>and the result is:</p>\n <pre class=\"prettyprint\"><code>\n {\n    \"code\": \"EREQUIRED\",\n    \"model\": \"Product\",\n    \"field\": \"price\",\n    \"message\": \"A value is required.\"\n}\n </code></pre>\n */\nexport class RequiredValidator extends DataValidator {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Validates the given value. If validation fails, the operation will return a validation result.\n     * @param {*} val\n     * @returns {{code: string, maxLength: number, message:string, innerMessage: string}|undefined|*}\n     */\n    validateSync(val) {\n        let invalid = false;\n        if (_.isNil(val)) {\n            invalid=true;\n        }\n        else if ((typeof val === 'number') && isNaN(val)) {\n            invalid=true;\n        }\n        if (invalid) {\n\n            let innerMessage = null, message = \"A value is required.\";\n            if (this.getContext() && (typeof this.getContext().translate === 'function')) {\n                innerMessage = message;\n                message = this.getContext().translate(\"A value is required.\");\n            }\n\n            return {\n                code:\"EREQUIRED\",\n                message:message,\n                innerMessage:innerMessage\n            }\n\n        }\n    }\n}\n\n\n\n"]}