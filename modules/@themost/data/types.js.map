{"version":3,"sources":["types.es6"],"names":["SequentialEventEmitter","_","DataAdapter","options","rawConnection","callback","query","values","batch","entity","attribute","fn","name","DataEventArgs","DataContext","db","undefined","Object","defineProperty","get","configurable","enumerable","cb","DataEventListener","e","DateTimeRegex","BooleanTrueRegex","BooleanFalseRegex","NullRegex","UndefinedRegex","IntegerRegex","FloatRegex","DataModelMigration","add","constraints","indexes","remove","change","version","description","appliesTo","model","DataAssociationMapping","obj","cascade","associationType","assign","DataField","nullable","primary","indexed","readonly","expandable","virtual","editable","DataModelEventListener","PrivilegeType","Self","Parent","Item","Global","DataModelPrivilege","DataResultSet","total","skip","records","DataContextEmitter","DataObjectState","Insert","Update","Delete","DataCachingType","None","Always","Conditional","ParserUtils","val","isNil","match","parseInt","types","parsers","parseInteger","parseFloat","Date","parse","res","parseDateTime","setHours","toString"],"mappings":"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","file":"types.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport {SequentialEventEmitter} from '@themost/common/emitter';\nimport {_} from 'lodash';\n\n\n/**\n * @classdesc Represents an abstract data connector to a database\n * <p>\n There are several data adapters for connections to common database engines:\n </p>\n <ul>\n    <li>MOST Web Framework MySQL Adapter for connecting with MySQL Database Server\n    <p>Install the data adapter:<p>\n    <pre class=\"prettyprint\"><code>npm install most-data-mysql</code></pre>\n    <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n    <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"MySQL Data Adapter\", \"invariantName\": \"mysql\", \"type\":\"most-data-mysql\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"mysql\", \"default\":true,\n     \"options\": {\n       \"host\":\"localhost\",\n       \"port\":3306,\n       \"user\":\"user\",\n       \"password\":\"password\",\n       \"database\":\"test\"\n     }\n }\n ...\n ]\n </code></pre>\n </li>\n    <li>MOST Web Framework MSSQL Adapter for connecting with Microsoft SQL Database Server\n <p>Install the data adapter:<p>\n <pre class=\"prettyprint\"><code>npm install most-data-mssql</code></pre>\n <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"MSSQL Data Adapter\", \"invariantName\": \"mssql\", \"type\":\"most-data-mssql\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"mssql\", \"default\":true,\n        \"options\": {\n          \"server\":\"localhost\",\n          \"user\":\"user\",\n          \"password\":\"password\",\n          \"database\":\"test\"\n        }\n    }\n ...\n ]\n </code></pre>\n </li>\n    <li>MOST Web Framework PostgreSQL Adapter for connecting with PostgreSQL Database Server\n <p>Install the data adapter:<p>\n <pre class=\"prettyprint\"><code>npm install most-data-pg</code></pre>\n <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"PostgreSQL Data Adapter\", \"invariantName\": \"postgres\", \"type\":\"most-data-pg\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"postgres\", \"default\":true,\n        \"options\": {\n          \"host\":\"localhost\",\n          \"post\":5432,\n          \"user\":\"user\",\n          \"password\":\"password\",\n          \"database\":\"db\"\n        }\n    }\n ...\n ]\n </code></pre>\n </li>\n    <li>MOST Web Framework Oracle Adapter for connecting with Oracle Database Server\n <p>Install the data adapter:<p>\n <pre class=\"prettyprint\"><code>npm install most-data-oracle</code></pre>\n <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"Oracle Data Adapter\", \"invariantName\": \"oracle\", \"type\":\"most-data-oracle\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"oracle\", \"default\":true,\n        \"options\": {\n          \"host\":\"localhost\",\n          \"port\":1521,\n          \"user\":\"user\",\n          \"password\":\"password\",\n          \"service\":\"orcl\",\n          \"schema\":\"PUBLIC\"\n        }\n    }\n ...\n ]\n </code></pre>\n </li>\n    <li>MOST Web Framework SQLite Adapter for connecting with Sqlite Databases\n <p>Install the data adapter:<p>\n <pre class=\"prettyprint\"><code>npm install most-data-sqlite</code></pre>\n <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"SQLite Data Adapter\", \"invariantName\": \"sqlite\", \"type\":\"most-data-sqlite\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n ...\n { \"name\":\"development\", \"invariantName\":\"sqlite\", \"default\":true,\n        \"options\": {\n            database:\"db/local.db\"\n        }\n    }\n ...\n ]\n </code></pre>\n </li>\n    <li>MOST Web Framework Data Pool Adapter for connection pooling\n <p>Install the data adapter:<p>\n <pre class=\"prettyprint\"><code>npm install most-data-pool</code></pre>\n <p>Append the adapter type in application configuration (app.json#adapterTypes):<p>\n <pre class=\"prettyprint\"><code>\n ...\n \"adapterTypes\": [\n ...\n { \"name\":\"Pool Data Adapter\", \"invariantName\": \"pool\", \"type\":\"most-data-pool\" }\n { \"name\":\"...\", \"invariantName\": \"...\", \"type\":\"...\" }\n ...\n ]\n </code></pre>\n <p>Register an adapter in application configuration (app.json#adapters):<p>\n <pre class=\"prettyprint\"><code>\n adapters: [\n { \"name\":\"development\", \"invariantName\":\"...\", \"default\":false,\n    \"options\": {\n      \"server\":\"localhost\",\n      \"user\":\"user\",\n      \"password\":\"password\",\n      \"database\":\"test\"\n    }\n},\n { \"name\":\"development_with_pool\", \"invariantName\":\"pool\", \"default\":true,\n    \"options\": {\n      \"adapter\":\"development\"\n    }\n}\n ...\n ]\n </code></pre>\n </li>\n </ul>\n * @class\n * @constructor\n * @param {*} options - The database connection options\n * @abstract\n * @property {*} rawConnection - Gets or sets the native database connection\n * @property {*} options - Gets or sets the database connection options\n */\nexport class DataAdapter {\n\n    constructor(options) {\n\n        this.rawConnection=null;\n        this.options = options;\n    }\n\n    /**\n     * Opens the underlying database connection\n     * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    open(callback) {\n        //\n    }\n\n    /**\n     * Closes the underlying database connection\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    close(callback) {\n        //\n    }\n\n    /**\n     * Executes the given query against the underlying database.\n     * @param {string|*} query - A string or a query expression to execute.\n     * @param {*} values - An object which represents the named parameters that are going to used during query parsing\n     * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     */\n    execute(query, values, callback) {\n        //\n    }\n\n    /**\n     * Executes a batch query expression and returns the result.\n     * @param {DataModelBatch} batch - The batch query expression to execute\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     * @deprecated This method is deprecated.\n     */\n    executeBatch(batch, callback) {\n        //\n    }\n\n    /**\n     * Produces a new identity value for the given entity and attribute.\n     * @param {string} entity - A string that represents the target entity name\n     * @param {string} attribute - A string that represents the target attribute name\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     */\n    selectIdentity(entity, attribute, callback) {\n        //\n    }\n\n    /**\n     * Begins a transactional operation and executes the given function\n     * @param {Function} fn - The function to execute\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     */\n    executeInTransaction(fn, callback) {\n        //\n    }\n\n    /**\n     * A helper method for creating a database view if the current data adapter supports views\n     * @param {string} name - A string that represents the name of the view to be created\n     * @param {QueryExpression|*} query - A query expression that represents the database view\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    createView(name, query, callback) {\n        //\n    }\n}\n\n/**\n * @classdesc Represents the event arguments of a data model listener.\n * @class\n * @constructor\n * @property {DataModel|*} model - Represents the underlying model.\n * @property {DataObject|*} target - Represents the underlying data object.\n * @property {Number|*} state - Represents the operation state (Update, Insert, Delete).\n * @property {DataQueryable|*} emitter - Represents the event emitter, normally a DataQueryable object instance.\n * @property {*} query - Represents the underlying query expression. This property may be null.\n */\nexport class DataEventArgs {\n    constructor() {\n        //\n    }\n}\n\n/**\n * @classdesc Represents the main data context.\n * @class\n * @constructor\n */\nexport class DataContext extends SequentialEventEmitter {\n    constructor() {\n        super();\n        /**\n         * Gets the current database adapter\n         * @type {DataAdapter}\n         */\n        this.db = undefined;\n        Object.defineProperty(this, 'db', {\n            get : function() {\n                return null;\n            },\n            configurable : true,\n            enumerable:false });\n    }\n\n    /**\n     * Gets a data model based on the given data context\n     * @param name {string} A string that represents the model to be loaded.\n     * @returns {DataModel}\n     */\n    model(name) {\n        return null;\n    }\n\n    /**\n     * Gets an instance of DataConfiguration class which is associated with this data context\n     * @returns {DataConfiguration}\n     */\n    getConfiguration() {\n        return null;\n    }\n\n    /**\n     * @param cb {Function}\n     */\n    finalize(cb) {\n        //\n    }\n}\n\n/**\n * @classdesc Represents a data model's listener\n * @class\n * @constructor\n * @abstract\n  */\nexport class DataEventListener {\n    /**\n     * Occurs before executing a data operation. The event arguments contain the query that is going to be executed.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    beforeExecute(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs after executing a data operation. The event arguments contain the executed query.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    afterExecute(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs before creating or updating a data object.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    beforeSave(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs after creating or updating a data object.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    afterSave(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs before removing a data object.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     * @returns {DataEventListener}\n     */\n    beforeRemove(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs after removing a data object.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    afterRemove(e, cb) {\n        return this;\n    }\n\n    /**\n     * Occurs after upgrading a data model.\n     * @param {DataEventArgs} e - An object that represents the event arguments passed to this operation.\n     * @param {Function} cb - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    afterUpgrade(e, cb) {\n        return this;\n    }\n}\n\nconst DateTimeRegex = /^(\\d{4})(?:-?W(\\d+)(?:-?(\\d+)D?)?|(?:-(\\d+))?-(\\d+))(?:[T ](\\d+):(\\d+)(?::(\\d+)(?:\\.(\\d+))?)?)?(?:Z(-?\\d*))?$/g;\nconst BooleanTrueRegex = /^true$/ig;\nconst BooleanFalseRegex = /^false$/ig;\nconst NullRegex = /^null$/ig;\nconst UndefinedRegex = /^undefined$/ig;\nconst IntegerRegex =/^[-+]?\\d+$/g;\nconst FloatRegex =/^[+-]?\\d+(\\.\\d+)?$/g;\n\n/**\n * @classdesc Represents a model migration scheme against data adapters\n * @class\n * @constructor\n */\nexport class DataModelMigration {\n\n    constructor() {\n        /**\n         * Gets an array that contains the definition of fields that are going to be added\n         * @type {Array}\n         */\n        this.add = [];\n        /**\n         * Gets an array that contains a collection of constraints which are going to be added\n         * @type {Array}\n         */\n        this.constraints = [];\n        /**\n         * Gets an array that contains a collection of indexes which are going to be added or updated\n         * @type {Array}\n         */\n        this.indexes = [];\n        /**\n         * Gets an array that contains the definition of fields that are going to be deleted\n         * @type {Array}\n         */\n        this.remove = [];\n        /**\n         * Gets an array that contains the definition of fields that are going to be changed\n         * @type {Array}\n         */\n        this.change = [];\n        /**\n         * Gets or sets a string that contains the internal version of this migration. This property cannot be null.\n         * @type {string}\n         */\n        this.version = '0.0';\n        /**\n         * Gets or sets a string that represents a short description of this migration\n         * @type {string}\n         */\n        this.description = null;\n        /**\n         * Gets or sets a string that represents the adapter that is going to be migrated through this operation.\n         * This property cannot be null.\n         */\n        this.appliesTo = null;\n        /**\n         * Gets or sets a string that represents the model that is going to be migrated through this operation.\n         * This property may be null.\n         */\n        this.model = null;\n    }\n\n\n}\n\n/**\n * @classdesc DataAssociationMapping class describes the association between two models.\n * <p>\n *     An association between two models is described in field attributes. For example\n *     model Order may have an association with model Party (Person or Organization) through the field Order.customer:\n * </p>\n <pre class=\"prettyprint\"><code>\n   { \"name\": \"Order\",\n     \"fields\": [\n    ...\n   {\n        \"name\": \"customer\",\n        \"title\": \"Customer\",\n        \"description\": \"Party placing the order.\",\n        \"type\": \"Party\"\n    }\n    ...]\n    }\n </code></pre>\n <p>\n      This association is equivalent with the following DataAssociationMapping instance:\n </p>\n <pre class=\"prettyprint\"><code>\n \"mapping\": {\n    \"cascade\": \"null\",\n    \"associationType\": \"association\",\n    \"select\": [],\n    \"childField\": \"customer\",\n    \"childModel\": \"Order\",\n    \"parentField\": \"id\",\n    \"parentModel\": \"Party\"\n}\n </code></pre>\n  <p>\n The above association mapping was auto-generated from the field definition of Order.customer where the field type (Party)\n actually defines the association between these models.\n </p>\n <p>\n Another example of an association between two models is a many-to-many association. User model has a many-to-many association (for user groups) with Group model:\n </p>\n <pre class=\"prettyprint\"><code>\n { \"name\": \"User\",\n   \"fields\": [\n  ...\n {\n    \"name\": \"groups\",\n    \"title\": \"User Groups\",\n    \"description\": \"A collection of groups where user belongs.\",\n    \"type\": \"Group\",\n    \"expandable\": true,\n    \"mapping\": {\n        \"associationAdapter\": \"GroupMembers\",\n        \"parentModel\": \"Group\",\n        \"parentField\": \"id\",\n        \"childModel\": \"User\",\n        \"childField\": \"id\",\n        \"associationType\": \"junction\",\n        \"cascade\": \"delete\"\n    }\n}\n  ...]\n  }\n </code></pre>\n <p>This association may also be defined in Group model:</p>\n <pre class=\"prettyprint\"><code>\n { \"name\": \"Group\",\n   \"fields\": [\n  ...\n {\n    \"name\": \"members\",\n    \"title\": \"Group Members\",\n    \"description\": \"Contains the collection of group members (users or groups).\",\n    \"type\": \"Account\",\n    \"many\":true\n}\n  ...]\n  }\n </code></pre>\n *\n * @class\n * @property {string} associationAdapter - Gets or sets the association database object\n * @property {string} parentModel - Gets or sets the parent model name\n * @property {string} childModel - Gets or sets the child model name\n * @property {string} parentField - Gets or sets the parent field name\n * @property {string} childField - Gets or sets the child field name\n * @property {string} refersTo - Gets or sets the parent property where this association refers to\n * @property {string} parentLabel - Gets or sets the parent field that is going to be used as label for this association\n * @property {string} cascade - Gets or sets the action that occurs when parent item is going to be deleted (all|none|null|delete). The default value is 'none'.\n * @property {string} associationType - Gets or sets the type of this association (junction|association). The default value is 'association'.\n * @property {string[]} select - Gets or sets an array of fields to select from associated model. If this property is empty then all associated model fields will be selected.\n * @property {*} options - Gets or sets a set of default options which are going to be used while expanding results based on this data association.\n * @param {*=} obj - An object that contains relation mapping attributes\n * @constructor\n */\nfunction DataAssociationMapping(obj) {\n    this.cascade = 'none';\n    this.associationType = 'association';\n    //this.select = [];\n    if (typeof obj === 'object') { _.assign(this, obj); }\n}\n\n\n/**\n * @class\n * @constructor\n * @property {string} name - Gets or sets the internal name of this field.\n * @property {string} property - Gets or sets the property name for this field.\n * @property {string} title - Gets or sets the title of this field.\n * @property {boolean} nullable - Gets or sets a boolean that indicates whether field is nullable or not.\n * @property {string} type - Gets or sets the type of this field.\n * @property {boolean} primary - Gets or sets a boolean that indicates whether field is primary key or not.\n * @property {boolean} many - Gets or sets a boolean that indicates whether field defines an one-to-many relationship between models.\n * @property {boolean} model - Gets or sets the parent model of this field.\n * @property {*} value - Gets or sets the default value of this field.\n * @property {*} calculation - Gets or sets the calculated value of this field.\n * @property {boolean} readonly - Gets or sets a boolean which indicates whether a field is readonly.\n * @property {boolean} editable - Gets or sets a boolean which indicates whether a field is available for edit. The default value is true.\n * @property {DataAssociationMapping} mapping - Get or sets a relation mapping for this field.\n * @property {string} coltype - Gets or sets a string that indicates the data field's column type. This attribute is used in data view definition\n * @property {boolean} expandable - Get or sets whether the current field defines an association mapping and the associated data object(s) must be included while getting data.\n * @property {string} section - Gets or sets the section where the field belongs.\n * @property {boolean} nested - Gets or sets a boolean which indicates whether this field allows object(s) to be nested and updatable during an insert or update operation\n * @property {string} description - Gets or sets a short description for this field.\n * @property {string} help - Gets or sets a short help for this field.\n * @property {string} appearance - Gets or sets the appearance template of this field, if any.\n * @property {{type:string,custom:string,minValue:*,maxValue:*,minLength:number,maxLength:number,pattern:string,patternMessage:string}|*} validation - Gets or sets data validation attributes.\n * @property {*} options - Gets or sets the available options for this field.\n * @property {boolean} virtual - Gets or sets a boolean that indicates whether this field is a view only field or not.\n * @property {boolean} indexed - Gets or sets a boolean which indicates whether this field will be indexed for searching items. The default value is false.\n  */\nexport class DataField {\n    constructor() {\n        this.nullable = true;\n        this.primary = false;\n        this.indexed = false;\n        this.readonly = false;\n        this.expandable = false;\n        this.virtual = false;\n        this.editable = true;\n    }\n}\n\n/**\n * @class\n * @constructor\n * @property {string} name - Gets or sets a short description for this listener\n * @property {string} type - Gets or sets a string which is the path of the module that exports this listener.\n * @property {boolean} disabled - Gets or sets a boolean value that indicates whether this listener is disabled or not. The default value is false.\n * @description\n * <p>\n * A data model uses event listeners as triggers which are automatically executed after data operations.\n * Those listeners are defined in [eventListeners] section of a model's schema.\n * </p>\n * <pre class=\"prettyprint\">\n *<code>\n*     {\n*          ...\n*          \"fields\": [ ... ],\n*          ...\n*          \"eventListeners\": [\n*              { \"name\":\"Update Listener\", \"type\":\"/app/controllers/an-update-listener.js\" },\n*              { \"name\":\"Another Update Listener\", \"type\":\"module-a/lib/listener\" }\n*          ]\n*          ...\n*     }\n *</code>\n * </pre>\n * @example\n * // A simple DataEventListener that sends a message to sales users after new order was arrived.\n * var web = require(\"most-web\");\n exports.afterSave = function(event, callback) {\n    //exit if state is other than [Insert]\n    if (event.state != 1) { return callback() }\n    //initialize web mailer\n    var mm = require(\"most-web-mailer\"), context = event.model.context;\n    //send new order mail template by passing new item data\n    mm.mailer(context).to(\"sales@example.com\")\n        .cc(\"supervisor@example.com\")\n        .subject(\"New Order\")\n        .template(\"new-order\").send(event.target, function(err) {\n        if (err) { return web.common.log(err); }\n        return callback();\n    });\n};\n *\n */\nexport class DataModelEventListener {\n    constructor() {\n        //\n    }\n}\n/**\n * An enumeration of tha available privilege types\n * @enum\n */\nconst PrivilegeType = {\n    /**\n     * Self Privilege (self).\n     * @type {string}\n     */\n    Self: \"self\",\n    /**\n     * Parent Privilege (parent)\n     * @type {string}\n     */\n    Parent: \"parent\",\n    /**\n     * Item Privilege (child)\n     * @type {string}\n     */\n    Item: \"item\",\n    /**\n     * Global Privilege (global)\n     * @type {string}\n     */\n    Global: \"global\"\n};\n\n/**\n * @classdesc Represents a privilege which is defined in a data model and it may be given in users and groups\n * @class\n * @constructor\n * @property {PermissionMask} mask - Gets or sets the set of permissions which may be given with this privilege.\n * @property {PrivilegeType|string} type - Gets or sets the type of this privilege (global|parent|item|self).\n * @property {string} filter - Gets or sets a filter expression which is going to be used for self privileges.\n * The defined set of permissions are automatically assigned if the requested objects fulfill filter criteria.\n * (e.g. read-write permissions for a user's associated person through the following expression:\"user eq me()\")\n * @property {string} account - Gets or sets a wildcard (*) expression for global privileges only.\n * The defined set of permissions are automatically assigned to all users (e.g. read permissions for all users)\n */\nexport class DataModelPrivilege {\n    constructor() {\n        //\n    }\n}\n\n/**\n * @classdesc Represents a query result when this query uses paging parameters.\n * @class\n * @property {number} total - The total number of records\n * @property {number} skip - The number of skipped records\n * @property {Array} records - An array of objects which represents the query results.\n * @constructor\n  */\nexport class DataResultSet {\n    constructor() {\n        this.total = 0;\n        this.skip = 0;\n        this.records = [];\n    }\n}\n\n/**\n * @abstract\n * @constructor\n * @ignore\n */\nexport class DataContextEmitter {\n    constructor() {\n        //\n    }\n    ensureContext() {\n        return null;\n    }\n}\n\n/**\n * An enumeration of the available data object states\n * @enum {number}\n */\nconst DataObjectState = {\n    /**\n     * Insert State (1)\n     */\n    Insert:1,\n    /**\n     * Update State (2)\n     */\n    Update:2,\n    /**\n     * Delete State (4)\n     */\n    Delete:4\n};\n\n/**\n * An enumeration of the available data caching types\n * @enum {string}\n */\nconst DataCachingType = {\n    /**\n     * Data will never be cached (none)\n     */\n    None: 'none',\n    /**\n     * Data will always be cached (always)\n     */\n    Always: 'always',\n    /**\n     * Data will conditionally be cached (conditional)\n     */\n    Conditional: 'conditional'\n};\n\nexport class ParserUtils {\n    constructor() {\n        //\n    }\n    static parseInteger(val) {\n        if (_.isNil(val))\n            return 0;\n        else if (typeof val === 'number')\n            return val;\n        else if (typeof val === 'string') {\n            if (val.match(IntegerRegex) || val.match(FloatRegex)) {\n                return parseInt(val, 10);\n            }\n            else if (val.match(BooleanTrueRegex))\n                return 1;\n            else if (val.match(BooleanFalseRegex))\n                return 0;\n        }\n        else if (typeof val === 'boolean')\n            return val === true ? 1 : 0;\n        else {\n            return parseInt(val) || 0;\n        }\n    }\n\n    static parseCounter(val) {\n        return types.parsers.parseInteger(val);\n    }\n\n    static parseFloat(val) {\n        if (_.isNil(val))\n            return 0;\n        else if (typeof val === 'number')\n            return val;\n        else if (typeof val === 'string') {\n            if (val.match(IntegerRegex) || val.match(FloatRegex)) {\n                return parseFloat(val);\n            }\n            else if (val.match(BooleanTrueRegex))\n                return 1;\n        }\n        else if (typeof val === 'boolean')\n            return val === true ? 1 : 0;\n        else {\n            return parseFloat(val);\n        }\n    }\n\n    static parseNumber(val) {\n        return types.parsers.parseFloat(val);\n    }\n\n    static parseDateTime(val) {\n        if (_.isNil(val))\n            return null;\n        if (val instanceof Date)\n            return val;\n        if (typeof val === 'string') {\n            if (val.match(DateTimeRegex))\n                return new Date(Date.parse(val));\n        }\n        else if (typeof val === 'number') {\n            return new Date(val);\n        }\n        return null;\n    }\n\n    static parseDate(val) {\n        const res = types.parsers.parseDateTime(val);\n        if (res instanceof Date) {\n            res.setHours(0, 0, 0, 0);\n            return res;\n        }\n        return res;\n    }\n\n    static parseBoolean(val) {\n        return (types.parsers.parseInteger(val) !== 0);\n    }\n\n    static parseText(val) {\n        if (_.isNil(val))\n            return val;\n        else if (typeof val === 'string') {\n            return val;\n        }\n        else {\n            return val.toString();\n        }\n    }\n\n}"]}