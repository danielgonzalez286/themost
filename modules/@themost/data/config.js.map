{"version":3,"sources":["config.es6"],"names":["_","sprintf","TraceUtils","path","require","fs","DataConfigurationAuth","DataConfiguration","configPath","join","process","cwd","models","dataTypes","Object","defineProperty","get","isNil","log","defaultDataTypes","key","hasOwnProperty","version","e","code","config","env","adapters","adapterTypes","isArray","forEach","x","invariantName","name","valid","adapterModule","type","createInstance","console","auth","settings","getAuthSettings","er","Error","path_","getModelPath","setModelPath","p","setModelDefinition","data","getModelDefinition","model","hasDataType","self","i","keys","mr","RegExp","length","lastIndex","test","modelPath","existsSync","files","_files","readdirSync","r","concat","finalPath","result","finalName","current","configuration","TypeError"],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport {_} from 'lodash';\nimport sprintf from 'sprintf';\nimport {TraceUtils} from \"@themost/common/utils\";\n\n/**\n * @ignore\n */\nconst path = require(\"path\"),\n    fs = require(\"fs\");\n\n/**\n * @ignore\n * @class\n * @property {string} name\n * @property {string} defaultUserGroup\n * @property {string} unattendedExecutionAccount\n * @property {number} timeout\n * @property {boolean} slidingExpiration\n * @property {string} loginPage\n */\nexport class DataConfigurationAuth {\n    constructor() {\n\n    }\n}\n\n/**\n * @classdesc Holds the configuration of data modeling infrastructure\n * @class\n * @property {DataConfigurationAuth} auth\n *\n */\nexport class DataConfiguration {\n    /**\n     * @constructor\n     * @param {string=} configPath - The root directory of configuration files.\n     */\n    constructor(configPath) {\n\n        configPath = configPath || path.join(process.cwd(),'config');\n\n        /**\n         * Model caching object (e.g. cfg.models.Migration, cfg.models.User etc)\n         * @type {*}\n         * @ignore\n         */\n        this.models = {\n            \"Migration\":{\n                \"name\":\"Migration\", \"title\":\"Data Model Migrations\", \"id\": 14,\n                \"source\":\"migrations\", \"view\":\"migrations\", \"hidden\": true, \"sealed\":true,\n                \"fields\":[\n                    { \"name\":\"id\", \"type\":\"Counter\", \"primary\":true },\n                    { \"name\":\"appliesTo\", \"type\":\"Text\", \"size\":180, \"nullable\":false },\n                    { \"name\":\"model\", \"type\":\"Text\", \"size\":120 },\n                    { \"name\":\"description\", \"type\":\"Text\", \"size\":512},\n                    { \"name\":\"version\", \"type\":\"Text\", \"size\":40, \"nullable\":false }\n                ],\n                \"constraints\":[\n                    { \"type\":\"unique\", \"fields\":[ \"appliesTo\", \"version\" ] }\n                ]\n            }\n        };\n\n        /**\n         * @type {*}\n         * @private\n         */\n        let dataTypes = null;\n        /**\n         * Gets or sets an array of items that indicates all the data types that is going to be used in data modeling.\n         * @type {*}\n         */\n        Object.defineProperty(this, 'dataTypes', {\n            get: function()\n            {\n                if (dataTypes)\n                    return dataTypes;\n                //get data types from configuration file\n                try {\n                    dataTypes = require(path.join(configPath, 'dataTypes.json'));\n                    if (_.isNil(dataTypes)) {\n                        TraceUtils.log('Data: Application data types are empty. The default data types will be loaded instead.');\n                        dataTypes = require('./resources/dataTypes.json');\n                    }\n                    else {\n                        //append default data types which are not defined in application data types\n                        const defaultDataTypes = require('./resources/dataTypes.json');\n                        //enumerate default data types and replace or append application specific data types\n                        for (const key in defaultDataTypes) {\n                            if (dataTypes.hasOwnProperty(key)) {\n                                if (dataTypes[key].version) {\n                                    if (dataTypes[key].version <= defaultDataTypes[key].version) {\n                                        //replace data type due to lower version\n                                        dataTypes[key] = defaultDataTypes[key];\n                                    }\n                                }\n                                else {\n                                    //replace data type due to invalid version\n                                    dataTypes[key] = defaultDataTypes[key];\n                                }\n                            }\n                            else {\n                                //append data type\n                                dataTypes[key] = defaultDataTypes[key];\n                            }\n                        }\n                    }\n                }\n                catch(e) {\n                    if (e.code === 'MODULE_NOT_FOUND') {\n                        TraceUtils.log('Data: Application specific data types are missing. The default data types will be loaded instead.');\n                    }\n                    else {\n                        TraceUtils.log('Data: An error occured while loading application data types.');\n                        throw e;\n                    }\n                    dataTypes = require('./resources/dataTypes.json');\n                }\n                return dataTypes;\n            }\n        });\n\n        //get application adapter types, if any\n        let config;\n        try {\n            const env = process.env['NODE_ENV'] || 'production';\n            config = require(path.join(configPath, 'app.' + env + '.json'));\n        }\n        catch (e) {\n            if (e.code === 'MODULE_NOT_FOUND') {\n                TraceUtils.log('Data: The environment specific configuration cannot be found or is inaccesible.');\n                try {\n                    config = require(path.join(configPath, 'app.json'));\n                }\n                catch(e) {\n                    if (e.code === 'MODULE_NOT_FOUND') {\n                        TraceUtils.log('Data: The default application configuration cannot be found or is inaccesible.');\n                    }\n                    else {\n                        TraceUtils.log('Data: An error occured while trying to open default application configuration.');\n                        TraceUtils.log(e);\n                    }\n                    config = { adapters:[], adapterTypes:[]  };\n                }\n            }\n            else {\n                TraceUtils.log('Data: An error occured while trying to open application configuration.');\n                TraceUtils.log(e);\n                config = { adapters:[], adapterTypes:[]  };\n            }\n        }\n\n        /**\n         * @type {Array}\n         * @private\n         */\n        let adapters;\n        Object.defineProperty(this, 'adapters', {\n            get: function()\n            {\n                if (adapters)\n                    return adapters;\n                /**\n                 * get data types from configuration file\n                 * @property {Array} adapters\n                 * @type {*}\n                 */\n                adapters = config.adapters || [];\n                return adapters;\n            }\n        });\n\n        const adapterTypes = { };\n\n        if (config.adapterTypes) {\n            if (_.isArray(config.adapterTypes)) {\n                config.adapterTypes.forEach(function(x) {\n                    //first of all validate module\n                    x.invariantName = x.invariantName || 'unknown';\n                    x.name = x.name || 'Unknown Data Adapter';\n                    let valid = false, adapterModule;\n                    if (x.type) {\n                        try {\n                            adapterModule = require(x.type);\n                            if (typeof adapterModule.createInstance === 'function') {\n                                valid = true;\n                            }\n                            else {\n                                //adapter type does not export a createInstance(options) function\n                                console.log(sprintf.sprintf(\"The specified data adapter type (%s) does not have the appropriate constructor. Adapter type cannot be loaded.\", x.invariantName));\n                            }\n                        }\n                        catch(e) {\n                            //catch error\n                            console.log(e);\n                            //and log a specific error for this adapter type\n                            console.log(sprintf.sprintf(\"The specified data adapter type (%s) cannot be instantiated. Adapter type cannot be loaded.\", x.invariantName));\n                        }\n                        if (valid) {\n                            //register adapter\n                            adapterTypes[x.invariantName] = {\n                                invariantName:x.invariantName,\n                                name: x.name,\n                                createInstance:adapterModule.createInstance\n                            };\n                        }\n                    }\n                    else {\n                        console.log(sprintf.sprintf(\"The specified data adapter type (%s) does not have a type defined. Adapter type cannot be loaded.\", x.invariantName));\n                    }\n                });\n            }\n        }\n\n        Object.defineProperty(this, 'adapterTypes', {\n            get: function()\n            {\n                return adapterTypes;\n            }\n        });\n\n        let auth;\n        Object.defineProperty(this, 'auth', {\n            get: function()\n            {\n                try {\n                    if (auth) { return auth; }\n                    if (typeof config.settings === 'undefined' || config.settings== null) {\n                        auth = config.auth || {};\n                        return auth;\n                    }\n                    auth = config.settings.auth || {};\n                    return auth;\n                }\n                catch(e) {\n                    console.log('An error occured while trying to load auth configuration');\n                    auth = {};\n                    return auth;\n                }\n            }\n        });\n\n        //ensure authentication settings\n        config.settings = config.settings || { };\n        config.settings.auth = config.settings.auth || { };\n        this.getAuthSettings = function() {\n            try {\n                return config.settings.auth;\n            }\n            catch(e) {\n                const er = new Error('An error occured while trying to load auth configuration');\n                er.code = \"ECONF\";\n                throw er;\n            }\n        };\n        \n        let path_ = path.join(configPath,'models');\n\n        /**\n         * Gets a string which represents the path where schemas exist. The default location is the config/models folder. \n         * @returns {string}\n         */\n        this.getModelPath = function() {\n            return path_;\n        };\n        /**\n         * Sets a string which represents the path where schemas exist.\n         * @param p\n         * @returns {DataConfiguration}\n         */\n        this.setModelPath = function(p) {\n            path_ = p;   \n            return this;\n        };\n        /**\n         * Sets a data model definition in application storage.\n         * Use this method in order to override default model loading process.\n         * @param {*} data - A generic object which represents a model definition\n         * @returns {DataConfiguration}\n         * @example\n         var most = require(\"most-data\");\n         most.cfg.getCurrent().setModelDefinition({\n            \"name\":\"UserColor\",\n            \"version\":\"1.1\",\n            \"title\":\"User Colors\",\n            \"fields\":[\n                { \"name\": \"id\", \"title\": \"Id\", \"type\": \"Counter\", \"nullable\": false, \"primary\": true },\n                { \"name\": \"user\", \"title\": \"User\", \"type\": \"User\", \"nullable\": false },\n                { \"name\": \"color\", \"title\": \"Color\", \"type\": \"Text\", \"nullable\": false, \"size\":12 },\n                { \"name\": \"tag\", \"title\": \"Tag\", \"type\": \"Text\", \"nullable\": false, \"size\":24 }\n                ],\n            \"constraints\":[\n                {\"type\":\"unique\", \"fields\": [ \"user\" ]}\n            ],\n            \"privileges\":[\n                { \"mask\":15, \"type\":\"self\",\"filter\":\"id eq me()\" }\n                ]\n        });\n         */\n        this.setModelDefinition = function(data) {\n            if (_.isNil(data)) {\n                throw new Error(\"Invalid model definition. Expected object.\")\n            }\n            if (typeof data === 'object') {\n                if (typeof data.name === 'undefined' || data.name === null) {\n                    throw new Error(\"Invalid model definition. Expected model name.\")\n                }\n                this.models[data.name] = data;\n            }\n          return this;\n        };\n        /**\n         * Gets a native object which represents the definition of the model with the given name.\n         * @param {string} name\n         * @returns {DataModel|undefined}\n         */\n        this.getModelDefinition = function(name) {\n            if (_.isNil(name)) {\n                return;\n            }\n            if (typeof name === 'string') {\n                return this.model(name);\n            }\n        };\n\n        /**\n         * Gets a boolean which indicates whether the specified data type is defined in data types collection or not.\n         * @param name\n         * @returns {boolean}\n         */\n        this.hasDataType = function(name) {\n            if (_.isNil(name)) {\n                return false;\n            }\n            if (typeof name !== 'string') {\n                return false;\n            }\n            return this.dataTypes.hasOwnProperty(name);\n        }\n\n    }\n\n    /**\n     * @returns {*}\n     * @param name {string}\n     */\n    model(name) {\n        const self = this;\n        let i;\n        if (typeof name !== 'string')\n            return null;\n        //first of all try to find if model definition is already in cache\n        if (typeof this.models[name] !== 'undefined')\n        //and return it\n            return this.models[name];\n        //otherwise try to find model with case insensitivity\n        const keys = Object.keys(this.models), mr = new RegExp('^' + name + '$','i');\n        for (i = 0; i < keys.length; i++) {\n            mr.lastIndex=0;\n            if (mr.test(keys[i]))\n                return this.models[keys[i]];\n        }\n        //otherwise open definition file\n        const modelPath = this.getModelPath();\n        if (!fs.existsSync(modelPath)) {\n            //models folder does not exist\n            //so set model to null\n            this.models[name]=null;\n            //and return\n            return null;\n        }\n        //read files from models directory\n        let files;\n        //store file list in a private variable\n        if (typeof this._files === 'undefined') { this._files = fs.readdirSync(modelPath); }\n        //and finally get this list of file\n        files = this._files;\n        if (files.length==0)\n            return null;\n        const r = new RegExp('^' + name.concat('.json') + '$','i');\n        for (i = 0; i < files.length; i++) {\n            r.lastIndex=0;\n            if (r.test(files[i])) {\n                //build model file path\n                const finalPath = path.join(modelPath, files[i]);\n                //get model\n                const result = require(finalPath), finalName = result.name;\n                //cache model definition\n                self.models[finalName] = result;\n                //and finally return this definition\n                return result;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the current data configuration\n     * @returns DataConfiguration - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        return DataConfiguration.current;\n    }\n    /**\n     * Sets the current data configuration\n     * @param {DataConfiguration} configuration\n     * @returns DataConfiguration - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static setCurrent(configuration) {\n        if (configuration instanceof DataConfiguration) {\n            DataConfiguration.current = configuration;\n            return DataConfiguration.current;\n        }\n        throw new TypeError('Invalid argument. Expected an instance of DataConfiguration class.');\n    }\n\n}\n/**\n * Gets the current configuration\n * @type {DataConfiguration}\n */\nDataConfiguration.current = new DataConfiguration();\n\n"]}