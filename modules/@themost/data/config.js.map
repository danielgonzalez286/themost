{"version":3,"sources":["config.es6"],"names":["_","sprintf","TraceUtils","PathUtils","Args","AbstractClassError","AbstractMethodError","DataConfigurationAuth","configurationProperty","Symbol","ConfigurationStrategy","config","check","new","target","DataConfiguration","notNull","strategiesProperty","configPathProperty","dataTypesProperty","configPath","join","process","cwd","require","useStrategy","SchemaLoaderStrategy","DefaultSchemaLoaderStrategy","env","err","code","log","error","adapters","adapterTypes","Object","defineProperty","get","isArray","forEach","x","invariantName","name","valid","adapterModule","type","createInstance","auth","settings","getAuthSettings","e","er","Error","isNil","dataTypes","hasOwnProperty","schemaLoader","getStrategy","getModelDefinition","data","setModelDefinition","configStrategyCtor","strategyCtor","notFunction","current","configuration","hasStrategy","TypeError","modelsProperty","Map","notString","result","iterator","keys","keyIt","next","done","value","toLowerCase","set","filesProperty","modelPathProperty","getConfigurationPath","p","self","getModelDefinitionSuper","i","getConfiguration","hasDataType","modelDefinition","bind","isObject","modelPath","getModelPath","nativeFsModule","fs","readdirSync","concat","files","length","r","RegExp","lastIndex","test","finalPath","finalName"],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport sprintf from 'sprintf';\nimport {TraceUtils,PathUtils} from \"@themost/common/utils\";\nimport {Args} from \"@themost/common/utils\";\nimport {AbstractClassError, AbstractMethodError} from \"@themost/common/errors\";\n\n\n/**\n * @ignore\n * @class\n * @property {string} name\n * @property {string} defaultUserGroup\n * @property {string} unattendedExecutionAccount\n * @property {number} timeout\n * @property {boolean} slidingExpiration\n * @property {string} loginPage\n */\nexport class DataConfigurationAuth {\n    constructor() {\n\n    }\n}\n\nconst configurationProperty = Symbol('configuration');\n\n/**\n * @class\n */\nexport class ConfigurationStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        Args.check(new.target !== DataConfiguration, new AbstractClassError());\n        Args.notNull(config, 'Configuration');\n        this[configurationProperty] = config;\n    }\n\n    /**\n     *\n     * @returns {DataConfiguration}\n     */\n    getConfiguration() {\n        return this[configurationProperty];\n    }\n\n}\n\nconst strategiesProperty = Symbol('strategies');\nconst configPathProperty = Symbol('configurationPath');\nconst dataTypesProperty = Symbol('dataTypes');\n\n/**\n * @classdesc Holds the configuration of data modeling infrastructure\n * @class\n * @property {DataConfigurationAuth} auth\n *\n */\nexport class DataConfiguration {\n    /**\n     * @constructor\n     * @param {string=} configPath - The root directory of configuration files.\n     */\n    constructor(configPath) {\n\n        this[strategiesProperty] = { };\n        this[configPathProperty] = configPath || PathUtils.join(process.cwd(),'config');\n        this[dataTypesProperty] = require('./resources/dataTypes.json');\n        this.useStrategy(SchemaLoaderStrategy, DefaultSchemaLoaderStrategy);\n\n        //get application adapter types, if any\n        let config;\n        try {\n            const env = process.env['NODE_ENV'] || 'production';\n            config = require(PathUtils.join(this[configPathProperty], 'app.' + env + '.json'));\n        }\n        catch (err) {\n            if (err.code === 'MODULE_NOT_FOUND') {\n                TraceUtils.log('Data: The environment specific configuration cannot be found or is inaccesible.');\n                try {\n                    config = require(PathUtils.join(this[configPathProperty], 'app.json'));\n                }\n                catch(err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        TraceUtils.log('Data: The default application configuration cannot be found or is inaccesible.');\n                    }\n                    else {\n                        TraceUtils.error('Data: An error occured while trying to open default application configuration.');\n                        TraceUtils.error(err);\n                    }\n                    config = { adapters:[], adapterTypes:[]  };\n                }\n            }\n            else {\n                TraceUtils.error('Data: An error occured while trying to open application configuration.');\n                TraceUtils.error(err);\n                config = { adapters:[], adapterTypes:[]  };\n            }\n        }\n\n        /**\n         * @type {Array}\n         * @private\n         */\n        let adapters;\n        Object.defineProperty(this, 'adapters', {\n            get: function()\n            {\n                if (adapters)\n                    return adapters;\n                /**\n                 * get data types from configuration file\n                 * @property {Array} adapters\n                 * @type {*}\n                 */\n                adapters = config.adapters || [];\n                return adapters;\n            }\n        });\n\n        const adapterTypes = { };\n\n        if (config.adapterTypes) {\n            if (_.isArray(config.adapterTypes)) {\n                config.adapterTypes.forEach(function(x) {\n                    //first of all validate module\n                    x.invariantName = x.invariantName || 'unknown';\n                    x.name = x.name || 'Unknown Data Adapter';\n                    let valid = false, adapterModule;\n                    if (x.type) {\n                        try {\n                            adapterModule = require(x.type);\n                            if (typeof adapterModule.createInstance === 'function') {\n                                valid = true;\n                            }\n                            else {\n                                //adapter type does not export a createInstance(options) function\n                                TraceUtils.log(sprintf.sprintf(\"The specified data adapter type (%s) does not have the appropriate constructor. Adapter type cannot be loaded.\", x.invariantName));\n                            }\n                        }\n                        catch(err) {\n                            //catch error\n                            TraceUtils.error(err);\n                            //and log a specific error for this adapter type\n                            TraceUtils.log(sprintf.sprintf(\"The specified data adapter type (%s) cannot be instantiated. Adapter type cannot be loaded.\", x.invariantName));\n                        }\n                        if (valid) {\n                            //register adapter\n                            adapterTypes[x.invariantName] = {\n                                invariantName:x.invariantName,\n                                name: x.name,\n                                createInstance:adapterModule.createInstance\n                            };\n                        }\n                    }\n                    else {\n                        TraceUtils.log(sprintf.sprintf(\"The specified data adapter type (%s) does not have a type defined. Adapter type cannot be loaded.\", x.invariantName));\n                    }\n                });\n            }\n        }\n\n        Object.defineProperty(this, 'adapterTypes', {\n            get: function()\n            {\n                return adapterTypes;\n            }\n        });\n\n        let auth;\n        Object.defineProperty(this, 'auth', {\n            get: function()\n            {\n                try {\n                    if (auth) { return auth; }\n                    if (typeof config.settings === 'undefined' || config.settings== null) {\n                        auth = config.auth || {};\n                        return auth;\n                    }\n                    auth = config.settings.auth || {};\n                    return auth;\n                }\n                catch(err) {\n                    TraceUtils.error('An error occured while trying to load auth configuration');\n                    TraceUtils.error(err);\n                    auth = {};\n                    return auth;\n                }\n            }\n        });\n\n        //ensure authentication settings\n        config.settings = config.settings || { };\n        config.settings.auth = config.settings.auth || { };\n        this.getAuthSettings = function() {\n            try {\n                return config.settings.auth;\n            }\n            catch(e) {\n                const er = new Error('An error occured while trying to load auth configuration');\n                er.code = \"ECONF\";\n                throw er;\n            }\n        };\n\n    }\n\n    /**\n     * Returns the collection of defined data types (e.g. Integer, Float, Language etc)\n     * @returns {*}\n     */\n    get dataTypes() {\n        return this[dataTypesProperty];\n    }\n    /**\n     * Gets a boolean which indicates whether the specified data type is defined in data types collection or not.\n     * @param name\n     * @returns {boolean}\n     */\n    hasDataType(name) {\n        if (_.isNil(name)) {\n            return false;\n        }\n        if (typeof name !== 'string') {\n            return false;\n        }\n        return this.dataTypes.hasOwnProperty(name);\n    }\n\n    /**\n     * Gets the root configuration path\n     * @returns {string}\n     */\n    getConfigurationPath() {\n        return this[configPathProperty];\n    }\n\n    /**\n     * Gets a native object which represents the definition of the model with the given name.\n     * @param {string} name\n     * @returns {DataModel|undefined}\n     */\n    getModelDefinition(name) {\n        /**\n         * @type {SchemaLoaderStrategy}\n         */\n        const schemaLoader = this.getStrategy(SchemaLoaderStrategy);\n        return schemaLoader.getModelDefinition(name);\n    };\n\n    /**\n     * Sets a data model definition in application storage.\n     * Use this method in order to override default model loading process.\n     * @param {*} data - A generic object which represents a model definition\n     * @returns {DataConfiguration}\n     * @example\n     var most = require(\"most-data\");\n     most.cfg.getCurrent().setModelDefinition({\n            \"name\":\"UserColor\",\n            \"version\":\"1.1\",\n            \"title\":\"User Colors\",\n            \"fields\":[\n                { \"name\": \"id\", \"title\": \"Id\", \"type\": \"Counter\", \"nullable\": false, \"primary\": true },\n                { \"name\": \"user\", \"title\": \"User\", \"type\": \"User\", \"nullable\": false },\n                { \"name\": \"color\", \"title\": \"Color\", \"type\": \"Text\", \"nullable\": false, \"size\":12 },\n                { \"name\": \"tag\", \"title\": \"Tag\", \"type\": \"Text\", \"nullable\": false, \"size\":24 }\n                ],\n            \"constraints\":[\n                {\"type\":\"unique\", \"fields\": [ \"user\" ]}\n            ],\n            \"privileges\":[\n                { \"mask\":15, \"type\":\"self\",\"filter\":\"id eq me()\" }\n                ]\n        });\n     */\n    setModelDefinition(data) {\n        /**\n         * @type {SchemaLoaderStrategy}\n         */\n        const schemaLoader = this.getStrategy(SchemaLoaderStrategy);\n        schemaLoader.setModelDefinition(data);\n        return this;\n    };\n\n    /**\n     * Register a configuration strategy\n     * @param {Function} configStrategyCtor\n     * @param {Function} strategyCtor\n     * @returns DataConfiguration\n     */\n    useStrategy(configStrategyCtor, strategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        Args.notFunction(strategyCtor,\"Strategy constructor\");\n        this[strategiesProperty][`${configStrategyCtor.name}`] = new strategyCtor(this);\n        return this;\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function} configStrategyCtor\n     */\n    getStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        return this[strategiesProperty][`${configStrategyCtor.name}`];\n    }\n\n    /**\n     * Gets a configuration strategy\n     * @param {Function} configStrategyCtor\n     */\n    hasStrategy(configStrategyCtor) {\n        Args.notFunction(configStrategyCtor,\"Configuration strategy constructor\");\n        return typeof this[strategiesProperty][`${configStrategyCtor.name}`] !== 'undefined';\n    }\n\n    /**\n     * @returns {*}\n     * @param name {string}\n     */\n    model(name) {\n        return this.getModelDefinition(name);\n    }\n    /**\n     * Gets the current data configuration\n     * @returns DataConfiguration - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        return DataConfiguration.current;\n    }\n    /**\n     * Sets the current data configuration\n     * @param {DataConfiguration} configuration\n     * @returns DataConfiguration - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static setCurrent(configuration) {\n        if (configuration instanceof DataConfiguration) {\n            DataConfiguration.current = configuration;\n            if (!configuration.hasStrategy(SchemaLoaderStrategy)) {\n                configuration.useStrategy(SchemaLoaderStrategy, DefaultSchemaLoaderStrategy);\n            }\n            return DataConfiguration.current;\n        }\n        throw new TypeError('Invalid argument. Expected an instance of DataConfiguration class.');\n    }\n\n}\n\n\nconst modelsProperty = Symbol('models');\n\nexport class SchemaLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        super(config);\n        this[modelsProperty] = new Map();\n        this.setModelDefinition({\n            \"name\":\"Migration\", \"title\":\"Data Model Migrations\", \"id\": 14,\n            \"source\":\"migrations\", \"view\":\"migrations\", \"hidden\": true, \"sealed\":true,\n            \"fields\":[\n                { \"name\":\"id\", \"type\":\"Counter\", \"primary\":true },\n                { \"name\":\"appliesTo\", \"type\":\"Text\", \"size\":180, \"nullable\":false },\n                { \"name\":\"model\", \"type\":\"Text\", \"size\":120 },\n                { \"name\":\"description\", \"type\":\"Text\", \"size\":512},\n                { \"name\":\"version\", \"type\":\"Text\", \"size\":40, \"nullable\":false }\n            ],\n            \"constraints\":[\n                { \"type\":\"unique\", \"fields\":[ \"appliesTo\", \"version\" ] }\n            ]\n        });\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {*}\n     */\n    getModelDefinition(name) {\n        Args.notString(name,'Model name');\n        let result = this[modelsProperty].get(name);\n        if (typeof result !== 'undefined') {\n            return result;\n        }\n        //case insensitive search\n        const iterator = this[modelsProperty].keys();\n        let keyIt = iterator.next();\n        while(!keyIt.done) {\n            if ((typeof keyIt.value === 'string') && (keyIt.value.toLowerCase() === name.toLowerCase())) {\n                return this[modelsProperty].get(keyIt.value);\n            }\n            keyIt = iterator.next();\n        }\n    }\n\n    /**\n     *\n     * @param {*} data\n     * @returns {SchemaLoaderStrategy}\n     */\n    setModelDefinition(data) {\n        Args.notNull(data,'Model definition');\n        Args.notString(data.name,'Model name');\n        this[modelsProperty].set(data.name,data);\n        return this;\n    }\n\n}\n\nconst filesProperty = Symbol('files');\nconst modelPathProperty = Symbol('modelPath');\n\nexport class DefaultSchemaLoaderStrategy extends SchemaLoaderStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        super(config);\n        this[modelPathProperty] = PathUtils.join(config.getConfigurationPath(), 'models');\n    }\n\n    /**\n     * Gets a string which represents the directory which contains model definitions.\n     * @returns {*}\n     */\n    getModelPath() {\n        return this[modelPathProperty];\n    }\n\n    /**\n     * Sets the directory of model definitions.\n     * @param {string} p\n     * @returns {DefaultSchemaLoaderStrategy}\n     */\n    setModelPath(p) {\n        this[modelPathProperty] = p;\n        return this;\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {*}\n     */\n    getModelDefinition(name) {\n        const self = this,\n            getModelDefinitionSuper = super.getModelDefinition;\n        let i;\n        if (typeof name !== 'string')\n            return;\n        //exclude registered data types\n        if (this.getConfiguration().hasDataType(name)) {\n            return;\n        }\n        let modelDefinition = getModelDefinitionSuper.bind(this)(name);\n        //first of all try to find if model definition is already in cache\n        if (_.isObject(modelDefinition)) {\n            //and return it//and return it\n            return modelDefinition;\n        }\n        //otherwise open definition file\n        const modelPath = this.getModelPath();\n        //read files from models directory\n        //store file list in a private variable\n        if (typeof this[filesProperty] === 'undefined') {\n            const nativeFsModule = 'fs';\n            const fs = require(nativeFsModule);\n            if (typeof fs.readdirSync === 'function') {\n                this[filesProperty] = fs.readdirSync(modelPath);\n            }\n            else {\n                //try load model definition\n                try {\n                    modelDefinition = require(PathUtils.join(modelPath, name.concat('json')));\n                    this.setModelDefinition(modelDefinition);\n                }\n                catch(err) {\n                    //do nothing (log error)\n                    TraceUtils.error('An error occurred while loading definition for model %s.', name);\n                    TraceUtils.error(err);\n                }\n            }\n        }\n        //and finally get this list of file\n        const files = this[filesProperty];\n        if (files.length==0)\n            return;\n        const r = new RegExp('^' + name.concat('.json') + '$','i');\n        for (i = 0; i < files.length; i++) {\n            r.lastIndex=0;\n            if (r.test(files[i])) {\n                //build model file path\n                const finalPath = PathUtils.join(modelPath, files[i]);\n                //get model\n                const result = require(finalPath), finalName = result.name;\n                //set definition\n                this.setModelDefinition(result);\n                //and finally return this definition\n                return result;\n            }\n        }\n    }\n}\n\n/**\n * Gets the current configuration\n * @type {DataConfiguration}\n */\nDataConfiguration.current = new DataConfiguration();\n"]}