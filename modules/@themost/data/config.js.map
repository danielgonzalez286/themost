{"version":3,"sources":["config.es6"],"names":["_","TraceUtils","PathUtils","Args","RandomUtils","AbstractClassError","AbstractMethodError","ConfigurationStrategy","ConfigurationBase","AuthSettings","name","defaultUserGroup","unattendedExecutionAccount","randomHex","timeout","slidingExpiration","loginPage","dataTypesProperty","Symbol","adapterTypesProperty","DataConfigurationStrategy","config","require","hasStrategy","SchemaLoaderStrategy","useStrategy","DefaultSchemaLoaderStrategy","ModelClassLoaderStrategy","DefaultModelClassLoaderStrategy","getConfiguration","hasSourceAt","setSourceAt","configAdapterTypes","getSourceAt","forEach","x","invariantName","valid","adapterModule","type","createInstance","log","err","error","isNil","dataTypes","hasOwnProperty","schemaLoader","getStrategy","getModelDefinition","data","setModelDefinition","configuration","getCurrent","modelsProperty","Map","notString","result","get","iterator","keys","keyIt","next","done","value","toLowerCase","notNull","set","filesProperty","modelPathProperty","join","getConfigurationPath","p","self","getModelDefinitionSuper","i","hasDataType","modelDefinition","bind","isObject","modelPath","getModelPath","nativeFsModule","fs","readdirSync","concat","files","length","r","RegExp","lastIndex","test","finalPath","finalName","model","DataObjectClass","isFunction","classPath","getExecutionPath","code","dasherize","DataObject","resolve","base"],"mappings":"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","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport {TraceUtils,PathUtils} from \"@themost/common/utils\";\nimport {Args} from \"@themost/common/utils\";\nimport {AbstractClassError, AbstractMethodError} from \"@themost/common/errors\";\nimport {ConfigurationStrategy, ConfigurationBase} from \"@themost/common/config\";\nimport {RandomUtils} from \"@themost/common/utils\";\n\n\n/**\n * @ignore\n * @class\n * @property {string} name\n * @property {string} defaultUserGroup\n * @property {string} unattendedExecutionAccount\n * @property {number} timeout\n * @property {boolean} slidingExpiration\n * @property {string} loginPage\n */\nexport class AuthSettings {\n    constructor() {\n        this.name = '.MAUTH';\n        this.defaultUserGroup = 'Users';\n        this.unattendedExecutionAccount = RandomUtils.randomHex(16);\n        this.timeout = 480;\n        this.slidingExpiration = false;\n        this.loginPage = '/login';\n    }\n}\n\nconst dataTypesProperty = Symbol('dataTypes');\nconst adapterTypesProperty =  Symbol('adapterTypes');\n\n/**\n * @classdesc Holds the configuration of data modeling infrastructure\n * @class\n * @property {DataConfigurationAuth} auth\n *\n */\nexport class DataConfigurationStrategy extends ConfigurationStrategy {\n    /**\n     * @constructor\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[dataTypesProperty] = require('./resources/dataTypes.json');\n\n        //register other strategies\n        if (!config.hasStrategy(SchemaLoaderStrategy)) {\n            config.useStrategy(SchemaLoaderStrategy, DefaultSchemaLoaderStrategy);\n        }\n        if (!config.hasStrategy(ModelClassLoaderStrategy)) {\n            config.useStrategy(ModelClassLoaderStrategy, DefaultModelClassLoaderStrategy);\n        }\n\n        if (!this.getConfiguration().hasSourceAt('adapters')) {\n            this.getConfiguration().setSourceAt('adapters',[]);\n        }\n\n        if (!this.getConfiguration().hasSourceAt('adapterTypes')) {\n            this.getConfiguration().setSourceAt('adapterTypes',[]);\n        }\n\n        if (!this.getConfiguration().hasSourceAt('settings/auth')) {\n            this.getConfiguration().setSourceAt('settings/auth', new AuthSettings());\n        }\n\n        const configAdapterTypes = this.getConfiguration().getSourceAt('adapterTypes');\n        this[adapterTypesProperty] = {};\n        //configure adapter types\n        _.forEach(configAdapterTypes, function(x) {\n            //first of all validate module\n            x.invariantName = x.invariantName || 'unknown';\n            x.name = x.name || 'Unknown Data Adapter';\n            let valid = false, adapterModule;\n            if (x.type) {\n                try {\n                    adapterModule = require(x.type);\n                    if (typeof adapterModule.createInstance === 'function') {\n                        valid = true;\n                    }\n                    else {\n                        //adapter type does not export a createInstance(options) function\n                        TraceUtils.log(\"The specified data adapter type (%s) does not have the appropriate constructor. Adapter type cannot be loaded.\", x.invariantName);\n                    }\n                }\n                catch(err) {\n                    //catch error\n                    TraceUtils.error(err);\n                    //and log a specific error for this adapter type\n                    TraceUtils.log(\"The specified data adapter type (%s) cannot be instantiated. Adapter type cannot be loaded.\", x.invariantName);\n                }\n                if (valid) {\n                    //register adapter\n                    this[adapterTypesProperty][x.invariantName] = {\n                        invariantName:x.invariantName,\n                        name: x.name,\n                        createInstance:adapterModule.createInstance\n                    };\n                }\n            }\n            else {\n                TraceUtils.log(\"The specified data adapter type (%s) does not have a type defined. Adapter type cannot be loaded.\", x.invariantName);\n            }\n        });\n    }\n\n    /**\n     * @returns {AuthSettings}\n     */\n    getAuthSettings() {\n        this.getConfiguration().getSourceAt('settings/auth');\n    }\n\n    /**\n     * @returns {Array}\n     */\n    get adapters() {\n        this.getConfiguration().getSourceAt('adapters');\n    }\n\n    /**\n     * @returns {*}\n     */\n    get adapterTypes() {\n        return this[adapterTypesProperty];\n    }\n\n    /**\n     * @param {string} invariantName\n     * @returns {*}\n     */\n    getAdapterType(invariantName) {\n        return this[adapterTypesProperty][invariantName];\n    }\n\n    /**\n     * Returns the collection of defined data types (e.g. Integer, Float, Language etc)\n     * @returns {*}\n     */\n    get dataTypes() {\n        return this[dataTypesProperty];\n    }\n\n    /**\n     * Gets a boolean which indicates whether the specified data type is defined in data types collection or not.\n     * @param name\n     * @returns {boolean}\n     */\n    hasDataType(name) {\n        if (_.isNil(name)) {\n            return false;\n        }\n        if (typeof name !== 'string') {\n            return false;\n        }\n        return this.dataTypes.hasOwnProperty(name);\n    }\n\n    /**\n     * Gets a native object which represents the definition of the model with the given name.\n     * @param {string} name\n     * @returns {DataModel|undefined}\n     */\n    getModelDefinition(name) {\n        /**\n         * @type {SchemaLoaderStrategy}\n         */\n        const schemaLoader = this.getConfiguration().getStrategy(SchemaLoaderStrategy);\n        return schemaLoader.getModelDefinition(name);\n    };\n\n    /**\n     * Sets a data model definition in application storage.\n     * Use this method in order to override default model loading process.\n     * @param {*} data - A generic object which represents a model definition\n     * @returns {DataConfiguration}\n     * @example\n     var most = require(\"most-data\");\n     most.cfg.getCurrent().setModelDefinition({\n            \"name\":\"UserColor\",\n            \"version\":\"1.1\",\n            \"title\":\"User Colors\",\n            \"fields\":[\n                { \"name\": \"id\", \"title\": \"Id\", \"type\": \"Counter\", \"nullable\": false, \"primary\": true },\n                { \"name\": \"user\", \"title\": \"User\", \"type\": \"User\", \"nullable\": false },\n                { \"name\": \"color\", \"title\": \"Color\", \"type\": \"Text\", \"nullable\": false, \"size\":12 },\n                { \"name\": \"tag\", \"title\": \"Tag\", \"type\": \"Text\", \"nullable\": false, \"size\":24 }\n                ],\n            \"constraints\":[\n                {\"type\":\"unique\", \"fields\": [ \"user\" ]}\n            ],\n            \"privileges\":[\n                { \"mask\":15, \"type\":\"self\",\"filter\":\"id eq me()\" }\n                ]\n        });\n     */\n    setModelDefinition(data) {\n        /**\n         * @type {SchemaLoaderStrategy}\n         */\n        const schemaLoader = this.getConfiguration().getStrategy(SchemaLoaderStrategy);\n        schemaLoader.setModelDefinition(data);\n        return this;\n    };\n\n    /**\n     * @returns {*}\n     * @param name {string}\n     */\n    model(name) {\n        return this.getModelDefinition(name);\n    }\n    /**\n     * Gets the current data configuration\n     * @returns DataConfigurationStrategy - An instance of DataConfiguration class which represents the current data configuration\n     */\n    static getCurrent() {\n        const configuration = ConfigurationBase.getCurrent();\n        if (!configuration.hasStrategy(DataConfigurationStrategy)) {\n            configuration.useStrategy(DataConfigurationStrategy, DataConfigurationStrategy);\n        }\n        return configuration.getStrategy(DataConfigurationStrategy);\n    }\n}\n\n\nconst modelsProperty = Symbol('models');\n\nexport class SchemaLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        super(config);\n        this[modelsProperty] = new Map();\n        this.setModelDefinition({\n            \"name\":\"Migration\", \"title\":\"Data Model Migrations\", \"id\": 14,\n            \"source\":\"migrations\", \"view\":\"migrations\", \"hidden\": true, \"sealed\":true,\n            \"fields\":[\n                { \"name\":\"id\", \"type\":\"Counter\", \"primary\":true },\n                { \"name\":\"appliesTo\", \"type\":\"Text\", \"size\":180, \"nullable\":false },\n                { \"name\":\"model\", \"type\":\"Text\", \"size\":120 },\n                { \"name\":\"description\", \"type\":\"Text\", \"size\":512},\n                { \"name\":\"version\", \"type\":\"Text\", \"size\":40, \"nullable\":false }\n            ],\n            \"constraints\":[\n                { \"type\":\"unique\", \"fields\":[ \"appliesTo\", \"version\" ] }\n            ]\n        });\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {*}\n     */\n    getModelDefinition(name) {\n        Args.notString(name,'Model name');\n        let result = this[modelsProperty].get(name);\n        if (typeof result !== 'undefined') {\n            return result;\n        }\n        //case insensitive search\n        const iterator = this[modelsProperty].keys();\n        let keyIt = iterator.next();\n        while(!keyIt.done) {\n            if ((typeof keyIt.value === 'string') && (keyIt.value.toLowerCase() === name.toLowerCase())) {\n                return this[modelsProperty].get(keyIt.value);\n            }\n            keyIt = iterator.next();\n        }\n    }\n\n    /**\n     *\n     * @param {*} data\n     * @returns {SchemaLoaderStrategy}\n     */\n    setModelDefinition(data) {\n        Args.notNull(data,'Model definition');\n        Args.notString(data.name,'Model name');\n        this[modelsProperty].set(data.name,data);\n        return this;\n    }\n\n}\n\nconst filesProperty = Symbol('files');\nconst modelPathProperty = Symbol('modelPath');\n\nexport class DefaultSchemaLoaderStrategy extends SchemaLoaderStrategy {\n    /**\n     *\n     * @param {ConfigurationBase} config\n     */\n    constructor(config) {\n        super(config);\n        this[modelPathProperty] = PathUtils.join(config.getConfigurationPath(), 'models');\n    }\n\n    /**\n     * Gets a string which represents the directory which contains model definitions.\n     * @returns {*}\n     */\n    getModelPath() {\n        return this[modelPathProperty];\n    }\n\n    /**\n     * Sets the directory of model definitions.\n     * @param {string} p\n     * @returns {DefaultSchemaLoaderStrategy}\n     */\n    setModelPath(p) {\n        this[modelPathProperty] = p;\n        return this;\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {*}\n     */\n    getModelDefinition(name) {\n        const self = this,\n            getModelDefinitionSuper = super.getModelDefinition;\n        let i;\n        if (typeof name !== 'string')\n            return;\n        //exclude registered data types\n        if (this.getConfiguration().getStrategy(DataConfigurationStrategy).hasDataType(name)) {\n            return;\n        }\n        let modelDefinition = getModelDefinitionSuper.bind(this)(name);\n        //first of all try to find if model definition is already in cache\n        if (_.isObject(modelDefinition)) {\n            //and return it//and return it\n            return modelDefinition;\n        }\n        //otherwise open definition file\n        const modelPath = this.getModelPath();\n        //read files from models directory\n        //store file list in a private variable\n        if (typeof this[filesProperty] === 'undefined') {\n            const nativeFsModule = 'fs';\n            const fs = require(nativeFsModule);\n            if (typeof fs.readdirSync === 'function') {\n                this[filesProperty] = fs.readdirSync(modelPath);\n            }\n            else {\n                //try load model definition\n                try {\n                    modelDefinition = require(PathUtils.join(modelPath, name.concat('json')));\n                    this.setModelDefinition(modelDefinition);\n                }\n                catch(err) {\n                    //do nothing (log error)\n                    TraceUtils.error('An error occurred while loading definition for model %s.', name);\n                    TraceUtils.error(err);\n                }\n            }\n        }\n        //and finally get this list of file\n        const files = this[filesProperty];\n        if (files.length==0)\n            return;\n        const r = new RegExp('^' + name.concat('.json') + '$','i');\n        for (i = 0; i < files.length; i++) {\n            r.lastIndex=0;\n            if (r.test(files[i])) {\n                //build model file path\n                const finalPath = PathUtils.join(modelPath, files[i]);\n                //get model\n                const result = require(finalPath), finalName = result.name;\n                //set definition\n                this.setModelDefinition(result);\n                //and finally return this definition\n                return result;\n            }\n        }\n    }\n}\n\nexport class ModelClassLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        super(config);\n    }\n}\n\nexport class DefaultModelClassLoaderStrategy extends ConfigurationStrategy {\n    /**\n     *\n     * @param {DataConfiguration} config\n     */\n    constructor(config) {\n        super(config);\n    }\n\n    /**\n     * @param {DataModel} model\n     * @returns {Function}\n     */\n    resolve(model) {\n        Args.notNull(model, 'Model');\n        let DataObjectClass = this['DataObjectClass'];\n        if (_.isFunction(DataObjectClass)) {\n            return DataObjectClass;\n        }\n        //get model definition\n        const modelDefinition = this.getConfiguration().getStrategy(SchemaLoaderStrategy).getModelDefinition(model.name);\n        if (typeof model.classPath === 'string') {\n            modelDefinition['DataObjectClass'] = DataObjectClass = require(self.classPath);\n        }\n        else {\n            //try to find module by using capitalize naming convention\n            // e.g. OrderDetail -> OrderDetailModel.js\n            let classPath = PathUtils.join(this.getConfiguration().getExecutionPath(),'models',this.name.concat('Model.js'));\n            try {\n                modelDefinition['DataObjectClass'] = DataObjectClass = require(classPath);\n            }\n            catch(err) {\n                if (err.code === 'MODULE_NOT_FOUND') {\n                    try {\n                        //try to find module by using dasherize naming convention\n                        // e.g. OrderDetail -> order-detail-model.js\n                        classPath = PathUtils.join(this.getConfiguration().getExecutionPath(),'models',_.dasherize(this.name).concat('-model.js'));\n                        modelDefinition['DataObjectClass'] = DataObjectClass = require(classPath);\n                    }\n                    catch(err) {\n                        if (err.code === 'MODULE_NOT_FOUND') {\n                            if (typeof this['inherits'] === 'undefined' || this['inherits'] == null) {\n                                //use default DataObject class\n                                modelDefinition['DataObjectClass'] = DataObjectClass = require('./object').DataObject;\n                            }\n                            else {\n                                modelDefinition['DataObjectClass'] = DataObjectClass = this.resolve(model.base());\n                            }\n                        }\n                        else {\n                            throw err;\n                        }\n                    }\n                }\n                else {\n                    throw err;\n                }\n            }\n        }\n        return DataObjectClass;\n    }\n\n}\n\n\n"]}