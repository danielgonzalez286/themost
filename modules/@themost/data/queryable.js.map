{"version":3,"sources":["queryable.es6"],"names":["async","sprintf","_","Q","DataAssociationMapping","DataError","QueryExpression","QueryField","QueryFieldUtils","QueryEntity","TextUtils","TraceUtils","DataAttributeResolver","attr","nestedAttribute","prototype","testNestedAttribute","matches","exec","name","selectAggregatedAttribute","call","resolveNestedAttribute","alias","expr","isNil","as","replace","aggregation","attribute","self","result","selecteNestedAttribute","resolveField","sAlias","$name","test","member","split","arr","obj","select","mapping","model","inferMapping","associationType","expr1","resolveJunctionAttributeJoin","$select","$expand","resolveNestedAttributeJoin","length","create","from","query","isArray","push","apply","forEach","y","find","x","$entity","$as","Error","memberExpr","res","entity","arrMember","attrMember","field","childModel","parentModel","context","viewAdapter","where","childField","_alias","equal","parentField","left","join","with","s","property","aggr","q","valueField","associationAdapter","parentAlias","modelProperty","Symbol","queryProperty","expandProperty","flattenProperty","silentProperty","viewProperty","DataQueryable","silent","$silent","$view","$levels","$flatten","assign","useOr","prepare","text","options","multiword","terms","re","match","stringTypes","attributes","many","z","indexOf","type","w","or","contains","joinModel","filter","and","in","notEqual","greaterThan","greaterOrEqual","value","bit","lowerThan","lowerOrEqual","startsWith","endsWith","objs","notIn","mod","notContains","value1","value2","between","arg","arguments","Array","slice","expand","getDataView","fields","b","testAggregatedNestedAttribute","testAttribute","select_","hasFields","map","f","prop","toLowerCase","nestedAttr","nestedMatches","concat","aggregateFunc","ReferenceError","count","average","sum","min","max","orderBy","orderByNestedAttribute","i","bind","groupBy","thenBy","orderByDescending","thenByDescending","callback","firstInternal","promise","resolve","reject","err","allInternal","n","$skip","take","takeInternal","d","defer","listInternal","$inlinecount","parseInt","$take","execute_","countInternal","maxInternal","minInternal","averageInternal_","ensureContext","migrate","e","$asArray","toMD5","data","hasOwnProperty","add","subtract","multiply","divide","round","start","substr","trim","getDate","getYear","getMonth","getDay","getHours","getMinutes","getSeconds","floor","ceil","toLocaleLowerCase","toLocaleUpperCase","valueInternal","first","getItem","then","convert","catch","getItems","list","process","nextTick","records","all","skip","getTypedItems","a","q1","clone","total","$order","$group","flatten","executeCount_","clonedQuery","db","execute","getLevels","expandables","expandable","selected","hiddens","hidden","hiddenField","splice","expand1","$filter","order","group","$prepared","$where","finalExecuteInternal_","emitter","afterListenerCount","listeners","emit","afterExecute_","expands","uniqBy","eachSeries","cb","expandAttr","refersTo","isObject","MappingExtensions","require","thisMapping","extend","for","getAssociatedChilds_v1","getParents_v1","getChilds_v1","getAssociatedParents_v1","log","title","toArrayCallback","key","Object","keys","primaryKey"],"mappings":";;;;;;;;;qjBAAA;;;;;;;;;;;AASA;;AACA;;IAAOA,K;;AACP;;IAAOC,O;;AACP;;IAAOC,C;;AACP;;IAAOC,C;;AACP;;IAAQC,sB,UAAAA,sB;;AACR;;IAAQC,S,WAAAA,S;;AACR;;IAAQC,e,UAAAA,e;IAAiBC,U,UAAAA,U;IAAYC,e,UAAAA,e;IAAiBC,W,UAAAA,W;;AACtD;;IAAQC,S,UAAAA,S;IAAUC,U,UAAAA,U;;;;;;AAElB;;;;;IAKaC,qB,WAAAA,qB;;;;;;;+CACcC,I,EAAM;AACzB,gBAAMC,kBAAkBF,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoDH,IAApD,CAAxB;AACA,gBAAIC,eAAJ,EAAqB;AACjB,oBAAIG,UAAU,2BAA2BC,IAA3B,CAAgCJ,gBAAgBK,IAAhD,CAAd;AACA,oBAAIF,OAAJ,EAAe;AACX,2BAAOL,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+D,IAA/D,EAAqEJ,QAAQ,CAAR,CAArE,EAAiFA,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAApG,CAAP;AACH;AACDA,0BAAU,kCAAkCC,IAAlC,CAAuCJ,gBAAgBK,IAAvD,CAAV;AACA,oBAAIF,OAAJ,EAAe;AACX,2BAAOL,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+D,IAA/D,EAAqEJ,QAAQ,CAAR,CAArE,EAAiFA,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAvH,CAAP;AACH;AACJ;AACD,mBAAOL,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAP;AACH;;;+CACsBA,I,EAAMU,K,EAAO;AAChC,gBAAMC,OAAOZ,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAb;AACA,gBAAIW,IAAJ,EAAU;AACN,oBAAItB,EAAEuB,KAAF,CAAQF,KAAR,CAAJ,EACIC,KAAKE,EAAL,CAAQb,KAAKc,OAAL,CAAa,KAAb,EAAmB,GAAnB,CAAR,EADJ,KAGIH,KAAKE,EAAL,CAAQH,KAAR;AACP;AACD,mBAAOC,IAAP;AACH;AACD;;;;;;;;;kDAM0BI,W,EAAaC,S,EAAWN,K,EAAO;AACrD,gBAAMO,OAAK,IAAX;AACA,gBAAIC,eAAJ;AACA,gBAAInB,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoDa,SAApD,CAAJ,EAAoE;AAChEE,yBAASnB,sBAAsBG,SAAtB,CAAgCiB,sBAAhC,CAAuDX,IAAvD,CAA4DS,IAA5D,EAAiED,SAAjE,EAA4EN,KAA5E,CAAT;AACH,aAFD,MAGK;AACDQ,yBAASD,KAAKG,YAAL,CAAkBJ,SAAlB,CAAT;AACH;AACD,gBAAMK,SAASH,OAAOL,EAAP,EAAf;AACA,gBAAMP,OAAOY,OAAOZ,IAAP,EAAb;AACA,gBAAIK,aAAJ;AACA,gBAAIU,MAAJ,EAAY;AACRV,uBAAOO,OAAOG,MAAP,CAAP;AACAH,uBAAOG,MAAP,IAAiB,EAAjB;AACAH,uBAAOG,MAAP,EAAe,MAAMN,WAArB,IAAqCJ,IAArC;AACH,aAJD,MAKK;AACDA,uBAAOO,OAAOI,KAAd;AACAJ,uBAAOZ,IAAP,IAAe,EAAf;AACAY,uBAAOZ,IAAP,EAAa,MAAMS,WAAnB,IAAmCJ,IAAnC;AACH;AACD,mBAAOO,MAAP;AACH;;;+CAEsBlB,I,EAAM;AACzB,gBAAMiB,OAAO,IAAb;AACA,gBAAI,OAAOjB,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,oBAAMwB,SAASxB,KAAKyB,KAAL,CAAW,GAAX,CAAf;AACA,oBAAId,aAAJ;AACA,oBAAIe,YAAJ;AACA,oBAAIC,YAAJ;AACA,oBAAIC,eAAJ;AACA;AACA;AACA,oBAAMC,UAAUZ,KAAKa,KAAL,CAAWC,YAAX,CAAwBP,OAAO,CAAP,CAAxB,CAAhB;AACA,oBAAIK,WAAWA,QAAQG,eAAR,KAA4B,UAA3C,EAAuD;AACnD,wBAAMC,QAAQlC,sBAAsBG,SAAtB,CAAgCgC,4BAAhC,CAA6D1B,IAA7D,CAAkES,KAAKa,KAAvE,EAA8E9B,IAA9E,CAAd;AACA;AACA4B,6BAASK,MAAME,OAAf;AACA;AACAxB,2BAAOsB,MAAMG,OAAb;AACH,iBAND,MAOK;AACDzB,2BAAOZ,sBAAsBG,SAAtB,CAAgCmC,0BAAhC,CAA2D7B,IAA3D,CAAgES,KAAKa,KAArE,EAA4E9B,IAA5E,CAAP;AACA;AACA,wBAAIwB,OAAOc,MAAP,GAAc,CAAlB,EACIV,SAASlC,WAAW6C,MAAX,CAAkBf,OAAO,CAAP,CAAlB,EAA6BgB,IAA7B,CAAkChB,OAAO,CAAP,CAAlC,CAAT,CADJ,KAGII,SAAUlC,WAAW6C,MAAX,CAAkBf,OAAO,CAAP,CAAlB,EAA6BgB,IAA7B,CAAkChB,OAAO,CAAP,CAAlC,CAAV;AACP;AACD,oBAAIb,IAAJ,EAAU;AACN,wBAAI,OAAO,KAAK8B,KAAL,CAAWL,OAAlB,KAA8B,WAA9B,IAA6C,IAAjD,EAAuD;AACnD,6BAAKK,KAAL,CAAWL,OAAX,GAAqBzB,IAArB;AACH,qBAFD,MAGK;AACDe,8BAAM,EAAN;AACA,4BAAI,CAACrC,EAAEqD,OAAF,CAAUzB,KAAKwB,KAAL,CAAWL,OAArB,CAAL,EAAoC;AAChCV,gCAAIiB,IAAJ,CAAS1B,KAAKwB,KAAL,CAAWL,OAApB;AACA,iCAAKK,KAAL,CAAWL,OAAX,GAAqBV,GAArB;AACH;AACDA,8BAAM,EAAN;AACA,4BAAIrC,EAAEqD,OAAF,CAAU/B,IAAV,CAAJ,EACIe,IAAIiB,IAAJ,CAASC,KAAT,CAAelB,GAAf,EAAoBf,IAApB,EADJ,KAGIe,IAAIiB,IAAJ,CAAShC,IAAT;AACJe,4BAAImB,OAAJ,CAAY,UAASC,CAAT,EAAY;AACpBnB,kCAAMV,KAAKwB,KAAL,CAAWL,OAAX,CAAmBW,IAAnB,CAAwB,UAASC,CAAT,EAAY;AACtC,oCAAIA,EAAEC,OAAF,IAAaD,EAAEC,OAAF,CAAUC,GAA3B,EAAgC;AAC5B,2CAAQF,EAAEC,OAAF,CAAUC,GAAV,KAAkBJ,EAAEG,OAAF,CAAUC,GAApC;AACH;AACD,uCAAO,KAAP;AACH,6BALK,CAAN;AAMA,gCAAI,OAAOvB,GAAP,KAAe,WAAnB,EACIV,KAAKwB,KAAL,CAAWL,OAAX,CAAmBO,IAAnB,CAAwBG,CAAxB;AACP,yBATD;AAUH;AACD,2BAAOlB,MAAP;AACH,iBA3BD,MA4BK;AACD,0BAAM,IAAIuB,KAAJ,CAAU,wDAAV,CAAN;AACH;AACJ;AACJ;;AAED;;;;;;;;mDAK2BC,U,EAAY;AACnC,gBAAMnC,OAAO,IAAb;AACA,gBAAIoC,YAAJ;AAAA,gBAAQ1C,aAAR;AAAA,gBAAa2C,eAAb;AACA,gBAAI,KAAK/B,IAAL,CAAU6B,UAAV,CAAJ,EAA2B;AACvB;AACA,oBAAMG,YAAYH,WAAW3B,KAAX,CAAiB,GAAjB,CAAlB;AACA,oBAAM+B,aAAavC,KAAKwC,KAAL,CAAWF,UAAU,CAAV,CAAX,CAAnB;AACA,oBAAIlE,EAAEuB,KAAF,CAAQ4C,UAAR,CAAJ,EAAyB;AACrB,0BAAM,IAAIL,KAAJ,2DAAkEI,UAAU,CAAV,CAAlE,CAAN;AACH;AACD;AACA,oBAAM1B,UAAUZ,KAAKc,YAAL,CAAkBwB,UAAU,CAAV,CAAlB,CAAhB;AACA,oBAAIlE,EAAEuB,KAAF,CAAQiB,OAAR,CAAJ,EAAsB;AAClB,0BAAM,IAAIsB,KAAJ,gFAAuFI,UAAU,CAAV,CAAvF,CAAN;AACH;AACD,oBAAI1B,QAAQ6B,UAAR,KAAqBzC,KAAKX,IAA1B,IAAkCuB,QAAQG,eAAR,KAA0B,aAAhE,EAA+E;AAC3E;AACA,wBAAM2B,cAAc1C,KAAK2C,OAAL,CAAa9B,KAAb,CAAmBD,QAAQ8B,WAA3B,CAApB;AACA,wBAAItE,EAAEuB,KAAF,CAAQ+C,WAAR,CAAJ,EAA0B;AACtB,8BAAM,IAAIR,KAAJ,gCAAuCtB,QAAQ8B,WAA/C,wBAAN;AACH;AACD;;;;AAIAN,0BAAK5D,gBAAgB8C,MAAhB,CAAuBtB,KAAK4C,WAA5B,EAAyCjC,MAAzC,CAAgD,GAAhD,CAAL;AACAjB,2BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkBV,QAAQkC,UAA1B,EAAsCvB,IAAtC,CAA2CvB,KAAK+C,MAAL,IAAe/C,KAAK4C,WAA/D,CAA/B,EAA4GI,KAA5G,CAAkHvE,WAAW6C,MAAX,CAAkBV,QAAQqC,WAA1B,EAAuC1B,IAAvC,CAA4CX,QAAQkC,UAApD,CAAlH,CAAP;AACAT,6BAAS1D,YAAY2C,MAAZ,CAAmBoB,YAAYE,WAA/B,EAA4ChD,EAA5C,CAA+CgB,QAAQkC,UAAvD,EAAmEI,IAAnE,EAAT;AACAd,wBAAIe,IAAJ,CAASd,MAAT,EAAiBe,IAAjB,CAAsB1D,IAAtB;AACA,wBAAI4C,UAAUjB,MAAV,GAAiB,CAArB,EAAwB;AACpBqB,oCAAYK,MAAZ,GAAqBnC,QAAQkC,UAA7B;AACApD,+BAAOZ,sBAAsBG,SAAtB,CAAgCmC,0BAAhC,CAA2D7B,IAA3D,CAAgEmD,WAAhE,EAA6EJ,UAAU,CAAV,IAAe,GAAf,GAAqBA,UAAU,CAAV,CAAlG,CAAP;AACA,4BAAM7B,MAAM,EAAZ;AACAA,4BAAIiB,IAAJ,CAASU,IAAIjB,OAAb;AACAV,4BAAIiB,IAAJ,CAAShC,IAAT;AACA,+BAAOe,GAAP;AACH;AACD,2BAAO2B,IAAIjB,OAAX;AACH,iBAvBD,MAwBK,IAAIP,QAAQ8B,WAAR,KAAsB1C,KAAKX,IAA3B,IAAmCuB,QAAQG,eAAR,KAA0B,aAAjE,EAAgF;AACjF,wBAAM0B,aAAazC,KAAK2C,OAAL,CAAa9B,KAAb,CAAmBD,QAAQ6B,UAA3B,CAAnB;AACA,wBAAIrE,EAAEuB,KAAF,CAAQ8C,UAAR,CAAJ,EAAyB;AACrB,8BAAM,IAAIP,KAAJ,+BAAsCtB,QAAQ6B,UAA9C,wBAAN;AACH;AACDL,0BAAK5D,gBAAgB8C,MAAhB,CAAuB,SAAvB,EAAkCX,MAAlC,CAAyC,GAAzC,CAAL;AACAjB,2BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkBV,QAAQqC,WAA1B,EAAuC1B,IAAvC,CAA4CvB,KAAK4C,WAAjD,CAA/B,EAA8FI,KAA9F,CAAoGvE,WAAW6C,MAAX,CAAkBV,QAAQkC,UAA1B,EAAsCvB,IAAtC,CAA2Ce,UAAU,CAAV,CAA3C,CAApG,CAAP;AACAD,6BAAS1D,YAAY2C,MAAZ,CAAmBmB,WAAWG,WAA9B,EAA2ChD,EAA3C,CAA8C0C,UAAU,CAAV,CAA9C,EAA4DY,IAA5D,EAAT;AACAd,wBAAIe,IAAJ,CAASd,MAAT,EAAiBe,IAAjB,CAAsB1D,IAAtB;AACA,2BAAO0C,IAAIjB,OAAX;AACH,iBAVI,MAWA;AACD,0BAAM,IAAIe,KAAJ,mCAA0CtB,QAAQ8B,WAAlD,aAAqE9B,QAAQ6B,UAA7E,sEAAN;AACH;AACJ;AACJ;;AAED;;;;;;;sCAIcY,C,EAAG;AACb,gBAAI,OAAOA,CAAP,KAAa,QAAjB,EACI;AACJ;;;AAGA,gBAAIlE,gBAAJ;AACA;;;;AAIAA,sBAAU,+BAA+BC,IAA/B,CAAoCiE,CAApC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAxC,EAA8CmE,UAASnE,QAAQ,CAAR,CAAvD,EAAP;AACH;AACD;;;;AAIAA,sBAAU,sBAAsBC,IAAtB,CAA2BiE,CAA3B,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,CAAR,EAAqBmE,UAASnE,QAAQ,CAAR,CAA9B,EAAP;AACH;AACD;;;;AAIAA,sBAAU,oBAAoBC,IAApB,CAAyBiE,CAAzB,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAxC,EAAP;AACH;AACD;AACA,gBAAI,UAAUmB,IAAV,CAAe+C,CAAf,CAAJ,EAAuB;AACnB,uBAAO,EAAEhE,MAAMgE,CAAR,EAAP;AACH;AACJ;;AAED;;;;;;;sDAI8BA,C,EAAG;AAC7B,gBAAI,OAAOA,CAAP,KAAa,QAAjB,EACI;AACJ;;;AAGA,gBAAIlE,gBAAJ;AACA;;;;AAIAA,sBAAU,sCAAsCC,IAAtC,CAA2CiE,CAA3C,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEoE,MAAMpE,QAAQ,CAAR,CAAR,EAAoBE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAA7C,EAAyDmE,UAASnE,QAAQ,CAAR,CAAlE,EAAP;AACH;AACD;;;;AAIAA,sBAAU,6CAA6CC,IAA7C,CAAkDiE,CAAlD,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEoE,MAAMpE,QAAQ,CAAR,CAAR,EAAoBE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAhE,EAA4EmE,UAASnE,QAAQ,CAAR,CAArF,EAAP;AACH;AACD;;;;AAIAA,sBAAU,2BAA2BC,IAA3B,CAAgCiE,CAAhC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEoE,MAAMpE,QAAQ,CAAR,CAAR,EAAoBE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAA7C,EAAP;AACH;AACD;;;;AAIAA,sBAAU,kCAAkCC,IAAlC,CAAuCiE,CAAvC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEoE,MAAMpE,QAAQ,CAAR,CAAR,EAAoBE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAhE,EAAP;AACH;AACJ;;AAED;;;;;;;4CAIoBkE,C,EAAG;AACnB,gBAAI,OAAOA,CAAP,KAAa,QAAjB,EACI;AACJ;;;AAGA,gBAAIlE,gBAAJ;AACA;;;;AAIAA,sBAAU,sCAAsCC,IAAtC,CAA2CiE,CAA3C,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAtC,GAAoD,GAA5D,EAAiEmE,UAASnE,QAAQ,CAAR,CAA1E,EAAP;AACH;AACD;;;;AAIAA,sBAAU,6CAA6CC,IAA7C,CAAkDiE,CAAlD,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAtC,GAAmD,GAAnD,GAAyDA,QAAQ,CAAR,CAAzD,GAAuE,GAA/E,EAAoFmE,UAASnE,QAAQ,CAAR,CAA7F,EAAP;AACH;AACD;;;;AAIAA,sBAAU,6BAA6BC,IAA7B,CAAkCiE,CAAlC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAA3B,EAAuCmE,UAASnE,QAAQ,CAAR,CAAhD,EAAP;AACH;AACD;;;;AAIAA,sBAAU,oCAAoCC,IAApC,CAAyCiE,CAAzC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAA9C,EAA0DmE,UAASnE,QAAQ,CAAR,CAAnE,EAAP;AACH;AACD;;;;AAIAA,sBAAU,2BAA2BC,IAA3B,CAAgCiE,CAAhC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAmBA,QAAQ,CAAR,CAAnB,GAAgC,GAAhC,GAAsCA,QAAQ,CAAR,CAAtC,GAAoD,GAA5D,EAAP;AACH;AACD;;;;AAIAA,sBAAU,kCAAkCC,IAAlC,CAAuCiE,CAAvC,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMF,QAAQ,CAAR,IAAa,GAAb,GAAoBA,QAAQ,CAAR,CAApB,GAAiC,GAAjC,GAAuCA,QAAQ,CAAR,CAAvC,GAAoD,GAApD,GAA0DA,QAAQ,CAAR,CAA1D,GAAwE,GAAhF,EAAP;AACH;AACD;;;;AAIAA,sBAAU,iBAAiBC,IAAjB,CAAsBiE,CAAtB,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMgE,CAAR,EAAP;AACH;;AAED;;;;AAIAlE,sBAAU,wBAAwBC,IAAxB,CAA6BiE,CAA7B,CAAV;AACA,gBAAIlE,OAAJ,EAAa;AACT,uBAAO,EAAEE,MAAMgE,CAAR,EAAP;AACH;AAEJ;;AAED;;;;;;;qDAI6BtE,I,EAAM;AAC/B,gBAAMiB,OAAO,IAAb;AAAA,gBAAmBO,SAASxB,KAAKyB,KAAL,CAAW,GAAX,CAA5B;AACA;AACA,gBAAMI,UAAUZ,KAAKc,YAAL,CAAkBP,OAAO,CAAP,CAAlB,CAAhB;AACA;AACA,gBAAIK,WAAWA,QAAQG,eAAR,KAA4B,UAA3C,EAAuD;AACnD;AACA,oBAAMyB,QAAQxC,KAAKwC,KAAL,CAAWjC,OAAO,CAAP,CAAX,CAAd;;AAEA,oBAAI8B,eAAJ;AACA,oBAAI3C,aAAJ;AACA,oBAAI8D,UAAJ;AACA;AACA;AACA,oBAAI5C,QAAQ8B,WAAR,KAAwB1C,KAAKX,IAAjC,EAAuC;;AAEnC,wBAAI4D,cAAc,UAAlB;AAAA,wBAA8BQ,aAAa,SAA3C;AACA,wBAAI,OAAO7C,QAAQ6B,UAAf,KAA8B,WAAlC,EAA+C;AAC3CQ,sCAAc,QAAd,CAAwBQ,aAAa,OAAb;AAC3B;AACDD,wBAAGhF,gBAAgB8C,MAAhB,CAAuBtB,KAAK4C,WAA5B,EAAyCjC,MAAzC,CAAgD,GAAhD,CAAH;AACA;AACA0B,6BAAS1D,YAAY2C,MAAZ,CAAmBV,QAAQ8C,kBAA3B,EAA+C9D,EAA/C,CAAkD4C,MAAMnD,IAAxD,CAAT;AACA;AACA;AACAK,2BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkBV,QAAQqC,WAA1B,EAAuC1B,IAAvC,CAA4CvB,KAAK4C,WAAjD,CAA/B,EACFI,KADE,CACIvE,WAAW6C,MAAX,CAAkB2B,WAAlB,EAA+B1B,IAA/B,CAAoCiB,MAAMnD,IAA1C,CADJ,CAAP;AAEA;AACAmE,sBAAEL,IAAF,CAAOd,MAAP,EAAee,IAAf,CAAoB1D,IAApB;AACA;AACA,wBAAI,OAAOkB,QAAQ6B,UAAf,KAA8B,WAAlC,EAA+C;AAC3C,+BAAO;AACHtB,qCAAQ,CAACqC,EAAErC,OAAH,CADL;AAEHD,qCAAQzC,WAAW6C,MAAX,CAAkBmC,UAAlB,EAA8BlC,IAA9B,CAAmCiB,MAAMnD,IAAzC;AAFL,yBAAP;AAIH;;AAED;AACA,wBAAIkB,OAAO,CAAP,MAAcK,QAAQkC,UAA1B,EAAsC;AAClC,+BAAO;AACH3B,qCAAQ,CAACqC,EAAErC,OAAH,CADL;AAEHD,qCAAQzC,WAAW6C,MAAX,CAAkBmC,UAAlB,EAA8BlC,IAA9B,CAAmCiB,MAAMnD,IAAzC;AAFL,yBAAP;AAIH,qBALD,MAMK;AACD;AACA,4BAAMoD,aAAazC,KAAK2C,OAAL,CAAa9B,KAAb,CAAmBD,QAAQ6B,UAA3B,CAAnB;AACA,4BAAIrE,EAAEuB,KAAF,CAAQ8C,UAAR,CAAJ,EAAyB;AACrB,kCAAM,IAAIlE,SAAJ,CAAc,OAAd,EAAsB,uCAAtB,CAAN;AACH;AACD;AACA,4BAAMkB,QAAQ+C,MAAMnD,IAAN,GAAa,GAAb,GAAmBoD,WAAWpD,IAA5C;AACAgD,iCAAS1D,YAAY2C,MAAZ,CAAmBmB,WAAWG,WAA9B,EAA2ChD,EAA3C,CAA8CH,KAA9C,CAAT;AACAC,+BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkB,SAAlB,EAA6BC,IAA7B,CAAkCiB,MAAMnD,IAAxC,CAA/B,EACF2D,KADE,CACIvE,WAAW6C,MAAX,CAAkBV,QAAQkC,UAA1B,EAAsCvB,IAAtC,CAA2C9B,KAA3C,CADJ,CAAP;AAEA;AACA+D,0BAAEL,IAAF,CAAOd,MAAP,EAAee,IAAf,CAAoB1D,IAApB;AACA,+BAAO;AACHyB,qCAAQqC,EAAErC,OADP;AAEHD,qCAAQzC,WAAW6C,MAAX,CAAkBf,OAAO,CAAP,CAAlB,EAA6BgB,IAA7B,CAAkC9B,KAAlC;AAFL,yBAAP;AAIH;AACJ,iBAhDD,MAiDK;AACD+D,wBAAGhF,gBAAgB8C,MAAhB,CAAuBtB,KAAK4C,WAA5B,EAAyCjC,MAAzC,CAAgD,GAAhD,CAAH;AACA;AACA;AACA0B,6BAAS1D,YAAY2C,MAAZ,CAAmBV,QAAQ8C,kBAA3B,EAA+C9D,EAA/C,CAAkD4C,MAAMnD,IAAxD,CAAT;AACA;AACA;AACAK,2BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkBV,QAAQkC,UAA1B,EAAsCvB,IAAtC,CAA2CvB,KAAK4C,WAAhD,CAA/B,EACFI,KADE,CACIvE,WAAW6C,MAAX,CAAkB,SAAlB,EAA6BC,IAA7B,CAAkCiB,MAAMnD,IAAxC,CADJ,CAAP;AAEA;AACAmE,sBAAEL,IAAF,CAAOd,MAAP,EAAee,IAAf,CAAoB1D,IAApB;AACA;AACA,wBAAIa,OAAO,CAAP,MAAcK,QAAQqC,WAA1B,EAAuC;AACnC,+BAAO;AACH9B,qCAAQ,CAACqC,EAAErC,OAAH,CADL;AAEHD,qCAAQzC,WAAW6C,MAAX,CAAkB,UAAlB,EAA8BC,IAA9B,CAAmCiB,MAAMnD,IAAzC;AAFL,yBAAP;AAIH,qBALD,MAMK;AACD;AACA,4BAAMqD,cAAc1C,KAAK2C,OAAL,CAAa9B,KAAb,CAAmBD,QAAQ8B,WAA3B,CAApB;AACA,4BAAItE,EAAEuB,KAAF,CAAQ+C,WAAR,CAAJ,EAA0B;AACtB,kCAAM,IAAInE,SAAJ,CAAc,OAAd,EAAsB,uCAAtB,CAAN;AACH;AACD;AACA,4BAAMoF,cAAcnB,MAAMnD,IAAN,GAAa,GAAb,GAAmBqD,YAAYrD,IAAnD;AACAgD,iCAAS1D,YAAY2C,MAAZ,CAAmBoB,YAAYE,WAA/B,EAA4ChD,EAA5C,CAA+C+D,WAA/C,CAAT;AACAjE,+BAAOlB,gBAAgB8C,MAAhB,GAAyBuB,KAAzB,CAA+BpE,WAAW6C,MAAX,CAAkB,UAAlB,EAA8BC,IAA9B,CAAmCiB,MAAMnD,IAAzC,CAA/B,EACF2D,KADE,CACIvE,WAAW6C,MAAX,CAAkBV,QAAQqC,WAA1B,EAAuC1B,IAAvC,CAA4CoC,WAA5C,CADJ,CAAP;AAEA;AACAH,0BAAEL,IAAF,CAAOd,MAAP,EAAee,IAAf,CAAoB1D,IAApB;AACA,+BAAO;AACHyB,qCAAQqC,EAAErC,OADP;AAEHD,qCAAQzC,WAAW6C,MAAX,CAAkBf,OAAO,CAAP,CAAlB,EAA6BgB,IAA7B,CAAkCoC,WAAlC;AAFL,yBAAP;AAIH;AACJ;AACJ,aA/FD,MAgGK;AACD,sBAAM,IAAIpF,SAAJ,CAAc,OAAd,EAAsB,2FAAtB,EAAkH,EAAlH,EAAsHyB,KAAKX,IAA3H,EAAiIN,IAAjI,CAAN;AACH;AACJ;;;;;;AAIL,IAAM6E,gBAAgBC,OAAO,OAAP,CAAtB;AACA,IAAMC,gBAAgBD,OAAO,OAAP,CAAtB;AACA,IAAME,iBAAiBF,OAAO,QAAP,CAAvB;AACA,IAAMG,kBAAkBH,OAAO,SAAP,CAAxB;AACA,IAAMI,iBAAiBJ,OAAO,QAAP,CAAvB;AACA,IAAMK,eAAeL,OAAO,MAAP,CAArB;;AAEA;;;;;;;;IAOaM,a,WAAAA,a;AACT;;;;AAIA,2BAAYtD,KAAZ,EAAmB;AAAA;;AACf,aAAK+C,aAAL,IAAsB/C,KAAtB;AACA;AACA,YAAIA,KAAJ,EACI,KAAKuD,MAAL,CAAYvD,MAAMwD,OAAlB;AACP;;AAED;;;;;;;;;;AAuBA;;;;gCAIQ;AACJ,gBAAMpE,SAAS,IAAIkE,aAAJ,CAAkB,KAAKtD,KAAvB,CAAf;AACA;AACAZ,mBAAOqE,KAAP,GAAe,KAAKA,KAApB;AACA;AACArE,mBAAOoE,OAAP,GAAiB,KAAKA,OAAtB;AACA;AACApE,mBAAOsE,OAAP,GAAiB,KAAKA,OAAtB;AACA;AACAtE,mBAAOuE,QAAP,GAAkB,KAAKA,QAAvB;AACA;AACAvE,mBAAOkB,OAAP,GAAiB,KAAKA,OAAtB;AACA;AACA/C,cAAEqG,MAAF,CAASxE,OAAOuB,KAAhB,EAAuB,KAAKA,KAA5B;AACA,mBAAOvB,MAAP;AACH;;AAED;;;;;;;;wCAKgB;AACZ,gBAAI,KAAKY,KAAL,KAAa,IAAjB,EACI,IAAI,KAAKA,KAAL,CAAW8B,OAAX,KAAqB,IAAzB,EACI,OAAO,KAAK9B,KAAL,CAAW8B,OAAlB;AACR,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;gCAiBQ+B,K,EAAO;AACX,iBAAKlD,KAAL,CAAWmD,OAAX,CAAmBD,KAAnB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;8BAcM3F,I,EAAM;AACR,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWqB,KAAX,CAAiB/D,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAjB;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWqB,KAAX,CAAiB,KAAK1C,YAAL,CAAkBpB,IAAlB,CAAjB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;+BAcO6F,I,EAAM;AACT,gBAAM5E,OAAO,IAAb;AACA,gBAAM6E,UAAU,EAAEC,WAAU,IAAZ,EAAhB;AACA,gBAAMC,QAAQ,EAAd;AACA,gBAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAAE,uBAAO5E,IAAP;AAAc;AAC9C,gBAAMgF,KAAK,kBAAX;AACA,gBAAIC,QAAQD,GAAG5F,IAAH,CAAQwF,IAAR,CAAZ;AACA,mBAAMK,KAAN,EAAa;AACT,oBAAIA,MAAM,CAAN,CAAJ,EAAc;AACVF,0BAAMrD,IAAN,CAAWuD,MAAM,CAAN,CAAX;AACH,iBAFD,MAGK;AACDF,0BAAMrD,IAAN,CAAWuD,MAAM,CAAN,CAAX;AACH;AACDA,wBAAQD,GAAG5F,IAAH,CAAQwF,IAAR,CAAR;AACH;AACD,gBAAIG,MAAM1D,MAAN,KAAe,CAAnB,EAAsB;AAClB,uBAAOrB,IAAP;AACH;AACDA,iBAAK2E,OAAL;AACA,gBAAMO,cAAc,CAAE,MAAF,EAAU,KAAV,EAAiB,MAAjB,CAApB;AACAlF,iBAAKa,KAAL,CAAWsE,UAAX,CAAsBvD,OAAtB,CAA8B,UAASG,CAAT,EAAY;AACtC,oBAAIA,EAAEqD,IAAN,EAAY;AAAE;AAAS;AACvB,oBAAMxE,UAAUZ,KAAKa,KAAL,CAAWC,YAAX,CAAwBiB,EAAE1C,IAA1B,CAAhB;AACA,oBAAIuB,OAAJ,EAAa;AACT,wBAAKA,QAAQG,eAAR,KAA4B,aAA7B,IAAgDH,QAAQ6B,UAAR,KAAqBzC,KAAKa,KAAL,CAAWxB,IAApF,EAA2F;AACvF,4BAAMqD,cAAc1C,KAAKa,KAAL,CAAW8B,OAAX,CAAmB9B,KAAnB,CAAyBD,QAAQ8B,WAAjC,CAApB;AACA,4BAAIA,WAAJ,EAAiB;AACbA,wCAAYyC,UAAZ,CAAuBvD,OAAvB,CAA+B,UAASyD,CAAT,EAAY;AACvC,oCAAIH,YAAYI,OAAZ,CAAoBD,EAAEE,IAAtB,KAA6B,CAAjC,EAAoC;AAChCR,0CAAMnD,OAAN,CAAc,UAAU4D,CAAV,EAAa;AACvB,4CAAI,CAAC,QAAQlF,IAAR,CAAakF,CAAb,CAAL,EACIxF,KAAKyF,EAAL,CAAQ1D,EAAE1C,IAAF,GAAS,GAAT,GAAegG,EAAEhG,IAAzB,EAA+BqG,QAA/B,CAAwCF,CAAxC;AACP,qCAHD;AAIH;AACJ,6BAPD;AAQH;AACJ;AACJ;AACD,oBAAIN,YAAYI,OAAZ,CAAoBvD,EAAEwD,IAAtB,KAA6B,CAAjC,EAAoC;AAChCR,0BAAMnD,OAAN,CAAc,UAAUC,CAAV,EAAa;AACvB,4BAAI,CAAC,QAAQvB,IAAR,CAAauB,CAAb,CAAL,EACI7B,KAAKyF,EAAL,CAAQ1D,EAAE1C,IAAV,EAAgBqG,QAAhB,CAAyB7D,CAAzB;AACP,qBAHD;AAIH;AACJ,aAxBD;AAyBA7B,iBAAK2E,OAAL;AACA,mBAAO3E,IAAP;AACH;;;6BAEIa,K,EAAO;AACR,gBAAMb,OAAO,IAAb;AACA,gBAAI5B,EAAEuB,KAAF,CAAQkB,KAAR,CAAJ,EACI,OAAO,IAAP;AACJ;;;AAGA,gBAAM8E,YAAY3F,KAAKa,KAAL,CAAW8B,OAAX,CAAmB9B,KAAnB,CAAyBA,KAAzB,CAAlB;AACA;AACA,gBAAIzC,EAAEuB,KAAF,CAAQgG,SAAR,CAAJ,EACI,MAAM,IAAIzD,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,8BAAhB,EAAgD0C,KAAhD,CAAV,CAAN;AACJ,gBAAMJ,MAAMT,KAAKa,KAAL,CAAWsE,UAAX,CAAsBS,MAAtB,CAA6B,UAAS7D,CAAT,EAAY;AAAE,uBAAOA,EAAEwD,IAAF,KAASI,UAAUtG,IAA1B;AAAiC,aAA5E,CAAZ;AACA,gBAAIoB,IAAIY,MAAJ,KAAa,CAAjB,EACI,MAAM,IAAIa,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,8EAAhB,EAAgG,KAAK0C,KAAL,CAAWxB,IAA3G,EAAiHwB,KAAjH,CAAV,CAAN;AACJ,gBAAMD,UAAUZ,KAAKa,KAAL,CAAWC,YAAX,CAAwBL,IAAI,CAAJ,EAAOpB,IAA/B,CAAhB;AACA,gBAAMK,OAAOlB,gBAAgB8C,MAAhB,EAAb;AACA5B,iBAAKmD,KAAL,CAAW7C,KAAKG,YAAL,CAAkBS,QAAQkC,UAA1B,CAAX,EAAkDE,KAAlD,CAAwD2C,UAAUxF,YAAV,CAAuBS,QAAQqC,WAA/B,CAAxD;AACA;;;AAGA,gBAAMZ,SAAS1D,YAAY2C,MAAZ,CAAmBqE,UAAU/C,WAA7B,EAA0CM,IAA1C,EAAf;AACA;AACAlD,iBAAKW,MAAL,GAAca,KAAd,CAAoB2B,IAApB,CAAyBd,MAAzB,EAAiCe,IAAjC,CAAsC1D,IAAtC;AACA,mBAAOM,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;4BAcIjB,I,EAAM;AACN,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWqE,GAAX,CAAe/G,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAf;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWqE,GAAX,CAAe,KAAK1F,YAAL,CAAkBpB,IAAlB,CAAf;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;2BAcGA,I,EAAM;AACL,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWiE,EAAX,CAAc3G,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAd;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWiE,EAAX,CAAc,KAAKtF,YAAL,CAAkBpB,IAAlB,CAAd;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;8BAcM2B,G,EAAK;AACP,gBAAItC,EAAEqD,OAAF,CAAUf,GAAV,CAAJ,EAAoB;AAChB,qBAAKc,KAAL,CAAWsE,EAAX,CAAcpF,GAAd;AACA,uBAAO,IAAP;AACH;AACD,iBAAKc,KAAL,CAAWwB,KAAX,CAAiBtC,GAAjB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;2BAcGA,G,EAAK;AACJ,mBAAO,KAAKsC,KAAL,CAAWtC,GAAX,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;iCAeSA,G,EAAK;AACV,gBAAItC,EAAEqD,OAAF,CAAUf,GAAV,CAAJ,EAAoB;AAChB,qBAAKc,KAAL;AACH;AACD,iBAAKA,KAAL,CAAWuE,QAAX,CAAoBrF,GAApB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAyBYA,G,EAAK;AACb,iBAAKc,KAAL,CAAWwE,WAAX,CAAuBtF,GAAvB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;uCAgBeA,G,EAAK;AAChB,iBAAKc,KAAL,CAAWyE,cAAX,CAA0BvF,GAA1B;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;4BAmBIwF,K,EAAOjG,M,EAAQ;AACf,gBAAI7B,EAAEuB,KAAF,CAAQM,MAAR,CAAJ,EACI,KAAKuB,KAAL,CAAW2E,GAAX,CAAeD,KAAf,EAAsBA,KAAtB,EADJ,KAGI,KAAK1E,KAAL,CAAW2E,GAAX,CAAeD,KAAf,EAAsBjG,MAAtB;AACJ,mBAAO,IAAP;AACH;;AAED;;;;;;;;kCAKUS,G,EAAK;AACX,iBAAKc,KAAL,CAAW4E,SAAX,CAAqB1F,GAArB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;qCAgBaA,G,EAAK;AACd,iBAAKc,KAAL,CAAW6E,YAAX,CAAwB3F,GAAxB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;mCAoBWA,G,EAAK;AACZ,iBAAKc,KAAL,CAAW8E,UAAX,CAAsB5F,GAAtB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;iCAsBSA,G,EAAK;AACV,iBAAKc,KAAL,CAAW+E,QAAX,CAAoB7F,GAApB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;4BAcG8F,I,EAAM;AACL,iBAAKhF,KAAL,CAAWsE,EAAX,CAAcU,IAAd;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;8BAcMA,I,EAAM;AACR,iBAAKhF,KAAL,CAAWiF,KAAX,CAAiBD,IAAjB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;4BAMI9F,G,EAAKT,M,EAAQ;AACb,iBAAKuB,KAAL,CAAWkF,GAAX,CAAehG,GAAf,EAAoBT,MAApB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;iCAmBSiG,K,EAAO;AACZ,iBAAK1E,KAAL,CAAWkE,QAAX,CAAoBQ,KAApB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;oCAsBYA,K,EAAO;AACf,iBAAK1E,KAAL,CAAWmF,WAAX,CAAuBT,KAAvB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;gCAuBQU,M,EAAQC,M,EAAQ;AACpB,iBAAKrF,KAAL,CAAWsF,OAAX,CAAmBF,MAAnB,EAA2BC,MAA3B;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAkDO9H,I,EAAM;AACT,gBAAMiB,OAAO,IAAb;AACA,gBAAIS,YAAJ;AACA,gBAAIf,aAAJ;AACA,gBAAMqH,MAAOC,UAAU3F,MAAV,GAAiB,CAAlB,GAAuB4F,MAAMhI,SAAN,CAAgBiI,KAAhB,CAAsB3H,IAAtB,CAA2ByH,SAA3B,CAAvB,GAA8DjI,IAA1E;;AAEA,gBAAI,OAAOgI,GAAP,KAAe,QAAnB,EAA6B;AACzB,oBAAIA,QAAM,GAAV,EAAe;AACX;AACA,2BAAO/G,KAAKwB,KAAL,CAAWN,OAAlB;AACA,2BAAO,IAAP;AACH;AACD;AACA,oBAAIsB,QAAQxC,KAAKa,KAAL,CAAW2B,KAAX,CAAiBuE,GAAjB,CAAZ;AACA,oBAAIvE,KAAJ,EAAW;AACP;AACA,wBAAIA,MAAM4C,IAAN,IAAe5C,MAAM5B,OAAN,IAAiB4B,MAAM5B,OAAN,CAAcG,eAAd,KAAkC,UAAtE,EAAmF;AAC/Ef,6BAAKmH,MAAL,CAAY3E,MAAMnD,IAAlB;AACH,qBAFD,MAGK;AACDoB,8BAAM,EAAN;AACAA,4BAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBqC,MAAMnD,IAAxB,CAAT;AACH;AACJ,iBATD,MAUK;AACD;AACAW,yBAAKsE,KAAL,GAActE,KAAKa,KAAL,CAAWuG,WAAX,CAAuBL,GAAvB,CAAd;AACA;AACA,wBAAI/G,KAAKsE,KAAT,EAAgB;AACZ7D,8BAAM,EAAN;AACA,4BAAIpB,aAAJ;AACAW,6BAAKsE,KAAL,CAAW+C,MAAX,CAAkBzF,OAAlB,CAA0B,UAASG,CAAT,EAAY;AAClC1C,mCAAO0C,EAAE1C,IAAT;AACAmD,oCAAQxC,KAAKa,KAAL,CAAW2B,KAAX,CAAiBnD,IAAjB,CAAR;AACA;AACA,gCAAImD,KAAJ,EAAW;AACP;AACA,oCAAIA,MAAM4C,IAAN,IAAe5C,MAAM5B,OAAN,IAAiB4B,MAAM5B,OAAN,CAAcG,eAAd,KAAkC,UAAtE,EACIf,KAAKmH,MAAL,CAAY3E,MAAMnD,IAAlB,EADJ,KAGIoB,IAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBqC,MAAMnD,IAAxB,CAAT;AACP,6BAND,MAOK;AACD,oCAAIiI,IAAIxI,sBAAsBG,SAAtB,CAAgCsI,6BAAhC,CAA8DhI,IAA9D,CAAmES,IAAnE,EAAwEX,IAAxE,CAAR;AACA,oCAAIiI,CAAJ,EAAO;AACH5H,2CAAOZ,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+DS,IAA/D,EAAqEsH,EAAE/D,IAAvE,EAA8E+D,EAAEjI,IAAhF,CAAP;AACA,wCAAIK,IAAJ,EAAU;AAAEe,4CAAIiB,IAAJ,CAAShC,IAAT;AAAiB;AAChC,iCAHD,MAIK;AACD4H,wCAAIxI,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoDK,IAApD,CAAyDS,IAAzD,EAA8DX,IAA9D,CAAJ;AACA,wCAAIiI,CAAJ,EAAO;AACH5H,+CAAOZ,sBAAsBG,SAAtB,CAAgCiB,sBAAhC,CAAuDX,IAAvD,CAA4DS,IAA5D,EAAkEsH,EAAEjI,IAApE,EAA0E0C,EAAEuB,QAA5E,CAAP;AACA,4CAAI5D,IAAJ,EAAU;AAAEe,gDAAIiB,IAAJ,CAAShC,IAAT;AAAiB;AAChC,qCAHD,MAIK;AACD4H,4CAAIxI,sBAAsBG,SAAtB,CAAgCuI,aAAhC,CAA8CjI,IAA9C,CAAmDS,IAAnD,EAAwDX,IAAxD,CAAJ;AACA,4CAAIiI,CAAJ,EAAO;AACH7G,gDAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBmH,EAAEjI,IAApB,EAA0B0C,EAAEuB,QAA5B,CAAT;AACH,yCAFD,MAGK,IAAI,MAAMhD,IAAN,CAAWjB,IAAX,CAAJ,EAAsB;AACvBA,mDAAOA,KAAKmB,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP;AACAC,gDAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBd,IAAlB,CAAT;AACH,yCAHI,MAKL;AACIoB,gDAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBd,IAAlB,CAAT;AACH;AACJ;AACJ;AACJ;AACJ,yBAvCD;AAwCH;AACD;AA5CA,yBA6CK;AACDK,mCAAO+H,QAAQlI,IAAR,CAAaS,IAAb,EAAmB+G,GAAnB,CAAP;AACA,gCAAIrH,IAAJ,EAAU;AACNe,sCAAMA,OAAO,EAAb;AACAA,oCAAIiB,IAAJ,CAAShC,IAAT;AACH;AACJ;AACJ;AACD,oBAAItB,EAAEqD,OAAF,CAAUhB,GAAV,CAAJ,EAAoB;AAChB,wBAAIA,IAAIY,MAAJ,KAAa,CAAjB,EACIZ,MAAM,IAAN;AACP;AACJ,aA/ED,MAgFK;AACD;AACA,oBAAIrC,EAAEqD,OAAF,CAAUsF,GAAV,CAAJ,EAAoB;AAChBtG,0BAAM,EAAN;AACA;AACA,wBAAIsG,IAAI1F,MAAJ,KAAe,CAAf,IAAoB,OAAO0F,IAAI,CAAJ,CAAP,KAAkB,QAA1C,EAAoD;AAChD,4BAAI/G,KAAKa,KAAL,CAAWuG,WAAX,CAAuBL,IAAI,CAAJ,CAAvB,CAAJ,EAAoC;AAChC,mCAAO/G,KAAKW,MAAL,CAAYoG,IAAI,CAAJ,CAAZ,CAAP;AACH;AACJ;AACDA,wBAAInF,OAAJ,CAAY,UAASG,CAAT,EAAY;AACpB,4BAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACvB,gCAAMS,SAAQxC,KAAKa,KAAL,CAAW2B,KAAX,CAAiBT,CAAjB,CAAd;AACA,gCAAIS,MAAJ,EAAW;AACP,oCAAIA,OAAM4C,IAAN,IAAe5C,OAAM5B,OAAN,IAAiB4B,OAAM5B,OAAN,CAAcG,eAAd,KAAkC,UAAtE,EACIf,KAAKmH,MAAL,CAAY3E,OAAMnD,IAAlB,EADJ,KAGIoB,IAAIiB,IAAJ,CAAS1B,KAAKG,YAAL,CAAkBqC,OAAMnD,IAAxB,CAAT;AACP;AACD;AANA,iCAOK;AACDK,2CAAO+H,QAAQlI,IAAR,CAAaS,IAAb,EAAmB+B,CAAnB,CAAP;AACA,wCAAIrC,IAAJ,EAAU;AACNe,8CAAMA,OAAO,EAAb;AACAA,4CAAIiB,IAAJ,CAAShC,IAAT;AACH;AACJ;AACJ,yBAhBD,MAiBK;AACD;AACAe,gCAAIiB,IAAJ,CAASK,CAAT;AACH;AAEJ,qBAvBD;AAwBH;AACJ;AACD,gBAAI3D,EAAEuB,KAAF,CAAQc,GAAR,CAAJ,EAAkB;AACd,oBAAI,CAACT,KAAKwB,KAAL,CAAWkG,SAAX,EAAL,EAA6B;AACzB;AACA,wBAAML,SAASrH,KAAKa,KAAL,CAAWsE,UAAX,CAAsBS,MAAtB,CAA6B,UAAS7D,CAAT,EAAY;AACpD,+BAAO,EAAEA,EAAEqD,IAAF,IAAWrD,EAAEnB,OAAF,IAAamB,EAAEnB,OAAF,CAAUG,eAAV,KAA8B,UAAxD,CAAP;AACH,qBAFc,EAEZ4G,GAFY,CAER,UAAS5F,CAAT,EAAY;AACf,4BAAM6F,IAAInJ,WAAW6C,MAAX,CAAkBS,EAAE1C,IAApB,EAA0BkC,IAA1B,CAA+BvB,KAAKa,KAAL,CAAW+B,WAA1C,CAAV;AACA,4BAAIb,EAAEuB,QAAN,EACIsE,EAAEhI,EAAF,CAAKmC,EAAEuB,QAAP;AACJ,+BAAOsE,CAAP;AACH,qBAPc,CAAf;AAQA;AACA5H,yBAAKW,MAAL,CAAYgB,KAAZ,CAAkB3B,IAAlB,EAAuBqH,MAAvB;AACH;AACJ,aAdD,MAeK;AACDrH,qBAAKwB,KAAL,CAAWb,MAAX,CAAkBF,GAAlB;AACH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;;mCAMW1B,I,EAAM;AACb,gBAAMiB,OAAO,IAAb;AACA,gBAAI,CAACA,KAAKwB,KAAL,CAAWkG,SAAX,EAAL,EAA6B;AACzB,uBAAO1H,KAAKW,MAAL,CAAY5B,IAAZ,CAAP;AACH,aAFD,MAGK;AACD,oBAAIX,EAAEuB,KAAF,CAAQZ,IAAR,CAAJ,EACI,OAAOiB,IAAP;AACJ,oBAAIS,MAAM,EAAV;AACA,oBAAI,OAAO1B,IAAP,KAAgB,QAApB,EAA8B;AAC1B0B,wBAAIiB,IAAJ,CAAS3C,IAAT;AACH,iBAFD,MAGK,IAAIX,EAAEqD,OAAF,CAAU1C,IAAV,CAAJ,EAAqB;AACtB0B,0BAAM1B,KAAKmI,KAAL,CAAW,CAAX,CAAN;AACH,iBAFI,MAGA,IAAI,QAAOnI,IAAP,yCAAOA,IAAP,OAAgB,QAApB,EAA8B;AAC/B0B,wBAAIiB,IAAJ,CAAS3C,IAAT;AACH;AACD,oBAAMmC,UAAUlB,KAAKwB,KAAL,CAAWN,OAA3B;AACAT,oBAAImB,OAAJ,CAAY,UAASG,CAAT,EAAY;AACpB,wBAAMS,QAAQxC,KAAKG,YAAL,CAAkB4B,CAAlB,CAAd;AACA,wBAAI3D,EAAEqD,OAAF,CAAUP,QAAQlB,KAAKa,KAAL,CAAW+B,WAAnB,CAAV,CAAJ,EACI1B,QAAQlB,KAAKa,KAAL,CAAW+B,WAAnB,EAAgClB,IAAhC,CAAqCc,KAArC;AAEP,iBALD;AAMA,uBAAOxC,IAAP;AACH;AACJ;;AAED;;;;;;;;qCAKajB,I,EAAMU,K,EAAO;;AAEtB,gBAAI,OAAOV,IAAP,KAAe,WAAf,IAA8BA,SAAS,IAA3C,EACI,OAAOA,IAAP;AACJ,gBAAI,OAAOA,IAAP,KAAe,QAAnB,EACI,OAAOA,IAAP;AACJ,gBAAII,UAAU,oCAAoCC,IAApC,CAAyCL,IAAzC,CAAd;AAAA,gBAA8DqD,YAA9D;AAAA,gBAAmEI,cAAnE;AAAA,gBAA0Ee,aAA1E;AAAA,gBAAgFsE,aAAhF;AACA,gBAAI1I,OAAJ,EAAa;AACT;AACAqD,wBAAQ,KAAK3B,KAAL,CAAW2B,KAAX,CAAiBrD,QAAQ,CAAR,CAAjB,CAAR;AACA;AACAoE,uBAAOpE,QAAQ,CAAR,EAAW2I,WAAX,EAAP;AACA;AACA,oBAAI1J,EAAEuB,KAAF,CAAQ6C,KAAR,KAAkB,KAAKlC,IAAL,CAAUnB,QAAQ,CAAR,CAAV,CAAtB,EAA6C;AACzC;AACA,wBAAM4I,aAAajJ,sBAAsBG,SAAtB,CAAgCO,sBAAhC,CAAuDD,IAAvD,CAA4D,IAA5D,EAAkEJ,QAAQ,CAAR,CAAlE,CAAnB;AACA;AACA,wBAAI4I,UAAJ,EAAgB;AACZ,4BAAI3J,EAAEuB,KAAF,CAAQF,KAAR,CAAJ,EAAoB;AAChB,gCAAMuI,gBAAgB,cAAc5I,IAAd,CAAmBL,IAAnB,CAAtB;AACAU,oCAAQrB,EAAEuB,KAAF,CAAQqI,aAAR,IAAyBzE,KAAK0E,MAAL,CAAY,KAAZ,EAAmB9I,QAAQ,CAAR,EAAWU,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAnB,CAAzB,GAA8EmI,cAAc,CAAd,CAAtF;AACH;AACD;;;AAGA,4BAAME,gBAAgBxJ,gBAAgB6E,IAAhB,CAAtB;AACA,4BAAI,OAAO2E,aAAP,KAAyB,UAA7B,EAAyC;AACrC,kCAAM,IAAIC,cAAJ,CAAmB,qDAAnB,CAAN;AACH;AACD;AACA,+BAAOD,cAAcH,WAAW1H,KAAzB,EAAgCT,EAAhC,CAAmCH,KAAnC,CAAP;AACH;AACJ;AACD,oBAAI,OAAQ+C,KAAR,KAAkB,WAAlB,IAAiCA,UAAU,IAA/C,EACI,MAAM,IAAIN,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,yDAAhB,EAA2EgB,QAAQ,CAAR,CAA3E,CAAV,CAAN;AACJ,oBAAIf,EAAEuB,KAAF,CAAQF,KAAR,CAAJ,EAAoB;AAChBN,8BAAU,cAAcC,IAAd,CAAmBL,IAAnB,CAAV;AACA,wBAAII,OAAJ,EAAa;AACTM,gCAAQN,QAAQ,CAAR,CAAR;AACH,qBAFD,MAGK;AACDM,gCAAQ8D,KAAK0E,MAAL,CAAY,IAAZ,EAAkBzF,MAAMnD,IAAxB,CAAR;AACH;AACJ;AACD,oBAAIkE,SAAO,OAAX,EACI,OAAO9E,WAAW6C,MAAX,GAAoB8G,KAApB,CAA0B5F,MAAMnD,IAAhC,EAAsCkC,IAAtC,CAA2C,KAAKV,KAAL,CAAW+B,WAAtD,EAAmEhD,EAAnE,CAAsEH,KAAtE,CAAP,CADJ,KAEK,IAAI8D,SAAO,KAAX,EACD,OAAO9E,WAAW6C,MAAX,GAAoB+G,OAApB,CAA4B7F,MAAMnD,IAAlC,EAAwCkC,IAAxC,CAA6C,KAAKV,KAAL,CAAW+B,WAAxD,EAAqEhD,EAArE,CAAwEH,KAAxE,CAAP,CADC,KAEA,IAAI8D,SAAO,KAAX,EACD,OAAO9E,WAAW6C,MAAX,GAAoBgH,GAApB,CAAwB9F,MAAMnD,IAA9B,EAAoCkC,IAApC,CAAyC,KAAKV,KAAL,CAAW+B,WAApD,EAAiEhD,EAAjE,CAAoEH,KAApE,CAAP,CADC,KAEA,IAAI8D,SAAO,KAAX,EACD,OAAO9E,WAAW6C,MAAX,GAAoBiH,GAApB,CAAwB/F,MAAMnD,IAA9B,EAAoCkC,IAApC,CAAyC,KAAKV,KAAL,CAAW+B,WAApD,EAAiEhD,EAAjE,CAAoEH,KAApE,CAAP,CADC,KAEA,IAAI8D,SAAO,KAAX,EACD,OAAO9E,WAAW6C,MAAX,GAAoBkH,GAApB,CAAwBhG,MAAMnD,IAA9B,EAAoCkC,IAApC,CAAyC,KAAKV,KAAL,CAAW+B,WAApD,EAAiEhD,EAAjE,CAAoEH,KAApE,CAAP;AACP,aA/CD,MAgDK;AACDN,0BAAU,kBAAkBC,IAAlB,CAAuBL,IAAvB,CAAV;AACA,oBAAII,OAAJ,EAAa;AACTiD,0BAAM,EAAN;AACAI,4BAAQ,KAAK3B,KAAL,CAAW2B,KAAX,CAAiBrD,QAAQ,CAAR,CAAjB,CAAR;AACAoE,2BAAOpE,QAAQ,CAAR,CAAP;AACA,wBAAI,OAAQqD,KAAR,KAAkB,WAAlB,IAAiCA,UAAU,IAA/C,EACI,MAAM,IAAIN,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,yDAAhB,EAA2EgB,QAAQ,CAAR,CAA3E,CAAV,CAAN;AACJ,wBAAIf,EAAEuB,KAAF,CAAQF,KAAR,CAAJ,EAAoB;AAChBN,kCAAU,cAAcC,IAAd,CAAmBL,IAAnB,CAAV;AACA,4BAAII,OAAJ,EAAa;AACTM,oCAAQN,QAAQ,CAAR,CAAR;AACH;AACJ;AACD0I,2BAAOpI,SAAS+C,MAAMc,QAAf,IAA2Bd,MAAMnD,IAAxC;AACA+C,wBAAIyF,IAAJ,IAAY,EAAZ,CAAiBzF,IAAIyF,IAAJ,EAAU,MAAMtE,IAAhB,IAAwB,CAAE9E,WAAW6C,MAAX,CAAkBkB,MAAMnD,IAAxB,EAA8BkC,IAA9B,CAAmC,KAAKV,KAAL,CAAW+B,WAA9C,CAAF,CAAxB;AACjB,2BAAOR,GAAP;AACH,iBAfD,MAgBK;AACD;AACAjD,8BAAU,wBAAwBC,IAAxB,CAA6BL,IAA7B,CAAV;AACA,wBAAII,OAAJ,EAAa;AACTqD,gCAAQ,KAAK3B,KAAL,CAAW2B,KAAX,CAAiBrD,QAAQ,CAAR,CAAjB,CAAR;AACA,4BAAI,OAAQqD,KAAR,KAAkB,WAAlB,IAAiCA,UAAU,IAA/C,EACI,MAAM,IAAIN,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,yDAAhB,EAA2EY,IAA3E,CAAV,CAAN;AACJU,gCAAQN,QAAQ,CAAR,CAAR;AACA0I,+BAAOpI,SAAS+C,MAAMc,QAAf,IAA2Bd,MAAMnD,IAAxC;AACA,+BAAOZ,WAAW6C,MAAX,CAAkBkB,MAAMnD,IAAxB,EAA8BkC,IAA9B,CAAmC,KAAKV,KAAL,CAAW+B,WAA9C,EAA2DhD,EAA3D,CAA8DiI,IAA9D,CAAP;AACH,qBAPD,MAQK;AACD;AACArF,gCAAQ,KAAK3B,KAAL,CAAW2B,KAAX,CAAiBzD,IAAjB,CAAR;AACA,4BAAI,OAAQyD,KAAR,KAAkB,WAAlB,IAAiCA,UAAU,IAA/C,EACI,MAAM,IAAIN,KAAJ,CAAU/D,QAAQA,OAAR,CAAgB,yDAAhB,EAA2EY,IAA3E,CAAV,CAAN;AACJ,4BAAM6I,IAAInJ,WAAW6C,MAAX,CAAkBkB,MAAMnD,IAAxB,EAA8BkC,IAA9B,CAAmC,KAAKV,KAAL,CAAW+B,WAA9C,CAAV;AACA,4BAAIJ,MAAMc,QAAV,EACI,OAAOsE,EAAEhI,EAAF,CAAK4C,MAAMc,QAAX,CAAP;AACJ,+BAAOsE,CAAP;AACH;AACJ;AACJ;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;gCAKQ7I,I,EAAM;AACV,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWiH,OAAX,CAAmB3J,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDnJ,IAAvD,CAA4D,IAA5D,EAAkER,IAAlE,CAAnB;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWiH,OAAX,CAAmB,KAAKtI,YAAL,CAAkBpB,IAAlB,CAAnB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAyBQA,I,EAAM;AACV,gBAAM0B,MAAM,EAAZ;AAAA,gBAAgBsG,MAAOC,UAAU3F,MAAV,GAAiB,CAAlB,GAAuB4F,MAAMhI,SAAN,CAAgBiI,KAAhB,CAAsB3H,IAAtB,CAA2ByH,SAA3B,CAAvB,GAA8DjI,IAApF;AACA,gBAAIX,EAAEqD,OAAF,CAAUsF,GAAV,CAAJ,EAAoB;AAChB,qBAAK,IAAI4B,IAAI,CAAb,EAAgBA,IAAI5B,IAAI1F,MAAxB,EAAgCsH,GAAhC,EAAqC;AACjC,wBAAM5G,IAAIgF,IAAI4B,CAAJ,CAAV;AACA,wBAAI7J,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoD0J,IAApD,CAAyD,IAAzD,EAA+D7G,CAA/D,CAAJ,EAAuE;AACnE;AACAtB,4BAAIiB,IAAJ,CAAS5C,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDE,IAAvD,CAA4D,IAA5D,EAAkE7G,CAAlE,CAAT;AACH,qBAHD,MAIK;AACDtB,4BAAIiB,IAAJ,CAAS,KAAKvB,YAAL,CAAkB4B,CAAlB,CAAT;AACH;AACJ;AACJ,aAXD,MAYK;AACD,oBAAIjD,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoD0J,IAApD,CAAyD,IAAzD,EAA+D7B,GAA/D,CAAJ,EAAyE;AACrE;AACAtG,wBAAIiB,IAAJ,CAAS5C,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDE,IAAvD,CAA4D,IAA5D,EAAkE7B,GAAlE,CAAT;AACH,iBAHD,MAIK;AACDtG,wBAAIiB,IAAJ,CAAS,KAAKvB,YAAL,CAAkB4G,GAAlB,CAAT;AACH;AACJ;AACD,gBAAItG,IAAIY,MAAJ,GAAW,CAAf,EAAkB;AACd,qBAAKG,KAAL,CAAWqH,OAAX,CAAmBpI,GAAnB;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;+BAKO1B,I,EAAM;AACT,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWsH,MAAX,CAAkBhK,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDE,IAAvD,CAA4D,IAA5D,EAAkE7J,IAAlE,CAAlB;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWsH,MAAX,CAAkB,KAAK3I,YAAL,CAAkBpB,IAAlB,CAAlB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;0CAKkBA,I,EAAM;AACpB,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWuH,iBAAX,CAA6BjK,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDE,IAAvD,CAA4D,IAA5D,EAAkE7J,IAAlE,CAA7B;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWuH,iBAAX,CAA6B,KAAK5I,YAAL,CAAkBpB,IAAlB,CAA7B;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;yCAKiBA,I,EAAM;AACnB,gBAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,KAAKuB,IAAL,CAAUvB,IAAV,CAAhC,EAAiD;AAC7C,qBAAKyC,KAAL,CAAWwH,gBAAX,CAA4BlK,sBAAsBG,SAAtB,CAAgCyJ,sBAAhC,CAAuDE,IAAvD,CAA4D,IAA5D,EAAkE7J,IAAlE,CAA5B;AACA,uBAAO,IAAP;AACH;AACD,iBAAKyC,KAAL,CAAWwH,gBAAX,CAA4B,KAAK7I,YAAL,CAAkBpB,IAAlB,CAA5B;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;8BAcMkK,Q,EAAU;AAAA;;AACZ,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,uBAAOC,cAAc3J,IAAd,CAAmB,IAAnB,EAAyB0J,QAAzB,CAAP;AACH;AACD,mBAAO5K,EAAE8K,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClC,uBAAOH,cAAcN,IAAd,QAAyB,UAACU,GAAD,EAAMrJ,MAAN,EAAiB;AAC7C,wBAAIqJ,GAAJ,EAAS;AACL,+BAAOD,OAAOC,GAAP,CAAP;AACH;AACD,2BAAOF,QAAQnJ,MAAR,CAAP;AACH,iBALM,CAAP;AAMH,aAPM,CAAP;AAQH;;AAED;;;;;;;;4BAKIgJ,Q,EAAU;AAAA;;AACV,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,uBAAOM,YAAYhK,IAAZ,CAAiB,IAAjB,EAAuB0J,QAAvB,CAAP;AACH;AACD,mBAAO5K,EAAE8K,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClC,uBAAOE,YAAYX,IAAZ,SAAuB,UAACU,GAAD,EAAMrJ,MAAN,EAAiB;AAC3C,wBAAIqJ,GAAJ,EAAS;AACL,+BAAOD,OAAOC,GAAP,CAAP;AACH;AACD,2BAAOF,QAAQnJ,MAAR,CAAP;AACH,iBALM,CAAP;AAMH,aAPM,CAAP;AAQH;;AAED;;;;;;;;;;;;;;;;;;6BAeKuJ,C,EAAG;AACJ,iBAAKhI,KAAL,CAAWiI,KAAX,GAAmBD,CAAnB;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;;;6BAMKA,C,EAAGP,Q,EAAU;AACd,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,qBAAKzH,KAAL,CAAWkI,IAAX,CAAgBF,CAAhB;AACA,uBAAO,IAAP;AACH,aAHD,MAIK;AACDG,6BAAapK,IAAb,CAAkB,IAAlB,EAAwBiK,CAAxB,EAA2BP,QAA3B;AACH;AACJ;;AAED;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAgEKA,Q,EAAU;AACX,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAC,6BAAalB,IAAb,CAAkB,IAAlB,EAAwB,UAASU,GAAT,EAAcrJ,MAAd,EAAsB;AAC1C,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAOW,aAAavK,IAAb,CAAkB,IAAlB,EAAwB0J,QAAxB,CAAP;AACH;AACJ;;AAED;;;;;;;mCAIW;AACP,gBAAMjJ,OAAO,IAAb;AACA,mBAAO3B,EAAE8K,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClC,uBAAOrJ,KAAKwB,KAAL,CAAWuI,YAAlB;AACA,oBAAI,CAACC,SAAShK,KAAKwB,KAAL,CAAWyI,KAApB,KAA8B,CAA/B,IAAoC,CAAxC,EAA2C;AACvC,2BAAOjK,KAAKwB,KAAL,CAAWyI,KAAlB;AACA,2BAAOjK,KAAKwB,KAAL,CAAWiI,KAAlB;AACH;AACD,oBAAI,CAACzJ,KAAKwB,KAAL,CAAWkG,SAAX,EAAL,EAA6B;AACzB1H,yBAAKW,MAAL;AACH;AACDuJ,yBAAS3K,IAAT,CAAcS,IAAd,EAAmB,UAASsJ,GAAT,EAAcrJ,MAAd,EAAsB;AACrC,wBAAIqJ,GAAJ,EAAS;AACL,+BAAOD,OAAOC,GAAP,CAAP;AACH;AACD,2BAAOF,QAAQnJ,MAAR,CAAP;AACH,iBALD;AAMH,aAfM,CAAP;AAgBH;;AAED;;;;;;;;;;;;;;;;;8BAcMgJ,Q,EAAU;AACZ,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAM,8BAAc5K,IAAd,CAAmB,IAAnB,EAAyB,UAAS+J,GAAT,EAAcrJ,MAAd,EAAsB;AAC3C,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAOgB,cAAc5K,IAAd,CAAmB,IAAnB,EAAyB0J,QAAzB,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;4BAeIlK,I,EAAMkK,Q,EAAU;AAChB,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAO,4BAAY7K,IAAZ,CAAiB,IAAjB,EAAuBR,IAAvB,EAA6B,UAASuK,GAAT,EAAcrJ,MAAd,EAAsB;AAC/C,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAOiB,YAAY7K,IAAZ,CAAiB,IAAjB,EAAuBR,IAAvB,EAA6BkK,QAA7B,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;4BAeIlK,I,EAAMkK,Q,EAAU;AAChB,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAQ,4BAAY9K,IAAZ,CAAiB,IAAjB,EAAuBR,IAAvB,EAA6B,UAASuK,GAAT,EAAcrJ,MAAd,EAAsB;AAC/C,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAOkB,YAAY9K,IAAZ,CAAiB,IAAjB,EAAuBR,IAAvB,EAA6BkK,QAA7B,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;gCAeQlK,I,EAAMkK,Q,EAAU;AACpB,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAS,iCAAiB1B,IAAjB,CAAsB,IAAtB,EAA4B7J,IAA5B,EAAkC,UAASuK,GAAT,EAAcrJ,MAAd,EAAsB;AACpD,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAOmB,iBAAiB1B,IAAjB,CAAsB,IAAtB,EAA4B7J,IAA5B,EAAkCkK,QAAlC,CAAP;AACH;AACJ;;AAED;;;;;;;gCAIQA,Q,EAAU;AACd,gBAAMjJ,OAAO,IAAb;AACA,gBAAI;AACA;AACAA,qBAAKuK,aAAL;AACA,oBAAIvK,KAAKa,KAAT,EAAgB;AACZb,yBAAKa,KAAL,CAAW2J,OAAX,CAAmB,UAASlB,GAAT,EAAc;AAC7BL,iCAASK,GAAT;AACH,qBAFD;AAGH,iBAJD,MAKK;AACDL;AACH;AACJ,aAXD,CAYA,OAAOwB,CAAP,EAAU;AACNxB,yBAASwB,CAAT;AACH;AAEJ;;;oCAEWxK,M,EAAQgJ,Q,EAAU;AAC1BA;AACH;;AAED;;;;;;;;;;;;;;;;;;+BAeO/C,K,EAAO;AACV;;;;AAIA,iBAAK7B,OAAL,GAAe,KAAf;AACA,gBAAI,OAAO6B,KAAP,KAAiB,WAArB,EAAkC;AAC9B,qBAAK7B,OAAL,GAAe,IAAf;AACH,aAFD,MAGK;AACD,qBAAKA,OAAL,GAAe6B,KAAf;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;gCAIQ;AACJ,gBAAM1C,IAAI,EAAEhC,OAAM,KAAKA,KAAb,EAAV;AACA,gBAAI,OAAO,KAAKL,OAAZ,KAAwB,WAA5B,EAAyC;AAAEqC,kBAAErC,OAAF,GAAW,KAAKA,OAAhB;AAA0B;AACrE,gBAAI,OAAO,KAAKoD,OAAZ,KAAuB,WAA3B,EAAwC;AAAEf,kBAAEe,OAAF,GAAW,KAAKA,OAAhB;AAA0B;AACpE,gBAAI,OAAO,KAAKC,QAAZ,KAAwB,WAA5B,EAAyC;AAAEhB,kBAAEgB,QAAF,GAAY,KAAKA,QAAjB;AAA4B;AACvE,gBAAI,OAAO,KAAKH,OAAZ,KAAuB,WAA3B,EAAwC;AAAEb,kBAAEa,OAAF,GAAW,KAAKA,OAAhB;AAA0B;AACpE,gBAAI,OAAO,KAAKqG,QAAZ,KAAwB,WAA5B,EAAyC;AAAElH,kBAAEkH,QAAF,GAAY,KAAKA,QAAjB;AAA4B;AACvE,mBAAO9L,UAAU+L,KAAV,CAAgBnH,CAAhB,CAAP;AACH;;AAED;;;;;;;gCAIQ0C,K,EAAO;AACX;;;;AAIA,iBAAKwE,QAAL,GAAgB,KAAhB;AACA,gBAAI,OAAOxE,KAAP,KAAiB,WAArB,EAAkC;AAC9B,qBAAKwE,QAAL,GAAgB,IAAhB;AACH,aAFD,MAGK;AACD,qBAAKA,QAAL,GAAgBxE,KAAhB;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;;6BAMK7G,I,EAAM6G,K,EAAO;AACd,iBAAK1E,KAAL,CAAWoJ,IAAX,GAAkB,KAAKpJ,KAAL,CAAWoJ,IAAX,IAAmB,EAArC;AACA,gBAAI,OAAOvL,IAAP,KAAgB,WAApB,EAAiC;AAC7B,uBAAO,KAAKmC,KAAL,CAAWoJ,IAAlB;AACH;AACD,gBAAI,OAAO1E,KAAP,KAAiB,WAArB,EAAkC;AAC9B,uBAAO,KAAK1E,KAAL,CAAWoJ,IAAX,CAAgBvL,IAAhB,CAAP;AACH,aAFD,MAGK;AACD,qBAAKmC,KAAL,CAAWoJ,IAAX,CAAgBvL,IAAhB,IAAwB6G,KAAxB;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;8BAKMA,K,EAAO;AACT,mBAAO,KAAK0E,IAAL,CAAU,OAAV,EAAmB1E,KAAnB,CAAP;AACH;;AAED;;;;;;;;8BAKMA,K,EAAO;AACT,mBAAO,KAAK0E,IAAL,CAAU,OAAV,EAAmB1E,KAAnB,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA0DOnH,I,EAAM;AACT,gBAAMiB,OAAO,IAAb;AAAA,gBAAmB+G,MAAOC,UAAU3F,MAAV,GAAiB,CAAlB,GAAuB4F,MAAMhI,SAAN,CAAgBiI,KAAhB,CAAsB3H,IAAtB,CAA2ByH,SAA3B,CAAvB,GAA8DjI,IAAvF;AACA,gBAAIX,EAAEuB,KAAF,CAAQoH,GAAR,CAAJ,EAAkB;AACd,uBAAO/G,KAAKmB,OAAZ;AACH,aAFD,MAGK;AACD,oBAAI,CAAC/C,EAAEqD,OAAF,CAAU,KAAKN,OAAf,CAAL,EACInB,KAAKmB,OAAL,GAAa,EAAb;AACJ,oBAAI/C,EAAEqD,OAAF,CAAUsF,GAAV,CAAJ,EAAoB;AAChBA,wBAAInF,OAAJ,CAAY,UAASG,CAAT,EAAY;AACpB,4BAAI3D,EAAEuB,KAAF,CAAQoC,CAAR,CAAJ,EAAgB;AACZ;AACH;AACD,4BAAK,OAAOA,CAAP,KAAa,QAAd,IACI,QAAOA,CAAP,yCAAOA,CAAP,OAAa,QAAb,IAAyBA,EAAE8I,cAAF,CAAiB,MAAjB,CADjC,EAC4D;AACxD7K,iCAAKmB,OAAL,CAAaO,IAAb,CAAkBK,CAAlB;AACH,yBAHD,MAIK;AACD,kCAAM,IAAIG,KAAJ,CAAU,kDAAV,CAAN;AACH;AACJ,qBAXD;AAYH,iBAbD,MAcK;AACDlC,yBAAKmB,OAAL,CAAaO,IAAb,CAAkBqF,GAAlB;AACH;AACJ;AACD,mBAAO/G,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;gCAuBQkG,K,EAAO;;AAEX,gBAAIA,SAAU,OAAOA,KAAP,KAAe,WAA7B,EAA2C;AACvC;AACA,uBAAO,KAAK/E,OAAZ;AACA,qBAAKqD,QAAL,GAAgB,IAAhB;AACH,aAJD,MAKK;AACD,uBAAO,KAAKA,QAAZ;AACH;AACD,gBAAI,KAAKA,QAAT,EAAmB;AACf,qBAAKD,OAAL,GAAe,CAAf;AACH;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;4BAgBIxC,C,EAAG;AACH,iBAAKP,KAAL,CAAWsJ,GAAX,CAAe/I,CAAf,EAAmB,OAAO,IAAP;AACtB;;AAED;;;;;;;;;;;;;;;;;;iCAeSA,C,EAAG;AACR,iBAAKP,KAAL,CAAWuJ,QAAX,CAAoBhJ,CAApB,EAAwB,OAAO,IAAP;AAC3B;;AAED;;;;;;;;;;;;;;;;;;;iCAgBSA,C,EAAG;AACR,iBAAKP,KAAL,CAAWwJ,QAAX,CAAoBjJ,CAApB,EAAwB,OAAO,IAAP;AAC3B;;AAED;;;;;;;;;;;;;;;;;;;+BAgBOA,C,EAAG;AACN,iBAAKP,KAAL,CAAWyJ,MAAX,CAAkBlJ,CAAlB,EAAsB,OAAO,IAAP;AACzB;;AAED;;;;;;;;8BAKMyH,C,EAAG;AACL,iBAAKhI,KAAL,CAAW0J,KAAX,CAAiB1B,CAAjB,EAAqB,OAAO,IAAP;AACxB;;AAED;;;;;;;;;;;;;;;;;;;;;;;;+BAqBO2B,K,EAAO9J,M,EAAQ;AAClB,iBAAKG,KAAL,CAAW4J,MAAX,CAAkBD,KAAlB,EAAwB9J,MAAxB,EAAiC,OAAO,IAAP;AACpC;;AAED;;;;;;;;+BAKOgC,C,EAAG;AACN,iBAAK7B,KAAL,CAAWyG,MAAX,CAAkB5E,CAAlB,EAAsB,OAAO,IAAP;AACzB;;AAED;;;;;;;+BAIO;AACH,iBAAK7B,KAAL,CAAW6J,IAAX,GAAmB,OAAO,IAAP;AACtB;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;iCAsBS;AACL,iBAAK7J,KAAL,CAAWH,MAAX,GAAqB,OAAO,IAAP;AACxB;;AAED;;;;;;;;;;;;;;;;;kCAcU;AACN,iBAAKG,KAAL,CAAW8J,OAAX,GAAsB,OAAO,IAAP;AACzB;;AAED;;;;;;;;;;;;;;;;kCAaU;AACN,iBAAK9J,KAAL,CAAW+J,OAAX,GAAsB,OAAO,IAAP;AACzB;;AAED;;;;;;;;;;;;;;;;sCAac;AACV,iBAAK/J,KAAL,CAAW+J,OAAX,GAAsB,OAAO,IAAP;AACzB;;AAED;;;;;;;;;;;;;;;;;;mCAeW;AACP,iBAAK/J,KAAL,CAAWgK,QAAX,GAAuB,OAAO,IAAP;AAC1B;;AAED;;;;;;;;;;;;;;;;;;iCAeS;AACL,iBAAKhK,KAAL,CAAWiK,MAAX,GAAqB,OAAO,IAAP;AACxB;;AAED;;;;;;;mCAIW;AACP,iBAAKjK,KAAL,CAAWkK,QAAX,GAAuB,OAAO,IAAP;AAC1B;;AAED;;;;;;;qCAIa;AACT,iBAAKlK,KAAL,CAAWmK,UAAX,GAAyB,OAAO,IAAP;AAC5B;;AAED;;;;;;;qCAIa;AACT,iBAAKnK,KAAL,CAAWoK,UAAX,GAAyB,OAAO,IAAP;AAC5B;;AAED;;;;;;;gCAIQ;AACJ,iBAAKpK,KAAL,CAAWqK,KAAX,GAAoB,OAAO,IAAP;AACvB;;AAED;;;;;;;+BAIO;AACH,iBAAKrK,KAAL,CAAWsK,IAAX,GAAmB,OAAO,IAAP;AACtB;;AAED;;;;;;;4CAIoB;AAChB,iBAAKtK,KAAL,CAAWuK,iBAAX,GAAgC,OAAO,IAAP;AACnC;;AAED;;;;;;;;;;;;;;;;sCAac;AACV,mBAAO,KAAKA,iBAAL,EAAP;AACH;;AAED;;;;;;;4CAIoB;AAChB,iBAAKvK,KAAL,CAAWwK,iBAAX,GAAgC,OAAO,IAAP;AACnC;;AAED;;;;;;;sCAIc;AACV,mBAAO,KAAKA,iBAAL,EAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;8BAeM/C,Q,EAAU;AACZ,gBAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChC,oBAAMW,IAAIvL,EAAEwL,KAAF,EAAV;AACAoC,8BAAcrD,IAAd,CAAmB,IAAnB,EAAyB,UAASU,GAAT,EAAcrJ,MAAd,EAAsB;AAC3C,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AAAuB;AAClCM,sBAAER,OAAF,CAAUnJ,MAAV;AACH,iBAHD;AAIA,uBAAO2J,EAAET,OAAT;AACH,aAPD,MAQK;AACD,uBAAO8C,cAAcrD,IAAd,CAAmB,IAAnB,EAAyBK,QAAzB,CAAP;AACH;AACJ;;AAED;;;;;;;;;;;;;;;;;;;;;+BAkBO/C,K,EAAO;AACV;;;;AAIA,iBAAK3B,OAAL,GAAe,CAAf;AACA,gBAAI,OAAO2B,KAAP,KAAiB,WAArB,EAAkC;AAC9B,qBAAK3B,OAAL,GAAe,CAAf;AACH,aAFD,MAGK,IAAI,OAAO2B,KAAP,KAAiB,QAArB,EAA+B;AAChC,qBAAK3B,OAAL,GAAeyF,SAAS9D,KAAT,CAAf;AACH;AACD;AACA,iBAAK1B,QAAL,GAAiB,KAAKD,OAAL,GAAa,CAA9B;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;;oCAIY;AACR,gBAAI,OAAO,KAAKA,OAAZ,KAAwB,QAA5B,EAAsC;AAClC,uBAAO,KAAKA,OAAZ;AACH;AACD,mBAAO,CAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;;iCAmBSxF,I,EAAM;AACX,gBAAK,OAAOA,IAAP,KAAgB,QAAjB,IAA+BA,KAAKsC,MAAL,GAAY,CAA/C,EAAmD;AAC/C,uBAAO;AACHhC,0BAAMN,IADH;AAEH8F,6BAAS;AAFN,iBAAP;AAIH;AACD,kBAAM,IAAI3C,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED;;;;;;;kCAIU;AACN,mBAAO,KAAKgK,KAAL,EAAP;AACH;;AAED;;;;;;;uCAIe;AACX,gBAAMlM,OAAO,IAAb;AACA,mBAAO3B,EAAE8K,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClC,uBAAOrJ,KAAKmM,OAAL,GAAeC,IAAf,CAAoB,UAACnM,MAAD,EAAY;AACnC,2BAAOmJ,QAAQpJ,KAAKa,KAAL,CAAWwL,OAAX,CAAmBpM,MAAnB,CAAR,CAAP;AACH,iBAFM,EAEJqM,KAFI,CAEE,UAAChD,GAAD,EAAS;AACd,2BAAOD,OAAOC,GAAP,CAAP;AACH,iBAJM,CAAP;AAKH,aANM,CAAP;AAOH;;AAED;;;;;;;wCAIgB;AACZ,gBAAMtJ,OAAO,IAAb;AACA,mBAAO3B,EAAE8K,OAAF,CAAU,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAClC,uBAAOrJ,KAAKuM,QAAL,GAAgBH,IAAhB,CAAqB,UAACnM,MAAD,EAAY;AACpC,2BAAOmJ,QAAQpJ,KAAKa,KAAL,CAAWwL,OAAX,CAAmBpM,MAAnB,CAAR,CAAP;AACH,iBAFM,EAEJqM,KAFI,CAEE,UAAChD,GAAD,EAAS;AACd,2BAAOD,OAAOC,GAAP,CAAP;AACH,iBAJM,CAAP;AAKH,aANM,CAAP;AAOH;;AAED;;;;;;;kCAIU;AACN,mBAAO,KAAKkD,IAAL,EAAP;AACH;;AAED;;;;;;;uCAIe;AACX,gBAAMxM,OAAO,IAAb;AAAA,gBAAmB4J,IAAIvL,EAAEwL,KAAF,EAAvB;AACA4C,oBAAQC,QAAR,CAAiB,YAAW;AACxB1M,qBAAKwM,IAAL,GAAYJ,IAAZ,CAAiB,UAAUnM,MAAV,EAAkB;AAC/BA,2BAAO0M,OAAP,GAAiB3M,KAAKa,KAAL,CAAWwL,OAAX,CAAmBpM,OAAO0M,OAAP,CAAezF,KAAf,CAAqB,CAArB,CAAnB,CAAjB;AACA,2BAAO0C,EAAER,OAAF,CAAUnJ,MAAV,CAAP;AACH,iBAHD,EAGGqM,KAHH,CAGS,UAAShD,GAAT,EAAc;AACnB,2BAAOM,EAAEP,MAAF,CAASC,GAAT,CAAP;AACH,iBALD;AAMH,aAPD;AAQA,mBAAOM,EAAET,OAAT;AACH;;AAED;;;;;;;sCAIc;AACV,mBAAO,KAAKyD,GAAL,EAAP;AACH;;AAED;;;;;;;2CAImB;AACf,mBAAO,KAAKC,IAAL,CAAU,CAAV,EAAanD,IAAb,CAAkB,CAAC,CAAnB,EAAsBoD,aAAtB,EAAP;AACH;;;4BAnjEW;AACR,gBAAI1O,EAAEuB,KAAF,CAAQ,KAAKmE,aAAL,CAAR,CAAJ,EAAkC;AAC9B,oBAAI,KAAKjD,KAAT,EAAgB;AACZ,yBAAKiD,aAAL,IAAsBtF,gBAAgB8C,MAAhB,CAAuB,KAAKT,KAAL,CAAW+B,WAAlC,CAAtB;AACA,2BAAO,KAAKkB,aAAL,CAAP;AACH;AACD,sBAAM,IAAI5B,KAAJ,CAAU,uCAAV,CAAN;AACH;AACD,mBAAO,KAAK4B,aAAL,CAAP;AACH;;AAED;;;;;;;4BAIY;AACR,mBAAO,KAAKF,aAAL,CAAP;AACH;;;;;;AAqiEL;;;;;;;;AAMA,SAAS6D,OAAT,CAAiBV,GAAjB,EAAsB;AAClB,QAAM/G,OAAO,IAAb;AACA,QAAI,OAAO+G,GAAP,KAAe,QAAf,IAA2BA,IAAI1F,MAAJ,KAAa,CAA5C,EAA+C;AAC3C;AACH;AACD,QAAI0L,IAAIjO,sBAAsBG,SAAtB,CAAgCsI,6BAAhC,CAA8DhI,IAA9D,CAAmES,IAAnE,EAAwE+G,GAAxE,CAAR;AACA,QAAIgG,CAAJ,EAAO;AACH,eAAOjO,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+DS,IAA/D,EAAqE+M,EAAExJ,IAAvE,EAA8EwJ,EAAE1N,IAAhF,EAAsF0N,EAAEzJ,QAAxF,CAAP;AACH,KAFD,MAGK;AACDyJ,YAAIjO,sBAAsBG,SAAtB,CAAgCC,mBAAhC,CAAoDK,IAApD,CAAyDS,IAAzD,EAA8D+G,GAA9D,CAAJ;AACA,YAAIgG,CAAJ,EAAO;AACH,mBAAOjO,sBAAsBG,SAAtB,CAAgCiB,sBAAhC,CAAuDX,IAAvD,CAA4DS,IAA5D,EAAkE+M,EAAE1N,IAApE,EAA0E0N,EAAEzJ,QAA5E,CAAP;AACH,SAFD,MAGK;AACDyJ,gBAAIjO,sBAAsBG,SAAtB,CAAgCuI,aAAhC,CAA8CjI,IAA9C,CAAmDS,IAAnD,EAAwD+G,GAAxD,CAAJ;AACA,gBAAIgG,CAAJ,EAAO;AACH,uBAAO/M,KAAKG,YAAL,CAAkB4M,EAAE1N,IAApB,EAA0B0N,EAAEzJ,QAA5B,CAAP;AACH,aAFD,MAGK;AACD,uBAAOtD,KAAKG,YAAL,CAAkB4G,GAAlB,CAAP;AACH;AACJ;AACJ;AACJ;;AAED;;;;;AAKA,SAASmC,aAAT,CAAuBD,QAAvB,EAAiC;AAC7B,QAAMjJ,OAAO,IAAb;AACAiJ,eAAWA,YAAY,YAAW,CAAE,CAApC;AACAjJ,SAAK6M,IAAL,CAAU,CAAV,EAAanD,IAAb,CAAkB,CAAlB,EAAqB,UAASJ,GAAT,EAAcrJ,MAAd,EAAsB;AACvC,YAAIqJ,GAAJ,EAAS;AACLL,qBAASK,GAAT;AACH,SAFD,MAGK;AACD,gBAAIrJ,OAAOoB,MAAP,GAAc,CAAlB,EACI4H,SAAS,IAAT,EAAehJ,OAAO,CAAP,CAAf,EADJ,KAGIgJ,SAAS,IAAT;AACP;AACJ,KAVD;AAWH;;AAGD;;;;;AAKA,SAASM,WAAT,CAAqBN,QAArB,EAA+B;AAC3B,QAAMjJ,OAAO,IAAb;AACA;AACA,WAAO,KAAKwB,KAAL,CAAWiI,KAAlB;AACA,WAAO,KAAKjI,KAAL,CAAWyI,KAAlB;AACA;AACA,QAAI,CAACjK,KAAKwB,KAAL,CAAWkG,SAAX,EAAL,EAA6B;AACzB1H,aAAKW,MAAL;AACH;AACDsI,eAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACAiB,aAAS3K,IAAT,CAAcS,IAAd,EAAoBiJ,QAApB;AACH;;AAED;;;;;;;AAOA,SAASU,YAAT,CAAsBH,CAAtB,EAAyBP,QAAzB,EAAmC;AAC/B,QAAMjJ,OAAO,IAAb;AACAA,SAAKwB,KAAL,CAAWkI,IAAX,CAAgBF,CAAhB;AACAP,eAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACA,QAAI,CAACjJ,KAAKwB,KAAL,CAAWkG,SAAX,EAAL,EAA6B;AACzB1H,aAAKW,MAAL;AACH;AACD;AACAuJ,aAAS3K,IAAT,CAAcS,IAAd,EAAmBiJ,QAAnB;AACH;;AAED;;;;;AAKA,SAASa,YAAT,CAAsBb,QAAtB,EAAgC;AAC5B,QAAMjJ,OAAO,IAAb;AACA,QAAI;AACAiJ,mBAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACA,YAAMS,OAAO1J,KAAKwB,KAAL,CAAWyI,KAAX,IAAoB,EAAjC;AACA;AACAjK,aAAKW,MAAL;AACA;AACA,YAAMqM,KAAKhN,KAAKiN,KAAL,EAAX;AACA;AACAjN,aAAK0J,IAAL,CAAUA,IAAV,EAAgB,UAASJ,GAAT,EAAcrJ,MAAd,EAChB;AACI,gBAAIqJ,GAAJ,EAAS;AACLL,yBAASK,GAAT;AACH,aAFD,MAGK;AACD;AACA0D,mBAAG5E,KAAH,CAAS,UAASkB,GAAT,EAAc4D,KAAd,EAAqB;AAC1B,wBAAI5D,GAAJ,EAAS;AACLL,iCAASK,GAAT;AACH,qBAFD,MAGK;AACD;AACA,4BAAMlH,MAAM,EAAE8K,OAAOA,KAAT,EAAgBL,MAAM7C,SAAShK,KAAKwB,KAAL,CAAWiI,KAApB,KAA8B,CAApD,EAAwDkD,SAAU1M,UAAU,EAA5E,EAAZ;AACAgJ,iCAAS,IAAT,EAAe7G,GAAf;AACH;AACJ,iBATD;AAUH;AACJ,SAlBD;AAmBH,KA5BD,CA6BA,OAAMqI,CAAN,EAAS;AACLxB,iBAASwB,CAAT;AACH;AACJ;;AAED;;;;;;AAMA,SAASN,aAAT,CAAuBlB,QAAvB,EAAiC;AAC7B,QAAMjJ,OAAO,IAAb;AACAiJ,eAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACA,QAAMzG,QAAQxC,KAAKa,KAAL,CAAWsE,UAAX,CAAsB,CAAtB,CAAd;AACA,QAAI3C,UAAQ,IAAZ,EACI,OAAOyG,SAAS1J,IAAT,CAAc,IAAd,EAAoB,IAAI2C,KAAJ,CAAU,kDAAV,CAApB,CAAP;AACJ;AACA,WAAOlC,KAAKwB,KAAL,CAAWiI,KAAlB;AACA,WAAOzJ,KAAKwB,KAAL,CAAWyI,KAAlB;AACA,WAAOjK,KAAKwB,KAAL,CAAW2L,MAAlB;AACA,WAAOnN,KAAKwB,KAAL,CAAW4L,MAAlB;AACA;AACApN,SAAKwB,KAAL,CAAWb,MAAX,CAAkBlC,WAAW6C,MAAX,GAAoB8G,KAApB,CAA0B5F,MAAMnD,IAAhC,EAAsCkC,IAAtC,CAA2CvB,KAAKa,KAAL,CAAW+B,WAAtD,CAAlB;AACA;AACAsH,aAAS3K,IAAT,CAAcS,IAAd,EAAoB,UAASsJ,GAAT,EAAcrJ,MAAd,EAAsB;AACtC,YAAIqJ,GAAJ,EAAS;AAAEL,qBAAS1J,IAAT,CAAcS,IAAd,EAAoBsJ,GAApB,EAAyBrJ,MAAzB,EAAkC;AAAS;AACtD,YAAIiG,QAAQ,IAAZ;AACA,YAAI9H,EAAEqD,OAAF,CAAUxB,MAAV,CAAJ,EAAuB;AACnB;AACA,gBAAIA,OAAOoB,MAAP,GAAc,CAAlB,EACI6E,QAAQjG,OAAO,CAAP,EAAUuC,MAAMnD,IAAhB,CAAR;AACP;AACD4J,iBAAS1J,IAAT,CAAcS,IAAd,EAAoBsJ,GAApB,EAAyBpD,KAAzB;AACH,KATD;AAUH;;AAED;;;;;;AAMA,SAASkE,WAAT,CAAqBrL,IAArB,EAA2BkK,QAA3B,EAAqC;AACjC,QAAMjJ,OAAO,IAAb;AACA,WAAOA,KAAKwB,KAAL,CAAWiI,KAAlB;AACA,QAAMjH,QAAQ1D,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+DS,IAA/D,EAAqE,KAArE,EAA4EjB,IAA5E,CAAd;AACAiB,SAAKW,MAAL,CAAY6B,KAAZ,EAAmB6K,OAAnB,GAA6BnH,KAA7B,CAAmC,UAASoD,GAAT,EAAcrJ,MAAd,EAAsB;AACrD,YAAIqJ,GAAJ,EAAS;AAAE,mBAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCL,iBAAS,IAAT,EAAehJ,MAAf;AACH,KAHD;AAIH;;AAED;;;;;;AAMA,SAASoK,WAAT,CAAqBtL,IAArB,EAA2BkK,QAA3B,EAAqC;AACjC,QAAMjJ,OAAO,IAAb;AACA,WAAOA,KAAKwB,KAAL,CAAWiI,KAAlB;AACA,QAAMjH,QAAQ1D,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+DS,IAA/D,EAAqE,KAArE,EAA4EjB,IAA5E,CAAd;AACAiB,SAAKW,MAAL,CAAY6B,KAAZ,EAAmB6K,OAAnB,GAA6BnH,KAA7B,CAAmC,UAASoD,GAAT,EAAcrJ,MAAd,EAAsB;AACrD,YAAIqJ,GAAJ,EAAS;AAAE,mBAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCL,iBAAS,IAAT,EAAehJ,MAAf;AACH,KAHD;AAIH;;AAED;;;;;;AAMA,SAASqK,gBAAT,CAA0BvL,IAA1B,EAAgCkK,QAAhC,EAA0C;AACtC,QAAMjJ,OAAO,IAAb;AACA,WAAOA,KAAKwB,KAAL,CAAWiI,KAAlB;AACA,QAAMjH,QAAQ1D,sBAAsBG,SAAtB,CAAgCK,yBAAhC,CAA0DC,IAA1D,CAA+DS,IAA/D,EAAqE,KAArE,EAA4EjB,IAA5E,CAAd;AACAiB,SAAKW,MAAL,CAAY6B,KAAZ,EAAmB6K,OAAnB,GAA6BnH,KAA7B,CAAmC,UAASoD,GAAT,EAAcrJ,MAAd,EAAsB;AACrD,YAAIqJ,GAAJ,EAAS;AAAE,mBAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCL,iBAAS,IAAT,EAAehJ,MAAf;AACH,KAHD;AAIH;;AAED;;;;AAIA,SAASqN,aAAT,CAAuBrE,QAAvB,EAAiC;AAC7B,QAAI;AACA,YAAMjJ,OAAO,IAAb;AAAA,YAAmB2C,UAAU3C,KAAKuK,aAAL,EAA7B;AACA,YAAMgD,cAAcvN,KAAKwB,KAAL,CAAWyL,KAAX,EAApB;AACA;AACA,eAAOM,YAAY9D,KAAnB;AACA,eAAO8D,YAAYtD,KAAnB;AACA;AACAsD,oBAAY5M,MAAZ,CAAmBlC,WAAW6C,MAAX,GAAoB8G,KAApB,CAA0B,GAA1B,CAAnB;AACA;AACAzF,gBAAQ6K,EAAR,CAAWC,OAAX,CAAmBF,WAAnB,EAAgC,IAAhC,EAAsC,UAASjE,GAAT,EAAcrJ,MAAd,EAAsB;AACxD,gBAAIqJ,GAAJ,EAAS;AACLL,yBAASK,GAAT;AACA;AACH;AACDL,qBAASK,GAAT,EAAcrJ,OAAOoB,MAAP,GAAc,CAAd,GAAkBpB,OAAO,CAAP,CAAlB,GAA8B,CAA5C;AACH,SAND;AAOH,KAhBD,CAiBA,OAAOwK,CAAP,EAAU;AACNxB,iBAASwB,CAAT;AACH;AAEJ;;AAED;;;;;;AAMA,SAASP,QAAT,CAAkBjB,QAAlB,EAA4B;AACxB,QAAMjJ,OAAO,IAAb;AAAA,QAAmB2C,UAAU3C,KAAKuK,aAAL,EAA7B;AACAvK,SAAKwK,OAAL,CAAa,UAASlB,GAAT,EAAc;AACvB,YAAIA,GAAJ,EAAS;AAAEL,qBAASK,GAAT,EAAe;AAAS;AACnC,YAAMmB,IAAI,EAAE5J,OAAMb,KAAKa,KAAb,EAAoBW,OAAMxB,KAAKwB,KAA/B,EAAsC+D,MAAK,QAA3C,EAAV;AACA,YAAM8H,UAAUrN,KAAKwE,QAAL,IAAkBxE,KAAK0N,SAAL,OAAmB,CAArD;AACA,YAAI,CAACL,OAAL,EAAc;AACV;AACA,gBAAMM,cAAc3N,KAAKa,KAAL,CAAWsE,UAAX,CAAsBS,MAAtB,CAA6B,UAAS7D,CAAT,EAAY;AAAE,uBAAOA,EAAE6L,UAAT;AAAsB,aAAjE,CAApB;AACA;AACA,gBAAMC,WAAW7N,KAAKwB,KAAL,CAAWN,OAAX,CAAmBlB,KAAKa,KAAL,CAAW+B,WAA9B,CAAjB;AACA,gBAAIxE,EAAEqD,OAAF,CAAUoM,QAAV,CAAJ,EAAyB;AACrB;AACA,oBAAMC,UAAU9N,KAAKa,KAAL,CAAWsE,UAAX,CAAsBS,MAAtB,CAA6B,UAAS7D,CAAT,EAAY;AAAE,2BAAOA,EAAEgM,MAAT;AAAkB,iBAA7D,CAAhB;AACA,oBAAID,QAAQzM,MAAR,GAAe,CAAnB,EAAsB;AAAA;AAEd,4BAAMU,IAAI8L,SAASlF,EAAT,CAAV;AACA,4BAAMqF,cAAcF,QAAQhM,IAAR,CAAa,UAASD,CAAT,EAAY;AACzC,gCAAM+F,IAAI7F,aAAatD,UAAb,GAA0BsD,CAA1B,GAA8B,IAAItD,UAAJ,CAAesD,CAAf,CAAxC;AACA,mCAAO6F,EAAEvI,IAAF,OAAawC,EAAExC,IAAtB;AACH,yBAHmB,CAApB;AAIA,4BAAI2O,WAAJ,EAAiB;AACbH,qCAASI,MAAT,CAAgBtF,EAAhB,EAAmB,CAAnB;AACAA,kCAAG,CAAH;AACH;AATIA,yBADS;AAAA;;AAClB,yBAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAIkF,SAASxM,MAA7B,EAAqCsH,GAArC,EAA0C;AAAA,8BAAjCA,CAAiC;AAUzC;AACJ;AACD;AACA,oBAAIgF,YAAYtM,MAAZ,GAAmB,CAAvB,EAA0B;AACtBwM,6BAASjM,OAAT,CAAiB,UAASG,CAAT,EAAY;AACzB;AACA,4BAAMS,QAAQmL,YAAY7L,IAAZ,CAAiB,UAASD,CAAT,EAAY;AACvC,gCAAM+F,IAAI7F,aAAatD,UAAb,GAA0BsD,CAA1B,GAA8B,IAAItD,UAAJ,CAAesD,CAAf,CAAxC;AACA,mCAAO6F,EAAEvI,IAAF,OAAawC,EAAExC,IAAtB;AACH,yBAHa,CAAd;AAIA;AACA,4BAAImD,KAAJ,EAAW;AACP,gCAAM5B,UAAUZ,KAAKa,KAAL,CAAWC,YAAX,CAAwB0B,MAAMnD,IAA9B,CAAhB;AACA,gCAAIuB,OAAJ,EAAa;AACTZ,qCAAKmB,OAAL,GAAenB,KAAKmB,OAAL,IAAgB,EAA/B;AACA,oCAAM+M,UAAUlO,KAAKmB,OAAL,CAAaW,IAAb,CAAkB,UAASC,CAAT,EAAY;AAC1C,2CAAOA,EAAE1C,IAAF,KAAWmD,MAAMnD,IAAxB;AACH,iCAFe,CAAhB;AAGA,oCAAI,OAAO6O,OAAP,KAAmB,WAAvB,EAAoC;AAChClO,yCAAKmH,MAAL,CAAYvG,OAAZ;AACH;AACJ;AAEJ;AACJ,qBApBD;AAqBH;AACJ;AACJ;;AAED;AACA,YAAIZ,KAAKsE,KAAT,EAAgB;AACZtE,iBAAKa,KAAL,CAAW+E,MAAX,CAAkB,EAAEuI,SAASnO,KAAKsE,KAAL,CAAWsB,MAAtB,EAA8BuH,QAAOnN,KAAKsE,KAAL,CAAW8J,KAAhD,EAAuDhB,QAAOpN,KAAKsE,KAAL,CAAW+J,KAAzE,EAAlB,EAAoG,UAAS/E,GAAT,EAAc9F,CAAd,EAAiB;AACjH,oBAAI8F,GAAJ,EAAS;AACL,wBAAIA,GAAJ,EAAS;AAAEL,iCAASK,GAAT;AAAgB;AAC9B,iBAFD,MAGK;AACD;AACA,wBAAI9F,EAAEhC,KAAF,CAAQ8M,SAAZ,EAAuB;AACnB,4BAAI7D,EAAEjJ,KAAF,CAAQ+M,MAAZ,EACI9D,EAAEjJ,KAAF,CAAQmD,OAAR;AACJ8F,0BAAEjJ,KAAF,CAAQ+M,MAAR,GAAiB/K,EAAEhC,KAAF,CAAQ8M,SAAzB;AACH;AACD,wBAAI9K,EAAEhC,KAAF,CAAQ4L,MAAZ;AACA;AACI3C,0BAAEjJ,KAAF,CAAQ4L,MAAR,GAAiB5J,EAAEhC,KAAF,CAAQ4L,MAAzB;AACJ;AACA,wBAAI5J,EAAEhC,KAAF,CAAQ2L,MAAZ,EAAoB;AAChB,4BAAI/O,EAAEqD,OAAF,CAAUgJ,EAAEjJ,KAAF,CAAQ2L,MAAlB,CAAJ,EAA+B;AAC3B3J,8BAAEhC,KAAF,CAAQ2L,MAAR,CAAevL,OAAf,CAAuB,UAASG,CAAT,EAAY;AAAE0I,kCAAEjJ,KAAF,CAAQ2L,MAAR,CAAezL,IAAf,CAAoBK,CAApB;AAAyB,6BAA9D;AACH,yBAFD,MAGK;AACD0I,8BAAEjJ,KAAF,CAAQ2L,MAAR,GAAiB3J,EAAEhC,KAAF,CAAQ2L,MAAzB;AACH;AACJ;AACD;AACAqB,0CAAsBjP,IAAtB,CAA2BS,IAA3B,EAAiCyK,CAAjC,EAAoCxB,QAApC;AACH;AACJ,aA1BD;AA2BH,SA5BD,MA6BK;AACD;AACAuF,kCAAsBjP,IAAtB,CAA2BS,IAA3B,EAAiCyK,CAAjC,EAAoCxB,QAApC;AACH;AACJ,KAtFD;AAuFH;;AAED;;;;;;AAMA,SAASuF,qBAAT,CAA+B/D,CAA/B,EAAkCxB,QAAlC,EAA4C;AACxC,QAAMjJ,OAAO,IAAb;AAAA,QAAmB2C,UAAU3C,KAAKuK,aAAL,EAA7B;AACA;AACAE,MAAEgE,OAAF,GAAY,IAAZ;AACA,QAAMC,qBAAqB1O,KAAKa,KAAL,CAAW8N,SAAX,CAAqB,eAArB,EAAsCtN,MAAjE;AACArB,SAAKa,KAAL,CAAW+N,IAAX,CAAgB,gBAAhB,EAAkCnE,CAAlC,EAAqC,UAASnB,GAAT,EAAc;AAC/C,YAAIA,GAAJ,EAAS;AACLL,qBAASK,GAAT;AACH,SAFD,MAGK;AACD;AACA,gBAAI,OAAOmB,EAAE,QAAF,CAAP,KAAuB,WAA3B,EAAwC;AACpC;AACA,oBAAMxK,SAASwK,EAAE,QAAF,CAAf;AACAoE,8BAActP,IAAd,CAAmBS,IAAnB,EAAyBC,MAAzB,EAAiC,UAASqJ,GAAT,EAAcrJ,MAAd,EAAsB;AACnD,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOL,SAASK,GAAT,CAAP;AAAuB;AAClC,wBAAIoF,uBAAqB,CAAzB,EAA4B;AAAE,+BAAOzF,SAAS,IAAT,EAAehJ,MAAf,CAAP;AAAgC;AAC9D;AACAD,yBAAKa,KAAL,CAAW+N,IAAX,CAAgB,eAAhB,EAAiCnE,CAAjC,EAAoC,UAASnB,GAAT,EAAc;AAC9C,4BAAIA,GAAJ,EAAS;AAAE,mCAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCL,iCAAS,IAAT,EAAehJ,MAAf;AACH,qBAHD;AAIH,iBARD;AASA;AACH;AACD0C,oBAAQ6K,EAAR,CAAWC,OAAX,CAAmBhD,EAAEjJ,KAArB,EAA4B,IAA5B,EAAkC,UAAS8H,GAAT,EAAcrJ,MAAd,EAAsB;AACpD,oBAAIqJ,GAAJ,EAAS;AAAE,2BAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCuF,8BAActP,IAAd,CAAmBS,IAAnB,EAAyBC,MAAzB,EAAiC,UAASqJ,GAAT,EAAcrJ,MAAd,EAAsB;AACnD,wBAAIqJ,GAAJ,EAAS;AAAE,+BAAOL,SAASK,GAAT,CAAP;AAAuB;AAClC,wBAAIoF,uBAAqB,CAAzB,EAA4B;AAAE,+BAAOzF,SAAS,IAAT,EAAehJ,MAAf,CAAP;AAAgC;AAC9D;AACAwK,sBAAExK,MAAF,GAAWA,MAAX;AACAD,yBAAKa,KAAL,CAAW+N,IAAX,CAAgB,eAAhB,EAAiCnE,CAAjC,EAAoC,UAASnB,GAAT,EAAc;AAC9C,4BAAIA,GAAJ,EAAS;AAAE,mCAAOL,SAASK,GAAT,CAAP;AAAuB;AAClCL,iCAAS,IAAT,EAAehJ,MAAf;AACH,qBAHD;AAIH,iBATD;AAUH,aAZD;AAaH;AACJ,KAlCD;AAmCH;;AAED;;;;;;AAMA,SAAS4O,aAAT,CAAuB5O,MAAvB,EAA+BgJ,QAA/B,EAAyC;AACrC;;;AAGA,QAAMjJ,OAAO,IAAb;AACA,QAAIwC,cAAJ;AACA,QAAIxC,KAAKmB,OAAT,EAAkB;AACd;AACA,YAAM2N,UAAU1Q,EAAE2Q,MAAF,CAAS/O,KAAKmB,OAAd,EAAuB,UAASY,CAAT,EAAY;AAC/C,mBAAOA,CAAP;AACH,SAFe,CAAhB;AAGA7D,cAAM8Q,UAAN,CAAiBF,OAAjB,EAA0B,UAAS3H,MAAT,EAAiB8H,EAAjB,EAAqB;AAC3C,gBAAIrO,gBAAJ;AAAA,gBAAaiE,UAAU,EAAvB;AACA,gBAAI;AACA;;;;AAIA,oBAAIsC,kBAAkB7I,sBAAtB,EAA8C;AAC1CsC,8BAAUuG,MAAV;AACA,wBAAI,OAAOA,OAAOxG,MAAd,KAAyB,WAAzB,IAAwCwG,OAAOxG,MAAP,KAAkB,IAA9D,EAAoE;AAChE,4BAAI,OAAOwG,OAAOxG,MAAd,KAAyB,QAA7B,EACIkE,QAAQ,SAAR,IAAqBsC,OAAOxG,MAA5B,CADJ,KAEK,IAAIvC,EAAEqD,OAAF,CAAU0F,OAAOxG,MAAjB,CAAJ,EACDkE,QAAQ,SAAR,IAAqBsC,OAAOxG,MAAP,CAAcwC,IAAd,CAAmB,GAAnB,CAArB;AACP;AACD;AACA,wBAAI,OAAOgE,OAAOtC,OAAd,KAA0B,WAA1B,IAAyCsC,OAAOtC,OAAP,KAAmB,IAAhE,EAAsE;AAClEzG,0BAAEqG,MAAF,CAASI,OAAT,EAAkBsC,OAAOtC,OAAzB;AACH;AACJ,iBAZD,MAaK;AACD;AACA,wBAAIqK,mBAAJ;AACA,wBAAI,OAAO/H,MAAP,KAAkB,QAAtB,EAAgC;AAC5B;AACA+H,qCAAa/H,MAAb;AACH,qBAHD,MAIK,IAAK,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAnB,IAAgCA,OAAO0D,cAAP,CAAsB,MAAtB,CAApC,EAAmE;AACpE;AACAqE,qCAAa/H,OAAO9H,IAApB;AACA;AACA,4BAAI,OAAO8H,OAAOtC,OAAd,KAA0B,WAA1B,IAAyCsC,OAAOtC,OAAP,KAAmB,IAAhE,EAAsE;AAClEA,sCAAUsC,OAAOtC,OAAjB;AACH;AACJ,qBAPI,MAQA;AACD;AACA,+BAAOoE,SAAS,IAAI/G,KAAJ,CAAU,2DAAV,CAAT,CAAP;AACH;AACDM,4BAAQxC,KAAKa,KAAL,CAAW2B,KAAX,CAAiB0M,UAAjB,CAAR;AACA,wBAAI,OAAO1M,KAAP,KAAiB,WAArB,EACIA,QAAQxC,KAAKa,KAAL,CAAWsE,UAAX,CAAsBrD,IAAtB,CAA2B,UAASC,CAAT,EAAY;AAAE,+BAAOA,EAAEwD,IAAF,KAAS2J,UAAhB;AAA4B,qBAArE,CAAR;AACJ,wBAAI1M,KAAJ,EAAW;AACP5B,kCAAUZ,KAAKa,KAAL,CAAWC,YAAX,CAAwB0B,MAAMnD,IAA9B,CAAV;AACA,4BAAIyP,QAAQhN,IAAR,CAAa,UAASC,CAAT,EAAY;AACzB,mCAAQA,EAAEkB,WAAF,KAAkBrC,QAAQqC,WAA3B,IACElB,EAAEW,WAAF,KAAkB9B,QAAQ8B,WAD5B,IAEEX,EAAEe,UAAF,KAAiBlC,QAAQkC,UAF3B,IAGEf,EAAEU,UAAF,KAAiB7B,QAAQ6B,UAHlC;AAIH,yBALG,CAAJ,EAKI;AACA,mCAAOwM,IAAP;AACH;AACD,4BAAIrO,OAAJ,EAAa;AACTA,oCAAQuO,QAAR,GAAmBvO,QAAQuO,QAAR,IAAoB3M,MAAMnD,IAA7C;AACA,gCAAIjB,EAAEgR,QAAF,CAAWxO,QAAQiE,OAAnB,CAAJ,EAAiC;AAC7BzG,kCAAEqG,MAAF,CAASI,OAAT,EAAkBjE,QAAQiE,OAA1B;AACH,6BAFD,MAGK,IAAIzG,EAAEqD,OAAF,CAAUb,QAAQD,MAAlB,KAA6BC,QAAQD,MAAR,CAAeU,MAAf,GAAsB,CAAvD,EAA0D;AAC3DwD,wCAAQ,SAAR,IAAqBjE,QAAQD,MAAR,CAAewC,IAAf,CAAoB,GAApB,CAArB;AACH;AACJ;AACJ;AACJ;AACD,oBAAI0B,mBAAmBV,aAAvB,EAAsC;AAClC;AACH,iBAFD,MAGK;AACD;AACA,wBAAI,CAACU,QAAQgG,cAAR,CAAuB,MAAvB,CAAL,EAAqC;AACjChG,gCAAQ,MAAR,IAAkB,CAAC,CAAnB;AACH;AACD;AACA,wBAAI,CAACA,QAAQgG,cAAR,CAAuB,SAAvB,CAAL,EAAwC;AACpC,4BAAI,OAAO7K,KAAKuE,OAAZ,KAAwB,QAA5B,EAAsC;AAClCM,oCAAQ,SAAR,IAAqB7E,KAAK0N,SAAL,KAAmB,CAAxC;AACH;AACJ;AACJ;AACJ,aA5ED,CA6EA,OAAMjD,CAAN,EAAS;AACL,uBAAOwE,GAAGxE,CAAH,CAAP;AACH;;AAED,gBAAI7J,OAAJ,EAAa;AACT,oBAAMyO,oBAAoBC,QAAQ,sBAAR,EAAgCD,iBAA1D;AACA;AACA,oBAAME,cAAcnR,EAAEqG,MAAF,CAAS,EAAT,EAAa7D,OAAb,CAApB;AACA2O,4BAAY1K,OAAZ,GAAsBA,OAAtB;AACA,oBAAIjE,QAAQG,eAAR,KAA0B,aAA1B,IAA2CH,QAAQG,eAAR,KAA0B,UAAzE,EAAqF;AACjF,wBAAKH,QAAQ8B,WAAR,KAAsB1C,KAAKa,KAAL,CAAWxB,IAAlC,IAA4CuB,QAAQG,eAAR,KAA0B,aAA1E,EAA0F;AACtF,+BAAOsO,kBAAkBG,MAAlB,CAAyBD,WAAzB,EAAsCE,GAAtC,CAA0CzP,IAA1C,EAAgD0P,sBAAhD,CAAuEzP,MAAvE,EACFmM,IADE,CACG,YAAW;AACb,mCAAO6C,IAAP;AACH,yBAHE,EAGA3C,KAHA,CAGM,UAAShD,GAAT,EAAc;AACnB,mCAAO2F,GAAG3F,GAAH,CAAP;AACH,yBALE,CAAP;AAMH,qBAPD,MAQK,IAAI1I,QAAQ6B,UAAR,KAAqBzC,KAAKa,KAAL,CAAWxB,IAAhC,IAAwCuB,QAAQG,eAAR,KAA0B,UAAtE,EAAkF;AACnF,+BAAOsO,kBAAkBG,MAAlB,CAAyBD,WAAzB,EAAsCE,GAAtC,CAA0CzP,IAA1C,EAAgD2P,aAAhD,CAA8D1P,MAA9D,EACFmM,IADE,CACG,YAAW;AACb,mCAAO6C,IAAP;AACH,yBAHE,EAGA3C,KAHA,CAGM,UAAShD,GAAT,EAAc;AACnB,mCAAO2F,GAAG3F,GAAH,CAAP;AACH,yBALE,CAAP;AAMH,qBAPI,MAQA,IAAI1I,QAAQ8B,WAAR,KAAsB1C,KAAKa,KAAL,CAAWxB,IAAjC,IAAyCuB,QAAQG,eAAR,KAA0B,UAAvE,EAAmF;AACpF,+BAAOsO,kBAAkBG,MAAlB,CAAyBD,WAAzB,EAAsCE,GAAtC,CAA0CzP,IAA1C,EAAgD4P,YAAhD,CAA6D3P,MAA7D,EACFmM,IADE,CACG,YAAW;AACb,mCAAO6C,IAAP;AACH,yBAHE,EAGA3C,KAHA,CAGM,UAAShD,GAAT,EAAc;AACnB,mCAAO2F,GAAG3F,GAAH,CAAP;AACH,yBALE,CAAP;AAMH,qBAPI,MAQA,IAAK1I,QAAQ6B,UAAR,KAAqBzC,KAAKa,KAAL,CAAWxB,IAAjC,IAA2CuB,QAAQG,eAAR,KAA0B,aAAzE,EAAyF;AAC1F,+BAAOsO,kBAAkBG,MAAlB,CAAyBD,WAAzB,EAAsCE,GAAtC,CAA0CzP,IAA1C,EAAgD6P,uBAAhD,CAAwE5P,MAAxE,EACFmM,IADE,CACG,YAAW;AACb,mCAAO6C,IAAP;AACH,yBAHE,EAGA3C,KAHA,CAGM,UAAShD,GAAT,EAAc;AACnB,mCAAO2F,GAAG3F,GAAH,CAAP;AACH,yBALE,CAAP;AAMH;AACJ,iBAjCD,MAkCK;AACD,2BAAO2F,GAAG,IAAI/M,KAAJ,CAAU,qBAAV,CAAH,CAAP;AACH;AACJ,aA1CD,MA2CK;AACDrD,2BAAWiR,GAAX,CAAe3R,QAAQA,OAAR,CAAgB,0HAAhB,EAA4IgJ,MAA5I,EAAoJnH,KAAKa,KAAL,CAAWkP,KAA/J,CAAf;AACA,uBAAOd,GAAG,IAAH,CAAP;AACH;AACJ,SAlID,EAkIG,UAAS3F,GAAT,EAAc;AACb,gBAAIA,GAAJ,EAAS;AACLL,yBAASK,GAAT;AACH,aAFD,MAGK;AACD0G,gCAAgBzQ,IAAhB,CAAqBS,IAArB,EAA2BC,MAA3B,EAAmCgJ,QAAnC;AACH;AACJ,SAzID;AA0IH,KA/ID,MAgJK;AACD+G,wBAAgBzQ,IAAhB,CAAqBS,IAArB,EAA2BC,MAA3B,EAAmCgJ,QAAnC;AACH;AACJ;;AAED;;;;;;AAMA,SAAS+G,eAAT,CAAyB/P,MAAzB,EAAiCgJ,QAAjC,EAA2C;AACvC,QAAMjJ,OAAO,IAAb;AACA,QAAIA,KAAK0K,QAAT,EAAmB;AACf,YAAI,OAAO1K,KAAKwB,KAAZ,KAAsB,WAA1B,EAAuC;AACnC,mBAAOyH,SAAS,IAAT,EAAehJ,MAAf,CAAP;AACH;AACD,YAAMoH,SAASrH,KAAKwB,KAAL,CAAW6F,MAAX,EAAf;AACA,YAAI,CAACjJ,EAAEqD,OAAF,CAAU4F,MAAV,CAAL,EAAwB;AACpB,mBAAO4B,SAAS,IAAT,EAAehJ,MAAf,CAAP;AACH;AACD,YAAIoH,OAAOhG,MAAP,KAAgB,CAApB,EAAuB;AACnB,gBAAMZ,MAAM,EAAZ;AACArC,cAAEwD,OAAF,CAAU3B,MAAV,EAAkB,UAAS8B,CAAT,EAAY;AAC1B,oBAAI3D,EAAEuB,KAAF,CAAQoC,CAAR,CAAJ,EACI;AACJ,oBAAMkO,MAAMC,OAAOC,IAAP,CAAYpO,CAAZ,EAAe,CAAf,CAAZ;AACA,oBAAIA,EAAEkO,GAAF,CAAJ,EACIxP,IAAIiB,IAAJ,CAASK,EAAEkO,GAAF,CAAT;AACP,aAND;AAOA,mBAAOhH,SAAS,IAAT,EAAexI,GAAf,CAAP;AACH,SAVD,MAWK;AACD,mBAAOwI,SAAS,IAAT,EAAehJ,MAAf,CAAP;AACH;AACJ,KAtBD,MAuBK;AACD,eAAOgJ,SAAS,IAAT,EAAehJ,MAAf,CAAP;AACH;AACJ;;AAED;;;;;AAKA,SAASgM,aAAT,CAAuBhD,QAAvB,EAAiC;AAC7B,QAAI7K,EAAEuB,KAAF,CAAQ,KAAK6B,KAAL,CAAWN,OAAnB,CAAJ,EAAiC;AAC7B,aAAKP,MAAL,CAAY,KAAKE,KAAL,CAAWuP,UAAvB;AACH;AACDlH,kBAAc3J,IAAd,CAAmB,IAAnB,EAAyB,UAAS+J,GAAT,EAAcrJ,MAAd,EAAsB;AAC3C,YAAIqJ,GAAJ,EAAS;AAAE,mBAAOL,SAASK,GAAT,CAAP;AAAuB;AAClC,YAAIlL,EAAEuB,KAAF,CAAQM,MAAR,CAAJ,EAAqB;AAAE,mBAAOgJ,UAAP;AAAoB;AAC3C,YAAMgH,MAAMC,OAAOC,IAAP,CAAYlQ,MAAZ,EAAoB,CAApB,CAAZ;AACA,YAAI,OAAOgQ,GAAP,KAAe,WAAnB,EAAgC;AAAE,mBAAOhH,UAAP;AAAoB;AACtDA,iBAAS,IAAT,EAAehJ,OAAOgQ,GAAP,CAAf;AACH,KAND;AAOH","file":"queryable.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport async from 'async';\nimport sprintf from 'sprintf';\nimport _ from 'lodash';\nimport Q from 'q';\nimport {DataAssociationMapping} from './types';\nimport {DataError} from '@themost/common/errors';\nimport {QueryExpression, QueryField, QueryFieldUtils, QueryEntity} from '@themost/query/query';\nimport {TextUtils,TraceUtils} from \"@themost/common/utils\";\n\n/**\n * @class\n * @constructor\n * @ignore\n */\nexport class DataAttributeResolver {\n    orderByNestedAttribute(attr) {\n        const nestedAttribute = DataAttributeResolver.prototype.testNestedAttribute(attr);\n        if (nestedAttribute) {\n            let matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\)$/i.exec(nestedAttribute.name);\n            if (matches)   {\n                return DataAttributeResolver.prototype.selectAggregatedAttribute.call(this, matches[1], matches[2] + \"/\" + matches[3]);\n            }\n            matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\/(\\w+)\\)$/i.exec(nestedAttribute.name);\n            if (matches)   {\n                return DataAttributeResolver.prototype.selectAggregatedAttribute.call(this, matches[1], matches[2] + \"/\" + matches[3] + \"/\" + matches[4]);\n            }\n        }\n        return DataAttributeResolver.prototype.resolveNestedAttribute.call(this, attr);\n    }\n    selecteNestedAttribute(attr, alias) {\n        const expr = DataAttributeResolver.prototype.resolveNestedAttribute.call(this, attr);\n        if (expr) {\n            if (_.isNil(alias))\n                expr.as(attr.replace(/\\//g,'_'));\n            else\n                expr.as(alias)\n        }\n        return expr;\n    }\n    /**\n     * @param {string} aggregation\n     * @param {string} attribute\n     * @param {string=} alias\n     * @returns {*}\n     */\n    selectAggregatedAttribute(aggregation, attribute, alias) {\n        const self=this;\n        let result;\n        if (DataAttributeResolver.prototype.testNestedAttribute(attribute)) {\n            result = DataAttributeResolver.prototype.selecteNestedAttribute.call(self,attribute, alias);\n        }\n        else {\n            result = self.resolveField(attribute);\n        }\n        const sAlias = result.as();\n        const name = result.name();\n        let expr;\n        if (sAlias) {\n            expr = result[sAlias];\n            result[sAlias] = { };\n            result[sAlias]['$' + aggregation ] = expr;\n        }\n        else {\n            expr = result.$name;\n            result[name] = { };\n            result[name]['$' + aggregation ] = expr;\n        }\n        return result;\n    }\n\n    resolveNestedAttribute(attr) {\n        const self = this;\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            const member = attr.split('/');\n            let expr;\n            let arr;\n            let obj;\n            let select;\n            //change: 18-Feb 2016\n            //description: Support many to many (junction) resolving\n            const mapping = self.model.inferMapping(member[0]);\n            if (mapping && mapping.associationType === 'junction') {\n                const expr1 = DataAttributeResolver.prototype.resolveJunctionAttributeJoin.call(self.model, attr);\n                //select field\n                select = expr1.$select;\n                //get expand\n                expr = expr1.$expand;\n            }\n            else {\n                expr = DataAttributeResolver.prototype.resolveNestedAttributeJoin.call(self.model, attr);\n                //select field\n                if (member.length>2)\n                    select = QueryField.create(member[2]).from(member[1]);\n                else\n                    select  = QueryField.create(member[1]).from(member[0]);\n            }\n            if (expr) {\n                if (typeof this.query.$expand === 'undefined' || null) {\n                    this.query.$expand = expr;\n                }\n                else {\n                    arr = [];\n                    if (!_.isArray(self.query.$expand)) {\n                        arr.push(self.query.$expand);\n                        this.query.$expand = arr;\n                    }\n                    arr = [];\n                    if (_.isArray(expr))\n                        arr.push.apply(arr, expr);\n                    else\n                        arr.push(expr);\n                    arr.forEach(function(y) {\n                        obj = self.query.$expand.find(function(x) {\n                            if (x.$entity && x.$entity.$as) {\n                                return (x.$entity.$as === y.$entity.$as);\n                            }\n                            return false;\n                        });\n                        if (typeof obj === 'undefined')\n                            self.query.$expand.push(y);\n                    });\n                }\n                return select;\n            }\n            else {\n                throw new Error('Member join expression cannot be empty at this context');\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {string} memberExpr - A string that represents a member expression e.g. user/id or article/published etc.\n     * @returns {*} - An object that represents a query join expression\n     */\n    resolveNestedAttributeJoin(memberExpr) {\n        const self = this;\n        let res,expr,entity;\n        if (/\\//.test(memberExpr)) {\n            //if the specified member contains '/' e.g. user/name then prepare join\n            const arrMember = memberExpr.split('/');\n            const attrMember = self.field(arrMember[0]);\n            if (_.isNil(attrMember)) {\n                throw new Error(`The target model does not have an attribute named as ${arrMember[0]}`);\n            }\n            //search for field mapping\n            const mapping = self.inferMapping(arrMember[0]);\n            if (_.isNil(mapping)) {\n                throw new Error(`The target model does not have an association defined for attribute named ${arrMember[0]}`);\n            }\n            if (mapping.childModel===self.name && mapping.associationType==='association') {\n                //get parent model\n                const parentModel = self.context.model(mapping.parentModel);\n                if (_.isNil(parentModel)) {\n                    throw new Error(`Association parent model (${mapping.parentModel}) cannot be found.`);\n                }\n                /**\n                 * store temp query expression\n                 * @type QueryExpression\n                 */\n                res =QueryExpression.create(self.viewAdapter).select('*');\n                expr = QueryExpression.create().where(QueryField.create(mapping.childField).from(self._alias || self.viewAdapter)).equal(QueryField.create(mapping.parentField).from(mapping.childField));\n                entity = QueryEntity.create(parentModel.viewAdapter).as(mapping.childField).left();\n                res.join(entity).with(expr);\n                if (arrMember.length>2) {\n                    parentModel._alias = mapping.childField;\n                    expr = DataAttributeResolver.prototype.resolveNestedAttributeJoin.call(parentModel, arrMember[1] + '/' + arrMember[2]);\n                    const arr = [];\n                    arr.push(res.$expand);\n                    arr.push(expr);\n                    return arr;\n                }\n                return res.$expand;\n            }\n            else if (mapping.parentModel===self.name && mapping.associationType==='association') {\n                const childModel = self.context.model(mapping.childModel);\n                if (_.isNil(childModel)) {\n                    throw new Error(`Association child model (${mapping.childModel}) cannot be found.`);\n                }\n                res =QueryExpression.create('Unknown').select('*');\n                expr = QueryExpression.create().where(QueryField.create(mapping.parentField).from(self.viewAdapter)).equal(QueryField.create(mapping.childField).from(arrMember[0]));\n                entity = QueryEntity.create(childModel.viewAdapter).as(arrMember[0]).left();\n                res.join(entity).with(expr);\n                return res.$expand;\n            }\n            else {\n                throw new Error(`The association type between ${mapping.parentModel} and ${mapping.childModel} model is not supported for filtering, grouping or sorting data.`);\n            }\n        }\n    }\n\n    /**\n     * @param {string} s\n     * @returns {*}\n     */\n    testAttribute(s) {\n        if (typeof s !== 'string')\n            return;\n        /**\n         * @private\n         */\n        let matches;\n        /**\n         * attribute aggregate function with alias e.g. f(x) as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '(' + matches[2] + ')' , property:matches[3] };\n        }\n        /**\n         * attribute aggregate function with alias e.g. x as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] , property:matches[2] };\n        }\n        /**\n         * attribute aggregate function with alias e.g. f(x)\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '(' + matches[2] + ')' };\n        }\n        // only attribute e.g. x\n        if (/^(\\w+)$/.test(s)) {\n            return { name: s};\n        }\n    }\n\n    /**\n     * @param {string} s\n     * @returns {*}\n     */\n    testAggregatedNestedAttribute(s) {\n        if (typeof s !== 'string')\n            return;\n        /**\n         * @private\n         */\n        let matches;\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b) as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { aggr: matches[1], name: matches[2] + '/' + matches[3], property:matches[4] };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b/c) as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\/(\\w+)\\)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { aggr: matches[1], name: matches[2] + '/' + matches[3] + '/' + matches[4], property:matches[5] };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b)\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\)$/i.exec(s);\n        if (matches) {\n            return { aggr: matches[1], name: matches[2] + '/' + matches[3]  };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b/c)\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\/(\\w+)\\)$/i.exec(s);\n        if (matches) {\n            return { aggr: matches[1], name: matches[2] + '/' + matches[3] + '/' + matches[4] };\n        }\n    }\n\n    /**\n     * @param {string} s\n     * @returns {*}\n     */\n    testNestedAttribute(s) {\n        if (typeof s !== 'string')\n            return;\n        /**\n         * @private\n         */\n        let matches;\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b) as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '(' + matches[2] + '/' + matches[3]  + ')', property:matches[4] };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b/c) as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\/(\\w+)\\)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '(' + matches[2] + '/' + matches[3] + '/' + matches[4]  + ')', property:matches[5] };\n        }\n        /**\n         * nested attribute with alias e.g. x/b as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\/(\\w+)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '/' + matches[2], property:matches[3] };\n        }\n        /**\n         * nested attribute with alias e.g. x/b/c as a\n         * @ignore\n         */\n        matches = /^(\\w+)\\/(\\w+)\\/(\\w+)\\sas\\s(\\w+)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '/' + matches[2] + '/' + matches[3], property:matches[4] };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b)\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '(' + matches[2] + '/' + matches[3]  + ')' };\n        }\n        /**\n         * nested attribute aggregate function with alias e.g. f(x/b/c)\n         * @ignore\n         */\n        matches = /^(\\w+)\\((\\w+)\\/(\\w+)\\/(\\w+)\\)$/i.exec(s);\n        if (matches) {\n            return { name: matches[1] + '('  + matches[2] + '/' + matches[3] + '/' + matches[4]  + ')' };\n        }\n        /**\n         * nested attribute with alias e.g. x/b\n         * @ignore\n         */\n        matches = /^(\\w+)\\/(\\w+)$/.exec(s);\n        if (matches) {\n            return { name: s };\n        }\n\n        /**\n         * nested attribute with alias e.g. x/b/c\n         * @ignore\n         */\n        matches = /^(\\w+)\\/(\\w+)\\/(\\w+)$/.exec(s);\n        if (matches) {\n            return { name: s };\n        }\n\n    }\n\n    /**\n     * @param {string} attr\n     * @returns {*}\n     */\n    resolveJunctionAttributeJoin(attr) {\n        const self = this, member = attr.split(\"/\");\n        //get the data association mapping\n        const mapping = self.inferMapping(member[0]);\n        //if mapping defines a junction between two models\n        if (mapping && mapping.associationType === \"junction\") {\n            //get field\n            const field = self.field(member[0]);\n\n            let entity;\n            let expr;\n            let q;\n            //first approach (default association adapter)\n            //the underlying model is the parent model e.g. Group > Group Members\n            if (mapping.parentModel === self.name) {\n\n                let parentField = \"parentId\", valueField = \"valueId\";\n                if (typeof mapping.childModel === 'undefined') {\n                    parentField = \"object\"; valueField = \"value\"\n                }\n                q =QueryExpression.create(self.viewAdapter).select('*');\n                //init an entity based on association adapter (e.g. GroupMembers as members)\n                entity = QueryEntity.create(mapping.associationAdapter).as(field.name);\n                //init join expression between association adapter and current data model\n                //e.g. Group.id = GroupMembers.parentId\n                expr = QueryExpression.create().where(QueryField.create(mapping.parentField).from(self.viewAdapter))\n                    .equal(QueryField.create(parentField).from(field.name));\n                //append join\n                q.join(entity).with(expr);\n                //data object tagging\n                if (typeof mapping.childModel === 'undefined') {\n                    return {\n                        $expand:[q.$expand],\n                        $select:QueryField.create(valueField).from(field.name)\n                    }\n                }\n\n                //return the resolved attribute for futher processing e.g. members.id\n                if (member[1] === mapping.childField) {\n                    return {\n                        $expand:[q.$expand],\n                        $select:QueryField.create(valueField).from(field.name)\n                    }\n                }\n                else {\n                    //get child model\n                    const childModel = self.context.model(mapping.childModel);\n                    if (_.isNil(childModel)) {\n                        throw new DataError(\"EJUNC\",\"The associated model cannot be found.\");\n                    }\n                    //create new join\n                    const alias = field.name + \"_\" + childModel.name;\n                    entity = QueryEntity.create(childModel.viewAdapter).as(alias);\n                    expr = QueryExpression.create().where(QueryField.create(\"valueId\").from(field.name))\n                        .equal(QueryField.create(mapping.childField).from(alias));\n                    //append join\n                    q.join(entity).with(expr);\n                    return {\n                        $expand:q.$expand,\n                        $select:QueryField.create(member[1]).from(alias)\n                    }\n                }\n            }\n            else {\n                q =QueryExpression.create(self.viewAdapter).select('*');\n                //the underlying model is the child model\n                //init an entity based on association adapter (e.g. GroupMembers as groups)\n                entity = QueryEntity.create(mapping.associationAdapter).as(field.name);\n                //init join expression between association adapter and current data model\n                //e.g. Group.id = GroupMembers.parentId\n                expr = QueryExpression.create().where(QueryField.create(mapping.childField).from(self.viewAdapter))\n                    .equal(QueryField.create(\"valueId\").from(field.name));\n                //append join\n                q.join(entity).with(expr);\n                //return the resolved attribute for futher proccesing e.g. members.id\n                if (member[1] === mapping.parentField) {\n                    return {\n                        $expand:[q.$expand],\n                        $select:QueryField.create(\"parentId\").from(field.name)\n                    }\n                }\n                else {\n                    //get parent model\n                    const parentModel = self.context.model(mapping.parentModel);\n                    if (_.isNil(parentModel)) {\n                        throw new DataError(\"EJUNC\",\"The associated model cannot be found.\");\n                    }\n                    //create new join\n                    const parentAlias = field.name + \"_\" + parentModel.name;\n                    entity = QueryEntity.create(parentModel.viewAdapter).as(parentAlias);\n                    expr = QueryExpression.create().where(QueryField.create(\"parentId\").from(field.name))\n                        .equal(QueryField.create(mapping.parentField).from(parentAlias));\n                    //append join\n                    q.join(entity).with(expr);\n                    return {\n                        $expand:q.$expand,\n                        $select:QueryField.create(member[1]).from(parentAlias)\n                    }\n                }\n            }\n        }\n        else {\n            throw new DataError(\"EJUNC\",\"The target model does not have a many to many association defined by the given attribute.\",\"\", self.name, attr);\n        }\n    }\n}\n\n\nconst modelProperty = Symbol('model');\nconst queryProperty = Symbol('query');\nconst expandProperty = Symbol('expand');\nconst flattenProperty = Symbol('flatten');\nconst silentProperty = Symbol('silent');\nconst viewProperty = Symbol('view');\n\n/**\n * @classdesc Represents a dynamic query helper for filtering, paging, grouping and sorting data associated with an instance of DataModel class.\n * @class\n * @property {QueryExpression|*} query - Gets the query expression\n * @property {DataModel|*} model - Gets the data model associated with this queryable\n * @augments DataContextEmitter\n */\nexport class DataQueryable {\n    /**\n     * @constructor\n     * @param {DataModel} model\n     */\n    constructor(model) {\n        this[modelProperty] = model;\n        //get silent property\n        if (model)\n            this.silent(model.$silent);\n    }\n\n    /**\n     *\n     * @returns {QueryExpression}\n     */\n    get query() {\n        if (_.isNil(this[queryProperty])) {\n            if (this.model) {\n                this[queryProperty] = QueryExpression.create(this.model.viewAdapter);\n                return this[queryProperty];\n            }\n            throw new Error('Model cannot be empty at this context');\n        }\n        return this[queryProperty];\n    }\n\n    /**\n     *\n     * @returns {DataModel}\n     */\n    get model() {\n        return this[modelProperty];\n    }\n\n    /**\n     * Clones the current DataQueryable instance.\n     * @returns {DataQueryable|*} - The cloned object.\n     */\n    clone() {\n        const result = new DataQueryable(this.model);\n        //set view if any\n        result.$view = this.$view;\n        //set silent property\n        result.$silent = this.$silent;\n        //set silent property\n        result.$levels = this.$levels;\n        //set flatten property\n        result.$flatten = this.$flatten;\n        //set expand property\n        result.$expand = this.$expand;\n        //set query\n        _.assign(result.query, this.query);\n        return result;\n    }\n\n    /**\n     * Ensures data queryable context and returns the current data context. This function may be overriden.\n     * @returns {DataContext}\n     * @ignore\n     */\n    ensureContext() {\n        if (this.model!==null)\n            if (this.model.context!==null)\n                return this.model.context;\n        return null;\n    }\n\n    /**\n     * Serializes the underlying query and clears current filter expression for further filter processing. This operation may be used in complex filtering.\n     * @param {Boolean=} useOr - Indicates whether an or statement will be used in the resulted statement.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of order\n     context.model('Order')\n     .where('orderStatus').equal(1).and('paymentMethod').equal(2)\n     .prepare().where('orderStatus').equal(2).and('paymentMethod').equal(2)\n     .prepare(true)\n     //(((OrderData.orderStatus=1) AND (OrderData.paymentMethod=2)) OR ((OrderData.orderStatus=2) AND (OrderData.paymentMethod=2)))\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    prepare(useOr) {\n        this.query.prepare(useOr);\n        return this;\n    }\n\n    /**\n     * Initializes a where expression\n     * @param attr {string} - A string which represents the field name that is going to be used as the left operand of this expression\n     * @returns {DataQueryable}\n     * @example\n     context.model('Person')\n     .where('user/name').equal('user1@exampl.com')\n     .select('description')\n     .first().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    where(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.where(DataAttributeResolver.prototype.resolveNestedAttribute.call(this, attr));\n            return this;\n        }\n        this.query.where(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Initializes a full-text search expression\n     * @param {string} text - A string which represents the text we want to search for\n     * @returns {DataQueryable}\n     * @example\n     context.model('Person')\n     .search('Peter')\n     .select('description')\n     .take(25).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    search(text) {\n        const self = this;\n        const options = { multiword:true };\n        const terms = [];\n        if (typeof text !== 'string') { return self; }\n        const re = /(\"(.*?)\")|(\\w+)/g;\n        let match = re.exec(text);\n        while(match) {\n            if (match[2]) {\n                terms.push(match[2]);\n            }\n            else {\n                terms.push(match[0]);\n            }\n            match = re.exec(text);\n        }\n        if (terms.length===0) {\n            return self;\n        }\n        self.prepare();\n        const stringTypes = [ \"Text\", \"URL\", \"Note\" ];\n        self.model.attributes.forEach(function(x) {\n            if (x.many) { return; }\n            const mapping = self.model.inferMapping(x.name);\n            if (mapping) {\n                if ((mapping.associationType === 'association') && (mapping.childModel===self.model.name)) {\n                    const parentModel = self.model.context.model(mapping.parentModel);\n                    if (parentModel) {\n                        parentModel.attributes.forEach(function(z) {\n                            if (stringTypes.indexOf(z.type)>=0) {\n                                terms.forEach(function (w) {\n                                    if (!/^\\s+$/.test(w))\n                                        self.or(x.name + '/' + z.name).contains(w);\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n            if (stringTypes.indexOf(x.type)>=0) {\n                terms.forEach(function (y) {\n                    if (!/^\\s+$/.test(y))\n                        self.or(x.name).contains(y);\n                });\n            }\n        });\n        self.prepare();\n        return self;\n    }\n\n    join(model) {\n        const self = this;\n        if (_.isNil(model))\n            return this;\n        /**\n         * @type {DataModel}\n         */\n        const joinModel = self.model.context.model(model);\n        //validate joined model\n        if (_.isNil(joinModel))\n            throw new Error(sprintf.sprintf(\"The %s model cannot be found\", model));\n        const arr = self.model.attributes.filter(function(x) { return x.type===joinModel.name; });\n        if (arr.length===0)\n            throw new Error(sprintf.sprintf(\"An internal error occured. The association between %s and %s cannot be found\", this.model.name ,model));\n        const mapping = self.model.inferMapping(arr[0].name);\n        const expr = QueryExpression.create();\n        expr.where(self.resolveField(mapping.childField)).equal(joinModel.resolveField(mapping.parentField));\n        /**\n         * @type DataAssociationMapping\n         */\n        const entity = QueryEntity.create(joinModel.viewAdapter).left();\n        //set join entity (without alias and join type)\n        self.select().query.join(entity).with(expr);\n        return self;\n    }\n\n    /**\n     * Prepares a logical AND expression\n     * @param attr {string} - The name of field that is going to be used in this expression\n     * @returns {DataQueryable}\n     * @example\n     context.model('Order').where('customer').equal(298)\n     .and('orderStatus').equal(1)\n     .list().then(function(result) {\n            //SQL: WHERE ((OrderData.customer=298) AND (OrderData.orderStatus=1)\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    and(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.and(DataAttributeResolver.prototype.resolveNestedAttribute.call(this, attr));\n            return this;\n        }\n        this.query.and(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Prepares a logical OR expression\n     * @param attr {string} - The name of field that is going to be used in this expression\n     * @returns {DataQueryable}\n     * @example\n     //((OrderData.orderStatus=1) OR (OrderData.orderStatus=2)\n     context.model('Order').where('orderStatus').equal(1)\n     .or('orderStatus').equal(2)\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    or(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.or(DataAttributeResolver.prototype.resolveNestedAttribute.call(this, attr));\n            return this;\n        }\n        this.query.or(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Performs an equality comparison.\n     * @param obj {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders with order status equal to 1\n     context.model('Order').where('orderStatus').equal(1)\n     .list().then(function(result) {\n            //WHERE (OrderData.orderStatus=1)\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    equal(obj) {\n        if (_.isArray(obj)) {\n            this.query.in(obj);\n            return this;\n        }\n        this.query.equal(obj);\n        return this;\n    }\n\n    /**\n     * Performs an equality comparison.\n     * @param obj {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a person with id equal to 299\n     context.model('Person').where('id').is(299)\n     .first().then(function(result) {\n            //WHERE (PersonData.id=299)\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    is(obj) {\n        return this.equal(obj);\n    }\n\n    /**\n     * Prepares a not equal comparison.\n     * @param obj {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders with order status different than 1\n     context.model('Order')\n     .where('orderStatus').notEqual(1)\n     .orderByDescending('orderDate')\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    notEqual(obj) {\n        if (_.isArray(obj)) {\n            this.query\n        }\n        this.query.notEqual(obj);\n        return this;\n    }\n\n    /**\n     * Prepares a greater than comparison.\n     * @param obj {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders where product price is greater than 800\n     context.model('Order')\n     .where('orderedItem/price').greaterThan(800)\n     .orderByDescending('orderDate')\n     .select('id','orderedItem/name as productName', 'orderedItem/price as productPrice', 'orderDate')\n     .take(5)\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results:\n     id   productName                                   productPrice  orderDate\n     ---  --------------------------------------------  ------------  -----------------------------\n     304  Apple iMac (27-Inch, 2013 Version)            1336.27       2015-11-27 23:49:17.000+02:00\n     322  Dell B1163w Mono Laser Multifunction Printer  842.86        2015-11-27 20:16:52.000+02:00\n     167  Razer Blade (2013)                            1553.43       2015-11-27 04:17:08.000+02:00\n     336  Apple iMac (27-Inch, 2013 Version)            1336.27       2015-11-26 07:25:35.000+02:00\n     89   Nvidia GeForce GTX 650 Ti Boost               1625.49       2015-11-21 17:29:21.000+02:00\n     */\n    greaterThan(obj) {\n        this.query.greaterThan(obj);\n        return this;\n    }\n\n    /**\n     * Prepares a greater than or equal comparison.\n     * @param obj {*} The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders where product price is greater than or equal to 800\n     context.model('Order')\n     .where('orderedItem/price').greaterOrEqual(800)\n     .orderByDescending('orderDate')\n     .take(5)\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    greaterOrEqual(obj) {\n        this.query.greaterOrEqual(obj);\n        return this;\n    }\n\n    /**\n     * Prepares a bitwise and comparison.\n     * @param {*} value - The right operand of the express\n     * @param {Number=} result - The result of a bitwise and expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of permissions for model Person and insert permission mask (2)\n     context.model('Permission')\n     //prepare bitwise AND (((PermissionData.mask & 2)=2)\n     .where('mask').bit(2)\n     .and('privilege').equal('Person')\n     .and('parentPrivilege').equal(null)\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     *\n     */\n    bit(value, result) {\n        if (_.isNil(result))\n            this.query.bit(value, value);\n        else\n            this.query.bit(value, result);\n        return this;\n    }\n\n    /**\n     * Prepares a lower than comparison\n     * @param obj {*}\n     * @returns {DataQueryable}\n     */\n    lowerThan(obj) {\n        this.query.lowerThan(obj);\n        return this;\n    }\n\n    /**\n     * Prepares a lower than or equal comparison.\n     * @param obj {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve orders based on payment due date\n     context.model('Order')\n     .orderBy('paymentDue')\n     .where('paymentDue').lowerOrEqual(moment().subtract('days',-7).toDate())\n     .and('paymentDue').greaterThan(new Date())\n     .take(10).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    lowerOrEqual(obj) {\n        this.query.lowerOrEqual(obj);\n        return this;\n    }\n\n    /**\n     * Prepares an ends with comparison\n     * @param obj {*} - The string to be searched for at the end of a field.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve people whose given name starts with 'D'\n     context.model('Person')\n     .where('givenName').startsWith('D')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results:\n     id   givenName  familyName\n     ---  ---------  ----------\n     257  Daisy      Lambert\n     275  Dustin     Brooks\n     333  Dakota     Gallagher\n     */\n    startsWith(obj) {\n        this.query.startsWith(obj);\n        return this;\n    }\n\n    /**\n     * Prepares an ends with comparison\n     * @param obj {*} - The string to be searched for at the end of a field.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve people whose given name ends with 'y'\n     context.model('Person')\n     .where('givenName').endsWith('y')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results\n     id   givenName  familyName\n     ---  ---------  ----------\n     257  Daisy      Lambert\n     287  Zachary    Field\n     295  Anthony    Berry\n     339  Brittney   Hunt\n     341  Kimberly   Wheeler\n     */\n    endsWith(obj) {\n        this.query.endsWith(obj);\n        return this;\n    }\n\n    /**\n     * Prepares a typical IN comparison.\n     * @param objs {Array} - An array of values which represents the values to be used in expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve orders with order status 1 or 2\n     context.model('Order').where('orderStatus').in([1,2])\n     .list().then(function(result) {\n            //WHERE (OrderData.orderStatus IN (1, 2))\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    in(objs) {\n        this.query.in(objs);\n        return this;\n    }\n\n    /**\n     * Prepares a typical NOT IN comparison.\n     * @param objs {Array} - An array of values which represents the values to be used in expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve orders with order status 1 or 2\n     context.model('Order').where('orderStatus').notIn([1,2])\n     .list().then(function(result) {\n            //WHERE (NOT OrderData.orderStatus IN (1, 2))\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    notIn(objs) {\n        this.query.notIn(objs);\n        return this;\n    }\n\n    /**\n     * Prepares a modular arithmetic operation\n     * @param {*} obj The value to be compared\n     * @param {Number} result The result of modular expression\n     * @returns {DataQueryable}\n     */\n    mod(obj, result) {\n        this.query.mod(obj, result);\n        return this;\n    }\n\n    /**\n     * Prepares a contains comparison (e.g. a string contains another string).\n     * @param value {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve person where the given name contains\n     context.model('Person').select(['id','givenName','familyName'])\n     .where('givenName').contains('ex')\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //The result set of this example may be:\n     id   givenName  familyName\n     ---  ---------  ----------\n     297  Alex       Miles\n     353  Alexis     Rees\n     */\n    contains(value) {\n        this.query.contains(value);\n        return this;\n    }\n\n    /**\n     * Prepares a not contains comparison (e.g. a string contains another string).\n     * @param value {*} - The right operand of the expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve persons where the given name not contains 'ar'\n     context.model('Person').select(['id','givenName','familyName'])\n     .where('givenName').notContains('ar')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //The result set of this example may be:\n     id   givenName  familyName\n     ---  ---------  ----------\n     257  Daisy      Lambert\n     259  Peter      French\n     261  Kylie      Jordan\n     263  Maxwell    Hall\n     265  Christian  Marshall\n     */\n    notContains(value) {\n        this.query.notContains(value);\n        return this;\n    }\n\n    /**\n     * Prepares a comparison where the left operand is between two values\n     * @param {*} value1 - The minimum value\n     * @param {*} value2 - The maximum value\n     * @returns {DataQueryable}\n     * @example\n     //retrieve products where price is between 150 and 250\n     context.model('Product')\n     .where('price').between(150,250)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //The result set of this example may be:\n     id   name                                        model   price\n     ---  ------------------------------------------  ------  ------\n     367  Asus Transformer Book T100                  HD2895  224.52\n     380  Zotac Zbox Nano XS AD13 Plus                WC5547  228.05\n     384  Apple iPad Air                              ZE6015  177.44\n     401  Intel Core i7-4960X Extreme Edition         SM5853  194.61\n     440  Bose SoundLink Bluetooth Mobile Speaker II  HS5288  155.27\n     */\n    between(value1, value2) {\n        this.query.between(value1, value2);\n        return this;\n    }\n\n    /**\n     * Selects a field or a collection of fields of the current model.\n     * @param {...string} attr  An array of fields, a field or a view name\n     * @returns {DataQueryable}\n     * @example\n     //retrieve the last 5 orders\n     context.model('Order').select('id','customer','orderDate','orderedItem')\n     .orderBy('orderDate')\n     .take(5).list().then(function(result) {\n            console.table(result.records);\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     * @example\n     //retrieve the last 5 orders by getting the associated customer name and product name\n     context.model('Order').select('id','customer/description as customerName','orderDate','orderedItem/name as productName')\n     .orderBy('orderDate')\n     .take(5).list().then(function(result) {\n            console.table(result.records);\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //The result set of this example may be:\n     id   customerName         orderDate                      orderedItemName\n     ---  -------------------  -----------------------------  ----------------------------------------------------\n     46   Nicole Armstrong     2014-12-31 13:35:41.000+02:00  LaCie Blade Runner\n     288  Cheyenne Hudson      2015-01-01 13:24:21.000+02:00  Canon Pixma MG5420 Wireless Photo All-in-One Printer\n     139  Christian Whitehead  2015-01-01 23:21:24.000+02:00  Olympus OM-D E-M1\n     3    Katelyn Kelly        2015-01-02 04:42:58.000+02:00  Kobo Aura\n     59   Cheyenne Hudson      2015-01-02 10:47:53.000+02:00  Google Nexus 7 (2013)\n\n     @example\n     //retrieve the best customers by getting the associated customer name and a count of orders made by the customer\n     context.model('Order').select('customer/description as customerName','count(id) as orderCount')\n     .orderBy('count(id)')\n     .groupBy('customer/description')\n     .take(3).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //The result set of this example may be:\n     customerName      orderCount\n     ----------------  ----------\n     Miranda Bird      19\n     Alex Miles        16\n     Isaiah Morton     16\n     */\n    select(attr) {\n        const self = this;\n        let arr;\n        let expr;\n        const arg = (arguments.length>1) ? Array.prototype.slice.call(arguments): attr;\n\n        if (typeof arg === 'string') {\n            if (arg===\"*\") {\n                //delete select\n                delete self.query.$select;\n                return this;\n            }\n            //validate field or model view\n            let field = self.model.field(arg);\n            if (field) {\n                //validate field\n                if (field.many || (field.mapping && field.mapping.associationType === 'junction')) {\n                    self.expand(field.name);\n                }\n                else {\n                    arr = [];\n                    arr.push(self.resolveField(field.name));\n                }\n            }\n            else {\n                //get data view\n                self.$view  = self.model.getDataView(arg);\n                //if data view was found\n                if (self.$view) {\n                    arr = [];\n                    let name;\n                    self.$view.fields.forEach(function(x) {\n                        name = x.name;\n                        field = self.model.field(name);\n                        //if a field with the given name exists in target model\n                        if (field) {\n                            //check if this field has an association mapping\n                            if (field.many || (field.mapping && field.mapping.associationType === 'junction'))\n                                self.expand(field.name);\n                            else\n                                arr.push(self.resolveField(field.name));\n                        }\n                        else {\n                            let b = DataAttributeResolver.prototype.testAggregatedNestedAttribute.call(self,name);\n                            if (b) {\n                                expr = DataAttributeResolver.prototype.selectAggregatedAttribute.call(self, b.aggr , b.name);\n                                if (expr) { arr.push(expr); }\n                            }\n                            else {\n                                b = DataAttributeResolver.prototype.testNestedAttribute.call(self,name);\n                                if (b) {\n                                    expr = DataAttributeResolver.prototype.selecteNestedAttribute.call(self, b.name, x.property);\n                                    if (expr) { arr.push(expr); }\n                                }\n                                else {\n                                    b = DataAttributeResolver.prototype.testAttribute.call(self,name);\n                                    if (b) {\n                                        arr.push(self.resolveField(b.name, x.property));\n                                    }\n                                    else if (/\\./g.test(name)) {\n                                        name = name.split('.')[0];\n                                        arr.push(self.resolveField(name));\n                                    }\n                                    else\n                                    {\n                                        arr.push(self.resolveField(name));\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                //select a field from a joined entity\n                else {\n                    expr = select_.call(self, arg);\n                    if (expr) {\n                        arr = arr || [];\n                        arr.push(expr);\n                    }\n                }\n            }\n            if (_.isArray(arr)) {\n                if (arr.length===0)\n                    arr = null;\n            }\n        }\n        else {\n            //get array of attributes\n            if (_.isArray(arg)) {\n                arr = [];\n                //check if field is a model dataview\n                if (arg.length === 1 && typeof arg[0] === 'string') {\n                    if (self.model.getDataView(arg[0])) {\n                        return self.select(arg[0]);\n                    }\n                }\n                arg.forEach(function(x) {\n                    if (typeof x === 'string') {\n                        const field = self.model.field(x);\n                        if (field) {\n                            if (field.many || (field.mapping && field.mapping.associationType === 'junction'))\n                                self.expand(field.name);\n                            else\n                                arr.push(self.resolveField(field.name));\n                        }\n                        //test nested attribute and simple attribute expression\n                        else {\n                            expr = select_.call(self, x);\n                            if (expr) {\n                                arr = arr || [];\n                                arr.push(expr);\n                            }\n                        }\n                    }\n                    else {\n                        //validate if x is an object (QueryField)\n                        arr.push(x);\n                    }\n\n                });\n            }\n        }\n        if (_.isNil(arr)) {\n            if (!self.query.hasFields()) {\n                //enumerate fields\n                const fields = self.model.attributes.filter(function(x) {\n                    return !(x.many || (x.mapping && x.mapping.associationType === 'junction'));\n                }).map(function(x) {\n                    const f = QueryField.create(x.name).from(self.model.viewAdapter);\n                    if (x.property)\n                        f.as(x.property);\n                    return f;\n                });\n                //and select fields\n                self.select.apply(self,fields);\n            }\n        }\n        else {\n            self.query.select(arr);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds a field or an array of fields to select statement\n     * @param {String|Array|DataField|*} attr\n     * @return {DataQueryable}\n     * @deprecated\n     */\n    alsoSelect(attr) {\n        const self = this;\n        if (!self.query.hasFields()) {\n            return self.select(attr);\n        }\n        else {\n            if (_.isNil(attr))\n                return self;\n            let arr = [];\n            if (typeof attr === 'string') {\n                arr.push(attr);\n            }\n            else if (_.isArray(attr)) {\n                arr = attr.slice(0);\n            }\n            else if (typeof attr === 'object') {\n                arr.push(attr);\n            }\n            const $select = self.query.$select;\n            arr.forEach(function(x) {\n                const field = self.resolveField(x);\n                if (_.isArray($select[self.model.viewAdapter]))\n                    $select[self.model.viewAdapter].push(field);\n\n            });\n            return self;\n        }\n    }\n\n    /**\n     * @param attr {string|*}\n     * @param alias {string=}\n     * @returns {DataQueryable|QueryField|*}\n     */\n    resolveField(attr, alias) {\n\n        if (typeof attr ==='undefined' || attr === null)\n            return attr;\n        if (typeof attr !=='string')\n            return attr;\n        let matches = /(count|avg|sum|min|max)\\((.*?)\\)/i.exec(attr), res, field, aggr, prop;\n        if (matches) {\n            //get field\n            field = this.model.field(matches[2]);\n            //get aggregate function\n            aggr = matches[1].toLowerCase();\n            //test nested attribute aggregation\n            if (_.isNil(field) && /\\//.test(matches[2])) {\n                //resolve nested attribute\n                const nestedAttr = DataAttributeResolver.prototype.resolveNestedAttribute.call(this, matches[2]);\n                //if nested attribute exists\n                if (nestedAttr) {\n                    if (_.isNil(alias)) {\n                        const nestedMatches = /as\\s(\\w+)$/i.exec(attr);\n                        alias = _.isNil(nestedMatches) ? aggr.concat('Of_', matches[2].replace(/\\//g, \"_\")) : nestedMatches[1];\n                    }\n                    /**\n                     * @type {Function}\n                     */\n                    const aggregateFunc = QueryFieldUtils[aggr];\n                    if (typeof aggregateFunc !== 'function') {\n                        throw new ReferenceError('The specified aggregate function is not implemented');\n                    }\n                    //return query field\n                    return aggregateFunc(nestedAttr.$name).as(alias);\n                }\n            }\n            if (typeof  field === 'undefined' || field === null)\n                throw new Error(sprintf.sprintf('The specified field %s cannot be found in target model.', matches[2]));\n            if (_.isNil(alias)) {\n                matches = /as\\s(\\w+)$/i.exec(attr);\n                if (matches) {\n                    alias = matches[1];\n                }\n                else {\n                    alias = aggr.concat('Of', field.name);\n                }\n            }\n            if (aggr==='count')\n                return QueryField.create().count(field.name).from(this.model.viewAdapter).as(alias);\n            else if (aggr==='avg')\n                return QueryField.create().average(field.name).from(this.model.viewAdapter).as(alias);\n            else if (aggr==='sum')\n                return QueryField.create().sum(field.name).from(this.model.viewAdapter).as(alias);\n            else if (aggr==='min')\n                return QueryField.create().min(field.name).from(this.model.viewAdapter).as(alias);\n            else if (aggr==='max')\n                return QueryField.create().max(field.name).from(this.model.viewAdapter).as(alias);\n        }\n        else {\n            matches = /(\\w+)\\((.*?)\\)/i.exec(attr);\n            if (matches) {\n                res = { };\n                field = this.model.field(matches[2]);\n                aggr = matches[1];\n                if (typeof  field === 'undefined' || field === null)\n                    throw new Error(sprintf.sprintf('The specified field %s cannot be found in target model.', matches[2]));\n                if (_.isNil(alias)) {\n                    matches = /as\\s(\\w+)$/i.exec(attr);\n                    if (matches) {\n                        alias = matches[1];\n                    }\n                }\n                prop = alias || field.property || field.name;\n                res[prop] = { }; res[prop]['$' + aggr] = [ QueryField.create(field.name).from(this.model.viewAdapter) ];\n                return res;\n            }\n            else {\n                //matches expression [field] as [alias] e.g. itemType as type\n                matches = /^(\\w+)\\s+as\\s+(.*?)$/i.exec(attr);\n                if (matches) {\n                    field = this.model.field(matches[1]);\n                    if (typeof  field === 'undefined' || field === null)\n                        throw new Error(sprintf.sprintf('The specified field %s cannot be found in target model.', attr));\n                    alias = matches[2];\n                    prop = alias || field.property || field.name;\n                    return QueryField.create(field.name).from(this.model.viewAdapter).as(prop);\n                }\n                else {\n                    //try to match field with expression [field] as [alias] or [nested]/[field] as [alias]\n                    field = this.model.field(attr);\n                    if (typeof  field === 'undefined' || field === null)\n                        throw new Error(sprintf.sprintf('The specified field %s cannot be found in target model.', attr));\n                    const f = QueryField.create(field.name).from(this.model.viewAdapter);\n                    if (field.property)\n                        return f.as(field.property);\n                    return f;\n                }\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Prepares an ascending sorting operation\n     * @param {string} attr - The field name to use for sorting results\n     * @returns {DataQueryable}\n     */\n    orderBy(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.orderBy(DataAttributeResolver.prototype.orderByNestedAttribute.call(this, attr));\n            return this;\n        }\n        this.query.orderBy(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Prepares a group by expression\n     * @param {...string} attr - A param array of string that represents the attributes which are going to be used in group by expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve products with highest sales during last month\n     context.model('Order')\n     .select('orderedItem/model as productModel', 'orderedItem/name as productName','count(id) as orderCount')\n     .where('orderDate').greaterOrEqual(moment().startOf('month').toDate())\n     .groupBy('orderedItem')\n     .orderByDescending('count(id)')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results\n     productModel  productName                              orderCount\n     ------------  ---------------------------------------  ----------\n     SM5111        Brother MFC-J6920DW                      3\n     FY8135        LaCie Blade Runner                       3\n     HA6910        Apple iMac (27-Inch, 2013 Version)       2\n     LD4238        Dell XPS 18                              2\n     HR6205        Samsung Galaxy Note 10.1 (2014 Edition)  2\n     */\n    groupBy(attr) {\n        const arr = [], arg = (arguments.length>1) ? Array.prototype.slice.call(arguments): attr;\n        if (_.isArray(arg)) {\n            for (let i = 0; i < arg.length; i++) {\n                const x = arg[i];\n                if (DataAttributeResolver.prototype.testNestedAttribute.bind(this)(x)) {\n                    //nested group by\n                    arr.push(DataAttributeResolver.prototype.orderByNestedAttribute.bind(this)(x));\n                }\n                else {\n                    arr.push(this.resolveField(x));\n                }\n            }\n        }\n        else {\n            if (DataAttributeResolver.prototype.testNestedAttribute.bind(this)(arg)) {\n                //nested group by\n                arr.push(DataAttributeResolver.prototype.orderByNestedAttribute.bind(this)(arg));\n            }\n            else {\n                arr.push(this.resolveField(arg));\n            }\n        }\n        if (arr.length>0) {\n            this.query.groupBy(arr);\n        }\n        return this;\n    }\n\n    /**\n     * Continues a ascending sorting operation\n     * @param {string} attr - The field to use for sorting results\n     * @returns {DataQueryable}\n     */\n    thenBy(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.thenBy(DataAttributeResolver.prototype.orderByNestedAttribute.bind(this)(attr));\n            return this;\n        }\n        this.query.thenBy(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Prepares a descending sorting operation\n     * @param {string} attr - The field name to use for sorting results\n     * @returns {DataQueryable}\n     */\n    orderByDescending(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.orderByDescending(DataAttributeResolver.prototype.orderByNestedAttribute.bind(this)(attr));\n            return this;\n        }\n        this.query.orderByDescending(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Continues a descending sorting operation\n     * @param {string} attr - The field name to use for sorting results\n     * @returns {DataQueryable}\n     */\n    thenByDescending(attr) {\n        if (typeof attr === 'string' && /\\//.test(attr)) {\n            this.query.thenByDescending(DataAttributeResolver.prototype.orderByNestedAttribute.bind(this)(attr));\n            return this;\n        }\n        this.query.thenByDescending(this.resolveField(attr));\n        return this;\n    }\n\n    /**\n     * Executes the specified query against the underlying model and returns the first item.\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occurred, or null otherwise. The second argument will contain the result.\n     * @returns {Promise|*}\n     * @example\n     //retrieve an order by id\n     context.model('Order')\n     .where('id').equal(302)\n     .first().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    first(callback) {\n        if (typeof callback === 'function') {\n            return firstInternal.call(this, callback);\n        }\n        return Q.promise((resolve, reject) => {\n            return firstInternal.bind(this)((err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n                return resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Executes the specified query and returns all objects which satisfy the specified criteria.\n     * @param {Function=} callback\n     * @returns {Promise|*}\n     */\n    all(callback) {\n        if (typeof callback === 'function') {\n            return allInternal.call(this, callback);\n        }\n        return Q.promise((resolve, reject) => {\n            return allInternal.bind(this)((err, result) => {\n                if (err) {\n                    return reject(err);\n                }\n                return resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Prepares a paging operation by skipping the specified number of records\n     * @param n {number} - The number of records to be skipped\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of products\n     context.model('Product')\n     .skip(10)\n     .take(10)\n     .list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    skip(n) {\n        this.query.$skip = n;\n        return this;\n    }\n\n    /**\n     * Prepares a data paging operation by taking the specified number of records\n     * @param {Number} n - The number of records to take\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     * @returns {DataQueryable|*} - If callback function is missing returns a promise.\n     */\n    take(n, callback) {\n        if (typeof callback !== 'function') {\n            this.query.take(n);\n            return this;\n        }\n        else {\n            takeInternal.call(this, n, callback);\n        }\n    }\n\n    /**\n     * Represents the callback function of DataQueryable.list() method.\n     * @callback DataQueryable~ListCallback\n     * @param {Error=} err\n     * @param {DataResultSet} result\n     */\n\n    /**\n     * Executes current query and returns a result set based on the specified paging parameters.\n     * <p>\n     *     The result is an instance of <a href=\"DataResultSet.html\">DataResultSet</a>. The returned records may contain nested objects\n     *     based on the definition of the current model (expandable fields).\n     *     This operation is one of the common data operations on MOST Data Applications\n     *     where the affected records may have nested objects which contain the associated objects of each object.\n     * </p>\n     <pre class=\"prettyprint\"><code>\n     {\n        \"total\": 242,\n        \"records\": [\n            ...\n            {\n                \"id\": 46,\n                \"orderDate\": \"2014-12-31 13:35:41.000+02:00\",\n                \"orderedItem\": {\n                    \"id\": 413,\n                    \"additionalType\": \"Product\",\n                    \"category\": \"Storage and Networking Gear\",\n                    \"price\": 647.13,\n                    \"model\": \"FY8135\",\n                    \"releaseDate\": \"2015-01-15 18:07:42.000+02:00\",\n                    \"name\": \"LaCie Blade Runner\",\n                    \"dateCreated\": \"2015-11-23 14:53:04.927+02:00\",\n                    \"dateModified\": \"2015-11-23 14:53:04.934+02:00\"\n                },\n                \"orderNumber\": \"DEF193\",\n                \"orderStatus\": {\n                    \"id\": 7,\n                    \"name\": \"Problem\",\n                    \"alternateName\": \"OrderProblem\",\n                    \"description\": \"Representing that there is a problem with the order.\"\n                },\n                \"paymentDue\": \"2015-01-20 13:35:41.000+02:00\",\n                \"paymentMethod\": {\n                    \"id\": 7,\n                    \"name\": \"PayPal\",\n                    \"alternateName\": \"PayPal\",\n                    \"description\": \"Payment via the PayPal payment service.\"\n                },\n                \"additionalType\": \"Order\",\n                \"description\": null,\n                \"dateCreated\": \"2015-11-23 21:00:18.306+02:00\",\n                \"dateModified\": \"2015-11-23 21:00:18.307+02:00\"\n            }\n            ...\n        ]\n    }\n     </code></pre>\n     * @param {DataQueryable~ListCallback=} callback - A callback function with arguments (err, result) where the first argument is the error, if any\n     * and the second argument is an object that represents a result set\n     * @returns {Deferred|*} - If callback is missing returns a promise.\n     @example\n     //retrieve products list order by price\n     context.model('Product')\n     .where('category').equal('LCDs and Peripherals')\n     .orderByDescending('price')\n     .take(3).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    list(callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            listInternal.bind(this)(function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return listInternal.call(this, callback);\n        }\n    }\n\n    /**\n     * Executes the specified query and returns an array of objects which satisfy the specified criteria.\n     * @returns {Promise|*}\n     */\n    getItems() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            delete self.query.$inlinecount;\n            if ((parseInt(self.query.$take) || 0) < 0) {\n                delete self.query.$take;\n                delete self.query.$skip;\n            }\n            if (!self.query.hasFields()) {\n                self.select();\n            }\n            execute_.call(self,function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                return resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Executes the query against the current model and returns the count of items found.\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result, if any.\n     * @returns {Deferred|*} - If callback parameter is missing then returns a Deferred object.\n     * @example\n     //retrieve the number of a product's orders\n     context.model('Order')\n     .where('orderedItem').equal(302)\n     .count().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    count(callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            countInternal.call(this, function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return countInternal.call(this, callback);\n        }\n    }\n\n    /**\n     * Executes the query against the current model and returns the maximum value of the given attribute.\n     * @param {string} attr - A string that represents a field of the current model\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result, if any.\n     * @returns {Deferred|*} - If callback parameter is missing then returns a Deferred object.\n     * @example\n     //retrieve the maximum price of products sold during last month\n     context.model('Order')\n     .where('orderDate').greaterOrEqual(moment().startOf('month').toDate())\n     .max('orderedItem/price').then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    max(attr, callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            maxInternal.call(this, attr, function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return maxInternal.call(this, attr, callback);\n        }\n    }\n\n    /**\n     * Executes the query against the current model and returns the average value of the given attribute.\n     * @param {string} attr - A string that represents a field of the current model\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result, if any.\n     * @returns {Deferred|*} - If callback parameter is missing then returns a Deferred object.\n     * @example\n     //retrieve the mininum price of products sold during last month\n     context.model('Order')\n     .where('orderDate').greaterOrEqual(moment().startOf('month').toDate())\n     .min('orderedItem/price').then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    min(attr, callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            minInternal.call(this, attr, function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return minInternal.call(this, attr, callback);\n        }\n    }\n\n    /**\n     * Executes the query against the current model and returns the average value of the given attribute.\n     * @param {string} attr - A string that represents a field of the current model\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result, if any.\n     * @returns {Deferred|*} - If callback parameter is missing then returns a Deferred object.\n     * @example\n     //retrieve the average price of products sold during last month\n     context.model('Order')\n     .where('orderDate').greaterOrEqual(moment().startOf('month').toDate())\n     .average('orderedItem/price').then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    average(attr, callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            averageInternal_.bind(this)(attr, function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return averageInternal_.bind(this)(attr, callback);\n        }\n    }\n\n    /**\n     * Migrates the underlying data model\n     * @param {Function} callback - A callback function that should be called at the end of this operation. The first argument may be an error if any occured.\n     */\n    migrate(callback) {\n        const self = this;\n        try {\n            //ensure context\n            self.ensureContext();\n            if (self.model) {\n                self.model.migrate(function(err) {\n                    callback(err);\n                })\n            }\n            else {\n                callback();\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n\n    }\n\n    postExecute(result, callback) {\n        callback();\n    }\n\n    /**\n     * Disables permission listeners and executes the underlying query without applying any permission filters\n     * @param {Boolean=} value - A boolean which represents the silent flag. If value is missing the default parameter is true.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve user\n     context.model('User')\n     .where('name').equal('other@example.com')\n     .silent()\n     .first().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    silent(value) {\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.$silent = false;\n        if (typeof value === 'undefined') {\n            this.$silent = true;\n        }\n        else {\n            this.$silent = value;\n        }\n        return this;\n    }\n\n    /**\n     * Generates a MD5 hashed string for this DataQueryable instance\n     * @returns {string}\n     */\n    toMD5() {\n        const q = { query:this.query };\n        if (typeof this.$expand !== 'undefined') { q.$expand =this.$expand; }\n        if (typeof this.$levels!== 'undefined') { q.$levels =this.$levels; }\n        if (typeof this.$flatten!== 'undefined') { q.$flatten =this.$flatten; }\n        if (typeof this.$silent!== 'undefined') { q.$silent =this.$silent; }\n        if (typeof this.$asArray!== 'undefined') { q.$asArray =this.$asArray; }\n        return TextUtils.toMD5(q);\n    }\n\n    /**\n     * @param {Boolean=} value\n     * @returns {DataQueryable}\n     */\n    asArray(value) {\n        /**\n         * @type {boolean}\n         * @private\n         */\n        this.$asArray = false;\n        if (typeof value === 'undefined') {\n            this.$asArray = true;\n        }\n        else {\n            this.$asArray = value;\n        }\n        return this;\n    }\n\n    /**\n     * Gets or sets query data. This data may be used in before and after execute listeners.\n     * @param {string=} name\n     * @param {*=} value\n     * @returns {DataQueryable|*}\n     */\n    data(name, value) {\n        this.query.data = this.query.data || {};\n        if (typeof name === 'undefined') {\n            return this.query.data;\n        }\n        if (typeof value === 'undefined') {\n            return this.query.data[name];\n        }\n        else {\n            this.query.data[name] = value;\n        }\n        return this;\n    }\n\n    /**\n     * Gets or sets a string which represents the title of this DataQueryable instance. This title may be used in caching operations\n     * @param {string=} value - The title of this DataQueryable instance\n     * @returns {string|DataQueryable}\n     */\n    title(value) {\n        return this.data('title', value);\n    }\n\n    /**\n     * Gets or sets a boolean which indicates whether results should be cached or not. This parameter is valid for models which have caching mechanisms.\n     * @param {boolean=} value\n     * @returns {string|DataQueryable}\n     */\n    cache(value) {\n        return this.data('cache', value);\n    }\n\n    /**\n     * Sets an expandable field or collection of fields. An expandable field produces nested objects based on the association between two models.\n     * @param {...string|*} attr - A param array of strings which represents the field or the array of fields that are going to be expanded.\n     * If attr is missing then all the previously defined expandable fields will be removed.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve an order and expand customer field\n     context.model('Order')\n     //note: the field [orderedItem] is defined as expandable in model definition and it will produce a nested object for each order\n     .select('id','orderedItem','customer')\n     .expand('customer')\n     .where('id').equal(46)\n     .first().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Result:\n     {\n        \"id\": 46,\n        \"orderedItem\": {\n            \"id\": 413,\n            \"additionalType\": \"Product\",\n            \"category\": \"Storage and Networking Gear\",\n            \"price\": 647.13,\n            \"model\": \"FY8135\",\n            \"releaseDate\": \"2015-01-15 18:07:42.000+02:00\",\n            \"name\": \"LaCie Blade Runner\",\n            \"dateCreated\": \"2015-11-23 14:53:04.927+02:00\",\n            \"dateModified\": \"2015-11-23 14:53:04.934+02:00\"\n        },\n        \"customer\": {\n            \"id\": 317,\n            \"additionalType\": \"Person\",\n            \"alternateName\": null,\n            \"description\": \"Nicole Armstrong\",\n            \"image\": \"https://s3.amazonaws.com/uifaces/faces/twitter/zidoway/128.jpg\",\n            \"dateCreated\": \"2015-11-23 14:52:57.886+02:00\",\n            \"dateModified\": \"2015-11-23 14:52:57.917+02:00\"\n        }\n    }\n     @example //retrieve an order and do not expand customer field\n     {\n        \"id\": 46,\n        \"orderedItem\": {\n            \"id\": 413,\n            \"additionalType\": \"Product\",\n            \"category\": \"Storage and Networking Gear\",\n            \"price\": 647.13,\n            \"model\": \"FY8135\",\n            \"releaseDate\": \"2015-01-15 18:07:42.000+02:00\",\n            \"name\": \"LaCie Blade Runner\",\n            \"dateCreated\": \"2015-11-23 14:53:04.927+02:00\",\n            \"dateModified\": \"2015-11-23 14:53:04.934+02:00\"\n        },\n        \"customer\": 317\n    }\n     */\n    expand(attr) {\n        const self = this, arg = (arguments.length>1) ? Array.prototype.slice.call(arguments): attr;\n        if (_.isNil(arg)) {\n            delete self.$expand;\n        }\n        else {\n            if (!_.isArray(this.$expand))\n                self.$expand=[];\n            if (_.isArray(arg)) {\n                arg.forEach(function(x) {\n                    if (_.isNil(x)) {\n                        return;\n                    }\n                    if ((typeof x === 'string')\n                        || (typeof x === 'object' && x.hasOwnProperty('name'))) {\n                        self.$expand.push(x);\n                    }\n                    else {\n                        throw new Error(\"Expand option may be a string or a named object.\")\n                    }\n                });\n            }\n            else {\n                self.$expand.push(arg);\n            }\n        }\n        return self;\n    }\n\n    /**\n     * Disables expandable fields\n     * @param {boolean=} value - If the value is true the result will contain only flat objects -without any nested associated object-,\n     * even if model definition contains expandable fields. If value is missing, the default parameter is true\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders\n     context.model('Order')\n     .flatten()\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results:\n     id  customer  orderStatus  paymentMethod\n     --  --------  -----------  -------------\n     1   299       5            6\n     2   337       7            5\n     3   309       3            3\n     4   257       2            4\n     5   285       5            2\n     */\n    flatten(value) {\n\n        if (value || (typeof value==='undefined')) {\n            //delete expandable data (if any)\n            delete this.$expand;\n            this.$flatten = true;\n        }\n        else {\n            delete this.$flatten;\n        }\n        if (this.$flatten) {\n            this.$levels = 0;\n        }\n        return this;\n    }\n\n    /**\n     * Prepares an addition (e.g. ([field] + 4))\n     * @param {number|*} x - The\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of products\n     context.model('Product')\n     .select('id','name', 'price')\n     //perform ((ProductData.price + 100)>300)\n     .where('price').add(100).lowerThan(300)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    add(x) {\n        this.query.add(x); return this;\n    }\n\n    /**\n     * Prepares a subtraction (e.g. ([field] - 4))\n     * @param {number|*} x\n     * @returns {DataQueryable}\n     //retrieve a list of orders\n     context.model('Product')\n     .select('id','name', 'price')\n     //perform ((ProductData.price - 50)<150)\n     .where('price').subtract(50).lowerThan(150)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    subtract(x) {\n        this.query.subtract(x); return this;\n    }\n\n    /**\n     * Prepares a multiplication (e.g. ([field] * 0.2))\n     * @param {number} x\n     * @returns {DataQueryable}\n     @example\n     //retrieve a list of orders\n     context.model('Product')\n     .select('id','name', 'price')\n     //perform ((ProductData.price * 0.2)<50)\n     .where('price').multiply(0.2).lowerThan(50)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    multiply(x) {\n        this.query.multiply(x); return this;\n    }\n\n    /**\n     * Prepares a division (e.g. ([field] / 0.2))\n     * @param {number} x\n     * @returns {DataQueryable}\n     @example\n     //retrieve a list of orders\n     context.model('Product')\n     .select('id','name', 'price')\n     //perform ((ProductData.price / 0.8)>500)\n     .where('price').divide(0.8).greaterThan(500)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    divide(x) {\n        this.query.divide(x); return this;\n    }\n\n    /**\n     * * Prepares a round mathematical expression\n     * @param {number=} n\n     * @returns {DataQueryable}\n     */\n    round(n) {\n        this.query.round(n); return this;\n    }\n\n    /**\n     * Prepares a substring comparison\n     * @param {number} start - The position where to start the extraction. First character is at index 0\n     * @param {number=} length - The number of characters to extract\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of persons\n     context.model('Person')\n     .select('givenName')\n     .where('givenName').substr(0,4).equal('Alex')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results:\n     givenName\n     ---------\n     Alex\n     Alexis\n     */\n    substr(start, length) {\n        this.query.substr(start,length); return this;\n    }\n\n    /**\n     * Prepares a string concatenation expression\n     * @param {string} s\n     * @returns {DataQueryable}\n     */\n    concat(s) {\n        this.query.concat(s); return this;\n    }\n\n    /**\n     * Prepares a string trimming expression\n     * @returns {DataQueryable}\n     */\n    trim() {\n        this.query.trim(); return this;\n    }\n\n    /**\n     * Prepares a string length expression\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of persons\n     context.model('Person')\n     .select('givenName')\n     .where('givenName').length().equal(5)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     @example //Results:\n     givenName\n     ---------\n     Daisy\n     Peter\n     Kylie\n     Colin\n     Lydia\n     */\n    length() {\n        this.query.length(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the date only value of a datetime field\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders\n     context.model('Order')\n     .select('id','paymentDue', 'orderDate')\n     .where('orderDate').getDate().equal('2015-01-16')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    getDate() {\n        this.query.getDate(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the year of a datetime field\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders made during 2015\n     context.model('Order')\n     .where('orderDate').getYear().equal(2015)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    getYear() {\n        this.query.getYear(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the year of a datetime field\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders made during 2015\n     context.model('Order')\n     .where('orderDate').getYear().equal(2015)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    getFullYear() {\n        this.query.getYear(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the month (from 1 to 12) of a datetime field.\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders made during October 2015\n     context.model('Order')\n     .where('orderDate').getYear().equal(2015)\n     .and('orderDate').getMonth().equal(10)\n      .take(5).list().then(function(result) {\n            console.table(result.records);\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    getMonth() {\n        this.query.getMonth(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the day of the month of a datetime field\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of orders\n     context.model('Order')\n     .where('orderDate').getYear().equal(2015)\n     .and('orderDate').getMonth().equal(1)\n     .and('orderDate').getDay().equal(16)\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    getDay() {\n        this.query.getDay(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the hours (from 0 to 23) a datetime field\n     * @returns {DataQueryable}\n     */\n    getHours() {\n        this.query.getHours(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the minutes (from 0 to 59) a datetime field\n     * @returns {DataQueryable}\n     */\n    getMinutes() {\n        this.query.getMinutes(); return this;\n    }\n\n    /**\n     * Prepares an expression by getting the seconds (from 0 to 59) a datetime field\n     * @returns {DataQueryable}\n     */\n    getSeconds() {\n        this.query.getSeconds(); return this;\n    }\n\n    /**\n     * Prepares a floor mathematical expression\n     * @returns {DataQueryable}\n     */\n    floor() {\n        this.query.floor(); return this;\n    }\n\n    /**\n     * Prepares a ceil mathematical expression\n     * @returns {DataQueryable}\n     */\n    ceil() {\n        this.query.ceil(); return this;\n    }\n\n    /**\n     * Prepares a lower case string comparison\n     * @returns {DataQueryable}\n     */\n    toLocaleLowerCase() {\n        this.query.toLocaleLowerCase(); return this;\n    }\n\n    /**\n     * Prepares a lower case string comparison\n     * @returns {DataQueryable}\n     * @example\n     //retrieve a list of persons\n     context.model('Person')\n     .where('givenName').toLocaleLowerCase().equal('alexis')\n     .take(5).list().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    toLowerCase() {\n        return this.toLocaleLowerCase();\n    }\n\n    /**\n     * Prepares an upper case string comparison\n     * @returns {DataQueryable}\n     */\n    toLocaleUpperCase() {\n        this.query.toLocaleUpperCase(); return this;\n    }\n\n    /**\n     * Prepares an upper case string comparison\n     * @returns {DataQueryable}\n     */\n    toUpperCase() {\n        return this.toLocaleUpperCase();\n    }\n\n    /**\n     * Executes the underlying query and a single value.\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     * @returns {Deferred|*}\n     * @example\n     //retrieve the full name (description) of a person\n     context.model('Person')\n     .where('user').equal(330)\n     .select('description')\n     .value().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    value(callback) {\n        if (typeof callback !== 'function') {\n            const d = Q.defer();\n            valueInternal.bind(this)(function(err, result) {\n                if (err) { return d.reject(err); }\n                d.resolve(result);\n            });\n            return d.promise;\n        }\n        else {\n            return valueInternal.bind(this)(callback);\n        }\n    }\n\n    /**\n     * Sets the number of levels of the expandable attributes.\n     * The default value is 1 which means that any expandable attribute will be flat (without any other nested attribute).\n     * If the value is greater than 1 then the nested objects may contain other nested objects and so on.\n     * @param {Number=} value - A number which represents the number of levels which are going to be used in expandable attributes.\n     * @returns {DataQueryable}\n     * @example\n     //get orders, expand customer and get customer's nested objects if any.\n     context.model('Order')\n     .orderByDescending('dateCreated)\n     .expand('customer')\n     .levels(2)\n     .getItems().then(function(result) {\n            done(null, result);\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    levels(value) {\n        /**\n         * @type {number}\n         * @private\n         */\n        this.$levels = 1;\n        if (typeof value === 'undefined') {\n            this.$levels = 1;\n        }\n        else if (typeof value === 'number') {\n            this.$levels = parseInt(value);\n        }\n        //set flatten property (backward compatibility issue)\n        this.$flatten = (this.$levels<1);\n        return this;\n    }\n\n    /**\n     * Gets the number of levels of the expandable objects\n     * @returns {number}\n     */\n    getLevels() {\n        if (typeof this.$levels === 'number') {\n            return this.$levels;\n        }\n        return 1;\n    }\n\n    /**\n     * Converts a DataQueryable instance to an object which is going to be used as parameter in DataQueryable.expand() method\n     *  @param {String} attr - A string which represents the attribute of a model which is going to be expanded with the options specified in this instance of DataQueryable.\n     *\n     *  @example\n     //get customer and customer orders with options (e.g. select specific attributes and sort orders by order date)\n     context.model(\"Person\")\n     .search(\"Daisy\")\n     .expand(context.model(\"Order\").select(\"id\", \"customer\",\"orderStatus\", \"orderDate\", \"orderedItem\").levels(2).orderByDescending(\"orderDate\").take(10).toExpand(\"orders\"))\n     .take(3)\n     .getItems()\n     .then(function (result) {\n            console.log(JSON.stringify(result));\n            done();\n        }).catch(function (err) {\n        done(err);\n    });\n     *\n     */\n    toExpand(attr) {\n        if ((typeof attr === 'string') && (attr.length>0)) {\n            return {\n                name: attr,\n                options: this\n            }\n        }\n        throw new Error(\"Invalid parameter. Expected not empty string.\")\n    }\n\n    /**\n     * Executes the specified query and returns the first object which satisfy the specified criteria.\n     * @returns {Observable|*}\n     */\n    getItem() {\n        return this.first();\n    }\n\n    /**\n     * Gets an instance of DataObject by executing the defined query.\n     * @returns {Promise|*}\n     */\n    getTypedItem() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            return self.getItem().then((result) => {\n                return resolve(self.model.convert(result));\n            }).catch((err) => {\n                return reject(err);\n            });\n        });\n    }\n\n    /**\n     * Gets a collection of DataObject instances by executing the defined query.\n     * @returns {Promise|*}\n     */\n    getTypedItems() {\n        const self = this;\n        return Q.promise((resolve, reject) => {\n            return self.getItems().then((result) => {\n                return resolve(self.model.convert(result));\n            }).catch((err) => {\n                return reject(err);\n            });\n        });\n    }\n\n    /**\n     * Executes current query and returns a result set based on the specified paging parameters.\n     * @returns {Promise|*}\n     */\n    getList() {\n        return this.list();\n    }\n\n    /**\n     * Gets a result set that contains a collection of DataObject instances by executing the defined query.\n     * @returns {Promise|*}\n     */\n    getTypedList() {\n        const self = this, d = Q.defer();\n        process.nextTick(function() {\n            self.list().then(function (result) {\n                result.records = self.model.convert(result.records.slice(0));\n                return d.resolve(result);\n            }).catch(function(err) {\n                return d.reject(err);\n            });\n        });\n        return d.promise;\n    }\n\n    /**\n     * Executes the specified query and returns all objects which satisfy the specified criteria.\n     * @returns {Promise|*}\n     */\n    getAllItems() {\n        return this.all();\n    }\n\n    /**\n     * Executes the specified query and returns all objects which satisfy the specified criteria.\n     * @returns {Promise|*}\n     */\n    getAllTypedItems() {\n        return this.skip(0).take(-1).getTypedItems();\n    }\n}\n\n/**\n * @this DataQueryable\n * @param arg\n * @returns {*}\n * @private\n */\nfunction select_(arg) {\n    const self = this;\n    if (typeof arg === 'string' && arg.length===0) {\n        return;\n    }\n    let a = DataAttributeResolver.prototype.testAggregatedNestedAttribute.call(self,arg);\n    if (a) {\n        return DataAttributeResolver.prototype.selectAggregatedAttribute.call(self, a.aggr , a.name, a.property);\n    }\n    else {\n        a = DataAttributeResolver.prototype.testNestedAttribute.call(self,arg);\n        if (a) {\n            return DataAttributeResolver.prototype.selecteNestedAttribute.call(self, a.name, a.property);\n        }\n        else {\n            a = DataAttributeResolver.prototype.testAttribute.call(self,arg);\n            if (a) {\n                return self.resolveField(a.name, a.property);\n            }\n            else {\n                return self.resolveField(arg);\n            }\n        }\n    }\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {Function} callback\n */\nfunction firstInternal(callback) {\n    const self = this;\n    callback = callback || function() {};\n    self.skip(0).take(1, function(err, result) {\n        if (err) {\n            callback(err);\n        }\n        else {\n            if (result.length>0)\n                callback(null, result[0]);\n            else\n                callback(null);\n        }\n    });\n}\n\n\n/**\n * @this DataQueryable\n * @private\n * @param {Function} callback\n */\nfunction allInternal(callback) {\n    const self = this;\n    //remove skip and take\n    delete this.query.$skip;\n    delete this.query.$take;\n    //validate already selected fields\n    if (!self.query.hasFields()) {\n        self.select();\n    }\n    callback = callback || function() {};\n    //execute select\n    execute_.call(self, callback);\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {Number} n - Defines the number of items to take\n * @param {function=} callback\n * @returns {*} - A collection of objects that meet the query provided\n */\nfunction takeInternal(n, callback) {\n    const self = this;\n    self.query.take(n);\n    callback = callback || function() {};\n    //validate already selected fields\n    if (!self.query.hasFields()) {\n        self.select();\n    }\n    //execute select\n    execute_.call(self,callback);\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {Function} callback\n */\nfunction listInternal(callback) {\n    const self = this;\n    try {\n        callback = callback || function() {};\n        //ensure take attribute\n        const take = self.query.$take || 25;\n        //ensure that fields are already selected (or select all)\n        self.select();\n        //clone object\n        const q1 = self.clone();\n        //take objects\n        self.take(take, function(err, result)\n        {\n            if (err) {\n                callback(err);\n            }\n            else {\n                // get count of records\n                q1.count(function(err, total) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        //and finally create result set\n                        const res = { total: total, skip: parseInt(self.query.$skip) || 0 , records: (result || []) };\n                        callback(null, res);\n                    }\n                });\n            }\n        });\n    }\n    catch(e) {\n        callback(e);\n    }\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param callback {Function}\n * @returns {*} - A collection of objects that meet the query provided\n */\nfunction countInternal(callback) {\n    const self = this;\n    callback = callback || function() {};\n    //add a count expression\n    const field = self.model.attributes[0];\n    if (field===null)\n        return callback.call(this, new Error('Queryable collection does not have any property.'));\n    //normalize query and remove skip\n    delete self.query.$skip;\n    delete self.query.$take;\n    delete self.query.$order;\n    delete self.query.$group;\n    //append count expression\n    self.query.select(QueryField.create().count(field.name).from(self.model.viewAdapter));\n    //execute select\n    execute_.call(self, function(err, result) {\n        if (err) { callback.call(self, err, result); return; }\n        let value = null;\n        if (_.isArray(result)) {\n            //get first value\n            if (result.length>0)\n                value = result[0][field.name];\n        }\n        callback.call(self, err, value);\n    });\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {string} attr\n * @param callback {Function}\n */\nfunction maxInternal(attr, callback) {\n    const self = this;\n    delete self.query.$skip;\n    const field = DataAttributeResolver.prototype.selectAggregatedAttribute.call(self, 'max', attr);\n    self.select(field).flatten().value(function(err, result) {\n        if (err) { return callback(err); }\n        callback(null, result)\n    });\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param attr {String}\n * @param callback {Function}\n */\nfunction minInternal(attr, callback) {\n    const self = this;\n    delete self.query.$skip;\n    const field = DataAttributeResolver.prototype.selectAggregatedAttribute.call(self, 'min', attr);\n    self.select(field).flatten().value(function(err, result) {\n        if (err) { return callback(err); }\n        callback(null, result)\n    });\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {string} attr\n * @param {Function} callback\n */\nfunction averageInternal_(attr, callback) {\n    const self = this;\n    delete self.query.$skip;\n    const field = DataAttributeResolver.prototype.selectAggregatedAttribute.call(self, 'avg', attr);\n    self.select(field).flatten().value(function(err, result) {\n        if (err) { return callback(err); }\n        callback(null, result)\n    });\n}\n\n/**\n * @private\n * @param {Function} callback\n */\nfunction executeCount_(callback) {\n    try {\n        const self = this, context = self.ensureContext();\n        const clonedQuery = self.query.clone();\n        //delete properties\n        delete clonedQuery.$skip;\n        delete clonedQuery.$take;\n        //add wildcard field\n        clonedQuery.select(QueryField.create().count('*'));\n        //execute count\n        context.db.execute(clonedQuery, null, function(err, result) {\n            if (err) {\n                callback(err);\n                return;\n            }\n            callback(err, result.length>0 ? result[0] : 0);\n        });\n    }\n    catch (e) {\n        callback(e);\n    }\n\n}\n\n/**\n * @this DataQueryable\n * Executes the underlying query statement.\n * @param {function(Error,*=)} callback\n * @private\n */\nfunction execute_(callback) {\n    const self = this, context = self.ensureContext();\n    self.migrate(function(err) {\n        if (err) { callback(err); return; }\n        const e = { model:self.model, query:self.query, type:'select' };\n        const flatten = self.$flatten || (self.getLevels()===0);\n        if (!flatten) {\n            //get expandable fields\n            const expandables = self.model.attributes.filter(function(x) { return x.expandable; });\n            //get selected fields\n            const selected = self.query.$select[self.model.viewAdapter];\n            if (_.isArray(selected)) {\n                //remove hidden fields\n                const hiddens = self.model.attributes.filter(function(x) { return x.hidden; });\n                if (hiddens.length>0) {\n                    for (let i = 0; i < selected.length; i++) {\n                        const x = selected[i];\n                        const hiddenField = hiddens.find(function(y) {\n                            const f = x instanceof QueryField ? x : new QueryField(x);\n                            return f.name() === y.name;\n                        });\n                        if (hiddenField) {\n                            selected.splice(i, 1);\n                            i-=1;\n                        }\n                    }\n                }\n                //expand fields\n                if (expandables.length>0) {\n                    selected.forEach(function(x) {\n                        //get field\n                        const field = expandables.find(function(y) {\n                            const f = x instanceof QueryField ? x : new QueryField(x);\n                            return f.name() === y.name;\n                        });\n                        //add expandable models\n                        if (field) {\n                            const mapping = self.model.inferMapping(field.name);\n                            if (mapping) {\n                                self.$expand = self.$expand || [ ];\n                                const expand1 = self.$expand.find(function(x) {\n                                    return x.name === field.name;\n                                });\n                                if (typeof expand1 === 'undefined') {\n                                    self.expand(mapping);\n                                }\n                            }\n\n                        }\n                    });\n                }\n            }\n        }\n\n        //merge view filter. if any\n        if (self.$view) {\n            self.model.filter({ $filter: self.$view.filter, $order:self.$view.order, $group:self.$view.group }, function(err, q) {\n                if (err) {\n                    if (err) { callback(err); }\n                }\n                else {\n                    //prepare current filter\n                    if (q.query.$prepared) {\n                        if (e.query.$where)\n                            e.query.prepare();\n                        e.query.$where = q.query.$prepared;\n                    }\n                    if (q.query.$group)\n                    //replace group fields\n                        e.query.$group = q.query.$group;\n                    //add order fields\n                    if (q.query.$order) {\n                        if (_.isArray(e.query.$order)) {\n                            q.query.$order.forEach(function(x) { e.query.$order.push(x); });\n                        }\n                        else {\n                            e.query.$order = q.query.$order;\n                        }\n                    }\n                    //execute query\n                    finalExecuteInternal_.call(self, e, callback);\n                }\n            });\n        }\n        else {\n            //execute query\n            finalExecuteInternal_.call(self, e, callback);\n        }\n    });\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {*} e\n * @param {Function} callback\n */\nfunction finalExecuteInternal_(e, callback) {\n    const self = this, context = self.ensureContext();\n    //pass data queryable to event\n    e.emitter = this;\n    const afterListenerCount = self.model.listeners('after.execute').length;\n    self.model.emit('before.execute', e, function(err) {\n        if (err) {\n            callback(err);\n        }\n        else {\n            //if command has been completed, do not execute the command against the underlying database\n            if (typeof e['result'] !== 'undefined') {\n                //call after execute\n                const result = e['result'];\n                afterExecute_.call(self, result, function(err, result) {\n                    if (err) { return callback(err); }\n                    if (afterListenerCount===0) { return callback(null, result); }\n                    //raise after execute event\n                    self.model.emit('after.execute', e, function(err) {\n                        if (err) { return callback(err); }\n                        callback(null, result);\n                    });\n                });\n                return;\n            }\n            context.db.execute(e.query, null, function(err, result) {\n                if (err) { return callback(err); }\n                afterExecute_.call(self, result, function(err, result) {\n                    if (err) { return callback(err); }\n                    if (afterListenerCount===0) { return callback(null, result); }\n                    //raise after execute event\n                    e.result = result;\n                    self.model.emit('after.execute', e, function(err) {\n                        if (err) { return callback(err); }\n                        callback(null, result);\n                    });\n                });\n            });\n        }\n    });\n}\n\n/**\n * @this DataQueryable\n * @param {*} result\n * @param {Function} callback\n * @private\n */\nfunction afterExecute_(result, callback) {\n    /**\n     * @type {DataQueryable|*}\n     */\n    const self = this;\n    let field;\n    if (self.$expand) {\n        //get distinct values\n        const expands = _.uniqBy(self.$expand, function(x) {\n            return x;\n        });\n        async.eachSeries(expands, function(expand, cb) {\n            let mapping, options = {};\n            try {\n                /**\n                 * get mapping\n                 * @type {DataAssociationMapping|*}\n                 */\n                if (expand instanceof DataAssociationMapping) {\n                    mapping = expand;\n                    if (typeof expand.select !== 'undefined' && expand.select !== null) {\n                        if (typeof expand.select === 'string')\n                            options[\"$select\"] = expand.select;\n                        else if (_.isArray(expand.select))\n                            options[\"$select\"] = expand.select.join(\",\");\n                    }\n                    //get expand options\n                    if (typeof expand.options !== 'undefined' && expand.options !== null) {\n                        _.assign(options, expand.options);\n                    }\n                }\n                else {\n                    //get mapping from expand attribute\n                    let expandAttr;\n                    if (typeof expand === 'string') {\n                        //get expand attribute as string\n                        expandAttr = expand;\n                    }\n                    else if ((typeof expand === 'object') && expand.hasOwnProperty('name')) {\n                        //get expand attribute from Object.name property\n                        expandAttr = expand.name;\n                        //get expand options\n                        if (typeof expand.options !== 'undefined' && expand.options !== null) {\n                            options = expand.options;\n                        }\n                    }\n                    else {\n                        //invalid expand parameter\n                        return callback(new Error(\"Invalid expand option. Expected string or a named object.\"));\n                    }\n                    field = self.model.field(expandAttr);\n                    if (typeof field === 'undefined')\n                        field = self.model.attributes.find(function(x) { return x.type===expandAttr });\n                    if (field) {\n                        mapping = self.model.inferMapping(field.name);\n                        if (expands.find(function(x) {\n                            return (x.parentField === mapping.parentField) &&\n                                    (x.parentModel === mapping.parentModel) &&\n                                    (x.childField === mapping.childField) &&\n                                    (x.childModel === mapping.childModel)\n                        })) {\n                            return cb();\n                        }\n                        if (mapping) {\n                            mapping.refersTo = mapping.refersTo || field.name;\n                            if (_.isObject(mapping.options)) {\n                                _.assign(options, mapping.options);\n                            }\n                            else if (_.isArray(mapping.select) && mapping.select.length>0) {\n                                options['$select'] = mapping.select.join(\",\");\n                            }\n                        }\n                    }\n                }\n                if (options instanceof DataQueryable) {\n                    // do nothing\n                }\n                else {\n                    //set default $top option to -1 (backward compatibility issue)\n                    if (!options.hasOwnProperty(\"$top\")) {\n                        options[\"$top\"] = -1;\n                    }\n                    //set default $levels option to 1 (backward compatibility issue)\n                    if (!options.hasOwnProperty(\"$levels\")) {\n                        if (typeof self.$levels === 'number') {\n                            options[\"$levels\"] = self.getLevels() - 1;\n                        }\n                    }\n                }\n            }\n            catch(e) {\n                return cb(e);\n            }\n\n            if (mapping) {\n                const MappingExtensions = require('./mapping-extensions').MappingExtensions;\n                //clone mapping\n                const thisMapping = _.assign({}, mapping);\n                thisMapping.options = options;\n                if (mapping.associationType==='association' || mapping.associationType==='junction') {\n                    if ((mapping.parentModel===self.model.name) && (mapping.associationType==='association')) {\n                        return MappingExtensions.extend(thisMapping).for(self).getAssociatedChilds_v1(result)\n                            .then(function() {\n                                return cb();\n                            }).catch(function(err) {\n                                return cb(err);\n                            });\n                    }\n                    else if (mapping.childModel===self.model.name && mapping.associationType==='junction') {\n                        return MappingExtensions.extend(thisMapping).for(self).getParents_v1(result)\n                            .then(function() {\n                                return cb();\n                            }).catch(function(err) {\n                                return cb(err);\n                            });\n                    }\n                    else if (mapping.parentModel===self.model.name && mapping.associationType==='junction') {\n                        return MappingExtensions.extend(thisMapping).for(self).getChilds_v1(result)\n                            .then(function() {\n                                return cb();\n                            }).catch(function(err) {\n                                return cb(err);\n                            });\n                    }\n                    else if ((mapping.childModel===self.model.name) && (mapping.associationType==='association')) {\n                        return MappingExtensions.extend(thisMapping).for(self).getAssociatedParents_v1(result)\n                            .then(function() {\n                                return cb();\n                            }).catch(function(err) {\n                                return cb(err);\n                            });\n                    }\n                }\n                else {\n                    return cb(new Error(\"Not yet implemented\"));\n                }\n            }\n            else {\n                TraceUtils.log(sprintf.sprintf('Data association mapping (%s) for %s cannot be found or the association between these two models defined more than once.', expand, self.model.title));\n                return cb(null);\n            }\n        }, function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                toArrayCallback.call(self, result, callback);\n            }\n        });\n    }\n    else {\n        toArrayCallback.call(self, result, callback);\n    }\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {Array|*} result\n * @param {Function} callback\n */\nfunction toArrayCallback(result, callback) {\n    const self = this;\n    if (self.$asArray) {\n        if (typeof self.query === 'undefined') {\n            return callback(null, result);\n        }\n        const fields = self.query.fields();\n        if (!_.isArray(fields)) {\n            return callback(null, result);\n        }\n        if (fields.length===1) {\n            const arr = [];\n            _.forEach(result, function(x) {\n                if (_.isNil(x))\n                    return;\n                const key = Object.keys(x)[0];\n                if (x[key])\n                    arr.push(x[key]);\n            });\n            return callback(null, arr);\n        }\n        else {\n            return callback(null, result);\n        }\n    }\n    else {\n        return callback(null, result);\n    }\n}\n\n/**\n * @this DataQueryable\n * @private\n * @param {Function} callback\n */\nfunction valueInternal(callback) {\n    if (_.isNil(this.query.$select)) {\n        this.select(this.model.primaryKey);\n    }\n    firstInternal.call(this, function(err, result) {\n        if (err) { return callback(err); }\n        if (_.isNil(result)) { return callback(); }\n        const key = Object.keys(result)[0];\n        if (typeof key === 'undefined') { return callback(); }\n        callback(null, result[key]);\n    });\n}\n"]}