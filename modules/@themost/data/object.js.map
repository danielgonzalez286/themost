{"version":3,"sources":["object.es6"],"names":["_","sprintf","SequentialEventEmitter","DataError","HasManyToOneAssociation","HasOneToManyAssociation","HasManyToManyAssociation","HasTagAssociation","STR_MISSING_CALLBACK_ARGUMENT","STR_MISSING_ARGUMENT_CODE","typeProperty","Symbol","modelProperty","contextProperty","selectorsProperty","DataObject","type","obj","test","constructor","name","replace","selector","callback","Error","self","model","getModel","inferState","err","state","assign","isNil","getPrimaryKey","selectorFunc","substr","Q","require","deferred","defer","call","result","reject","resolve","promise","getType","getContext","field","er","code","mapping","inferMapping","value","hasOwnProperty","primaryKey","where","equal","select","associationType","parentModel","childModel","attrOf_","first","constraints","length","arr","filter","x","valid","fields","i","constraint","q","attr","and","property","context","fn","save_","remove_","process","nextTick","attributes","find","attrName","additionalType","e","getAdditionalModel","then","additionalModel","$silent","silent","getId","subscribe","convert","catch","parentField","childField","flatten","beforeListeners","listeners","beforeListener","once","afterListeners","afterListener","save","j","remove"],"mappings":"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","file":"object.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport sprintf from 'sprintf';\nimport {SequentialEventEmitter} from \"@themost/common/emitter\";\nimport {DataError} from \"@themost/common/errors\";\nimport {HasManyToOneAssociation, HasOneToManyAssociation, HasManyToManyAssociation, HasTagAssociation} from './associations';\n\n/**\n * @ignore\n */\nconst STR_MISSING_CALLBACK_ARGUMENT = 'Missing argument. Callback function expected.',\n    STR_MISSING_ARGUMENT_CODE = 'EARGM';\n\nconst typeProperty = Symbol('type');\nconst modelProperty = Symbol('model');\nconst contextProperty = Symbol('context');\nconst selectorsProperty = Symbol('selectors');\n\n/**\n * @class\n * @classdesc Represents a data object associated with a data model.\n * DataObject class may be inherited by other classes that are defined as DataObjectClass of a data model.\n * @augments SequentialEventEmitter\n * @property {DataContext}  context - An instance of DataContext class associated with this object.\n * @property {*} selectors - An object that represents a collection of selectors associated with this data object e.g is(':new'), is(':valid'), is(':enabled') etc\n */\nexport class DataObject extends SequentialEventEmitter {\n    /**\n     *\n     * @param {string=} type\n     * @param {*=} obj\n     */\n    constructor(type, obj) {\n        super();\n        //initialize object type\n        if (type)\n            this[typeProperty] = type;\n        else {\n            //get type from constructor name\n            if (/Model$/.test(this.constructor.name)) {\n                this[typeProperty] = this.constructor.name.replace(/Model$/,'');\n            }\n            else {\n                if (this.constructor.name!=='DataObject')\n                    this[typeProperty] = this.constructor.name;\n            }\n        }\n        this[selectorsProperty] = { };\n\n        this.selector('new', function(callback) {\n            if (typeof callback !== 'function') { return new Error(STR_MISSING_CALLBACK_ARGUMENT, STR_MISSING_ARGUMENT_CODE); }\n            const self = this, model = self.getModel();\n            model.inferState(self, function(err, state) {\n                if (err) { return callback(err); }\n                callback(null, (state==1));\n            });\n        }).selector('live', function(callback) {\n            if (typeof callback !== 'function') { return new Error(STR_MISSING_CALLBACK_ARGUMENT, STR_MISSING_ARGUMENT_CODE); }\n            const self = this, model = self.getModel();\n            model.inferState(self, function(err, state) {\n                if (err) { return callback(err); }\n                callback(null, (state==2));\n            });\n        });\n\n        if (typeof obj !== 'undefined' && obj != null) {\n            _.assign(this, obj);\n        }\n\n    }\n\n    /**\n     * Gets the identifier of this DataObject instance.\n     * @returns {*}\n     */\n    getId() {\n        const model = this.getModel();\n        if (_.isNil(model)) {\n            return this['id'];\n        }\n        return this[model.getPrimaryKey()];\n    }\n\n    /**\n     * @returns {DataContext|*}\n     */\n    get context() {\n        return this[contextProperty]; \n    }\n\n    /**\n     * \n     * @param {DataContext|*} value\n     */\n    set context(value) {\n        this[contextProperty] = value;\n    }\n    \n    /**\n     * Gets the current context\n     * @returns {DataContext|*}\n     */\n    getContext() {\n        return this[contextProperty];\n    }\n\n    /**\n     * Gets the object type, typically the name of the parent model\n     * @returns {*}\n     */\n    getType() {\n        return this[typeProperty];\n    }\n\n    /**\n     * Registers a selector for the current data object\n     * @param {string} name\n     * @param {function=} selector\n     * @example\n     //retrieve a user, register a selector for enabled and check if user is enabled or not\n     var users = context.model('User');\n     users.where('name').equal('admin@example.com')\n     .first().then(function(result) {\n            var user = users.convert(result);\n            //register a selector to check whether a user is enabled or not\n            user.selector('enabled', function(callback) {\n                this.getModel().where('id').equal(this.id).select('enabled').value(callback);\n            });\n            user.is(\":enabled\").then(function(result) {\n                if (result) {\n                    console.log('User is enabled');\n                }\n                done();\n            }).catch(function(err) {\n                done(null, err);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    selector(name, selector) {\n        if (typeof name !== 'string') {\n            return new Error('Invalid argument. String expected.', 'EARG');\n        }\n        if (typeof selector === 'undefined') {\n            return this[selectorsProperty][name];\n        }\n        //get arguments\n        this[selectorsProperty][name] = selector;\n        return this;\n    }\n\n    /**\n     * Executes a selector and returns the result. DataObject class has default selectors for common operations.\n     * The \":new\" selector checks whether current data object is new or not. The \":live\" selector checks whether current data object already exists or not.\n     * @param {string} selector - A string that represents an already registered selector\n     * @returns {Promise<T>|*}\n     * @example\n     //retrieve a user, and execute :live selector\n     var users = context.model('User');\n     users.where('name').equal('admin@example.com')\n     .first().then(function(result) {\n            var user = users.convert(result);\n            user.is(\":live\").then(function(result) {\n                if (result) {\n                    console.log('User already exists');\n                }\n                done();\n            }).catch(function(err) {\n                done(null, err);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    is(selector) {\n        if (!/^:\\w+$/.test(selector)) {\n            throw new Error('Invalid selector. A valid selector should always start with : e.g. :new or :live.');\n        }\n        /**\n         * @type {Function}\n         */\n        const selectorFunc = this[selectorsProperty][selector.substr(1)];\n        if (typeof selectorFunc !== 'function') {\n            throw new Error('The specified selector is no associated with this object.','EUNDEF');\n        }\n        const Q = require('q'), deferred = Q.defer();\n        selectorFunc.call(this, function(err, result) {\n            if (err) { return deferred.reject(err); }\n            deferred.resolve(result);\n        });\n        return deferred.promise;\n    }\n\n\n    /**\n     * Gets the associated data model\n     * @returns {DataModel|undefined}\n     */\n    getModel() {\n        if (_.isNil(this.getType()))\n            return;\n        if (this[modelProperty]) { return this[modelProperty]; }\n        if (this.getContext()) {\n            this[modelProperty] = this.getContext().model(this.getType());\n        }\n        return this[modelProperty];\n    }\n\n    /**\n     * @param name\n     * @returns {DataObject}\n     * @deprecated\n     * @ignore\n     */\n    removeProperty(name) {\n        const model = this.getModel(), field = model.field(name);\n        if (_.isNil(field)) {\n            const er = new Error('The specified field cannot be found.'); er.code = 'EDATA';\n            throw er;\n        }\n        //safe delete property\n        delete this[name];\n        return this;\n    }\n\n    /**\n     * @param {String} name The relation name\n     * @returns {DataQueryable|HasAssociation|{value:Function}}\n     */\n    property(name) {\n        if (typeof name !== 'string')\n            return null;\n        const self = this;\n        let er;\n        //validate relation based on the given name\n        const model = self.getModel(), field = model.field(name);\n        if (_.isNil(field)) {\n            er = new Error('The specified field cannot be found.'); er.code = 'EDATA';\n            throw er;\n        }\n        const mapping = model.inferMapping(field.name);\n        if (_.isNil(mapping)) {\n            //return queryable field value\n            return {\n                value:function(callback) {\n                    //if object has already an attribute with this name\n                    if (self.hasOwnProperty(name)) {\n                        //return attribute\n                        return callback(null, self[name]);\n                    }\n                    else {\n                        //otherwise get attribute value\n                        if (self.hasOwnProperty(model.primaryKey)) {\n                            model.where(model.primaryKey).equal(self[model.primaryKey]).select(name).value(function(err, value) {\n                                if (err) { return callback(err); }\n                                callback(null, value);\n                            });\n                        }\n                        else {\n                            model.inferState(self, function(err, state) {\n                                if (err) { return callback(err); }\n                                if (state==2) {\n                                    model.where(model.primaryKey).equal(self[model.primaryKey]).select(name).value(function(err, value) {\n                                        if (err) { return callback(err); }\n                                        callback(null, value);\n                                    });\n                                }\n                                else {\n                                    er = new Error('Object identity cannot be found due to missing primary key or unique constraint filter.'); er.code = 'EDATA';\n                                    callback(er);\n                                }\n                            });\n                        }\n                    }\n                }\n            };\n        }\n        //validate field association\n        if (mapping.associationType=='association') {\n            if (mapping.parentModel==model.name)\n                return new HasOneToManyAssociation(self, mapping);\n            else\n                return new HasManyToOneAssociation(self, mapping);\n        }\n        else if (mapping.associationType=='junction') {\n            if (mapping.parentModel===model.name) {\n                if (typeof mapping.childModel === 'undefined') {\n                    return new HasTagAssociation(self, mapping);\n                }\n                else {\n                    return new HasManyToManyAssociation(self, mapping);\n                }\n            }\n            else {\n                return new HasManyToManyAssociation(self, mapping);\n            }\n        }\n        else {\n            er = new Error('The association which is specified for the given field is not implemented.'); er.code = 'EDATA';\n            throw er;\n        }\n    }\n\n    /**\n     * Gets the value of the specified attribute.\n     * If the object has already a property with the specified name and the property does not have\n     * an association mapping then returns the property value.\n     * Otherwise if attribute has an association mapping (it defines an association with another model) then\n     * returns the foreign key value\n     *\n     * @param {string} name - The name of the attribute to retrieve\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n     * @returns {Promise<T>|*} If callback is missing then returns a promise.\n     */\n    attrOf(name, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            attrOf_.call(self,  name, function(err, result) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(result);\n            });\n            return deferred.promise;\n        }\n        else {\n            return attrOf_.call(self, name, callback);\n        }\n    }\n\n    /**\n     * @param {String} name\n     * @param {Function} callback\n     */\n    attr(name, callback) {\n        if (this.hasOwnProperty(name)) {\n            callback(null, this[name]);\n        }\n        else {\n            const self = this, model = self.getModel(), field = model.field(name);\n            if (field) {\n                const mapping = model.inferMapping(field.name);\n                if (_.isNil(mapping)) {\n                    if (self[model.primaryKey]) {\n                        model.where(model.primaryKey).equal(self[model.primaryKey]).select(name).first(function(err, result) {\n                            if (err) { callback(err); return; }\n                            let value = null;\n                            if (result) {\n                                value = result[name];\n                            }\n                            self[name]=value;\n                            callback(null, value);\n                        });\n                    }\n                    else {\n                        if (model.constraints.length==0) {\n                            callback(new Error(sprintf.sprintf('The value of property [%s] cannot be retrieved. The target data model has no constraints defined.', name)));\n                        }\n                        else {\n                            const arr = _.filter(model.constraints, function(x) {\n                                let valid = true;\n                                if (x.fields.length==0)\n                                    return false;\n                                for (let i = 0; i < x.fields.length; i++) {\n                                    const field = x.fields[i];\n                                    if (self.hasOwnProperty(field)==false) {\n                                        valid = false;\n                                        break;\n                                    }\n                                }\n                                return valid;\n                            });\n                            if (arr.length==0) {\n                                callback(new Error( sprintf.sprintf('The value of property [%s] cannot be retrieved. The target data model has constraints but the required properties are missing.', name)));\n                            }\n                            else {\n                                //get first constraint\n                                const constraint = arr[0];\n\n                                let q = null;\n                                for (let i = 0; i < constraint.fields.length; i++) {\n                                    const attr = constraint.fields[i];\n                                    const value = self[attr];\n                                    if (q==null)\n                                        q = model.where(attr).equal(value);\n                                    else\n                                        q.and(attr).equal(value);\n                                }\n                                q.select(name).first(function(err, result) {\n                                    if (err) { callback(err); return; }\n                                    let value = null;\n                                    if (result) {\n                                        value = result[name];\n                                    }\n                                    self[name]=value;\n                                    callback(null, value);\n                                });\n                            }\n                        }\n                    }\n                }\n                else {\n                    callback(null, self.property(name));\n                }\n            }\n            else {\n                callback(new Error('The specified field cannot be found.'));\n            }\n\n        }\n    }\n\n    /**\n     *\n     * @param {DataContext} context The current data context\n     * @param {Function} fn - A function that represents the code to be invoked\n     * @ignore\n     */\n    execute(context, fn) {\n        const self = this;\n        self.context = context;\n        fn = fn || function() {};\n        fn.call(self);\n    }\n\n    /**\n     * Gets a DataQueryable object that is going to be used in order to get related items.\n     * @param attr {string} A string that contains the relation attribute\n     * @returns {DataQueryable}\n     */\n    query(attr) {\n        const mapping = this.getModel().inferMapping(attr);\n        if (_.isNil(mapping)) { new DataError('EASSOCIATION','The given attribute does not define an association of any type.'); }\n        return this.property(attr)\n    }\n\n    /**\n     * Saves the current data object.\n     * @param {DataContext=}  context - The current data context.\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @returns {Promise<T>|*} - If callback parameter is missing then returns a Promise object.\n     * @example\n     //retrieve an order and change paymentDue date\n     var orders = context.model('Order');\n     orders.where('id').equal(46)\n     .first().then(function(result) {\n            var order = orders.convert(result);\n            order.paymentDue = moment().add(7, 'days').toDate();\n            order.save().then(function() {\n                done(null, order);\n            }).catch(function(err) {\n                done(err);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    save(context, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            save_.call(self, context || self.context, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve(null);\n            });\n            return deferred.promise;\n        }\n        else {\n            return save_.call(self, context || self.context, callback);\n        }\n    }\n\n    /**\n     * Deletes the current data object.\n     * @param {DataContext=} context - The current data context.\n     * @param {Function=} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @returns {Promise<T>|*} - If callback parameter is missing then returns a Promise object.\n     * @example\n     //retrieve a order, and remove it\n     var orders = context.model('Order');\n     orders.where('id').equal(4)\n     .first().then(function(result) {\n            var order = orders.convert(result);\n            order.remove().then(function() {\n                done();\n            }).catch(function(err) {\n                done(err);\n            });\n        }).catch(function(err) {\n            done(err);\n        });\n     */\n    remove(context, callback) {\n        const self = this;\n        if (typeof callback !== 'function') {\n            const Q = require('q'), deferred = Q.defer();\n            remove_.call(self, context || self.context, function(err) {\n                if (err) { return deferred.reject(err); }\n                deferred.resolve();\n            });\n            return deferred.promise;\n        }\n        else {\n            return remove_.call(self, context || self.context, callback);\n        }\n    }\n\n    /*\n     * Gets an instance of a DataModel class which represents the additional model that has been set in additionalType attribute of this data object.\n     * @returns {Promise<DataModel>}\n     */\n    getAdditionalModel() {\n        const self = this;\n        const Q = require('q'), deferred = Q.defer();\n        process.nextTick(function() {\n            try {\n                const model = self.getModel();\n                const attr = self.getModel().attributes.find(function(x) { return x.name === \"additionalType\"; });\n                if (typeof attr === 'undefined') {\n                    return deferred.resolve();\n                }\n                const attrName = attr.property || attr.name;\n                self.attr(attrName, function(err, additionalType) {\n                    try {\n                        if (err) {\n                            return deferred.reject(err);\n                        }\n                        //if additional type is undefined\n                        if (_.isNil(additionalType)) {\n                            //return nothing\n                            return deferred.resolve();\n                        }\n                        //if additional type is equal to current model\n                        if (additionalType === model.name) {\n                            //return nothing\n                            return deferred.resolve(model);\n                        }\n                        return deferred.resolve(self.context.model(additionalType));\n                    }\n                    catch(e) {\n                        return deferred.reject(e);\n                    }\n                });\n            }\n            catch(e) {\n                return deferred.reject(e);\n            }\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * Gets an instance of data object which represents the additional typed object as this is defined in additionalType attribute.\n     * @returns {Promise<DataObject>}\n     * @example\n     //get a place and afterwards get the country associated with it\n     var places = context.model(\"Place\");\n     places.silent().where(\"name\").equal(\"France\").first().then(function(result) {\n        if (result) {\n            var place = places.convert(result);\n            return place.getAdditionalObject().then(function(result) {\n                //place your code here\n                return done();\n            });\n        }\n        return done();\n    }).catch(function (err) {\n        return done(err);\n    });\n     */\n    getAdditionalObject() {\n        const self = this;\n        const Q = require('q'), deferred = Q.defer();\n        process.nextTick(function() {\n            try {\n                self.getAdditionalModel().then(function(additionalModel) {\n                    try {\n                        if (_.isNil(additionalModel)) {\n                            return deferred.resolve();\n                        }\n                        //if additional type is equal to current model\n                        if (additionalModel.name === self.getModel().name) {\n                            //return nothing\n                            return deferred.resolve();\n                        }\n                        if (self.getModel().$silent) { additionalModel.silent(); }\n                        additionalModel.where(self.getModel().getPrimaryKey()).equal(self.getId()).first().subscribe((result) => {\n                            if (result) {\n                                return deferred.resolve(additionalModel.convert(result));\n                            }\n                            return deferred.resolve();\n                        }, (err)=> {\n                            return deferred.reject(err);\n                        });\n                    }\n                    catch(e) {\n                        return deferred.reject(e);\n                    }\n                }).catch(function(err) {\n                    return deferred.reject(err);\n                });\n            }\n            catch (e) {\n                return deferred.reject(e);\n            }\n\n        });\n        return deferred.promise;\n    }\n\n    /**\n     * Sets a boolean which indicates whether the next data operation will be executed in silent mode.\n     * @param {boolean=} value\n     * @returns DataObject\n     * @example\n     context.model(\"Person\").where(\"email\").equal(\"alexis.rees@example.com\").getTypedItem()\n            .then(function(person) {\n                //...\n                return person.silent().save().then(function() {\n                    return done();\n                });\n            }).catch(function(err) {\n                return done(err);\n            });\n     */\n    silent(value) {\n        this.getModel().silent(value);\n        return this;\n    }\n}\n\n/**\n * @memberOf DataObject\n * @function\n * @param {string} name - The name of the attribute\n * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise. The second argument will contain the result.\n * @private\n */\nfunction attrOf_(name, callback) {\n    const self = this, model = this.getModel(), mapping = model.inferMapping(name);\n    if (_.isNil(mapping)) {\n        if (self.hasOwnProperty(name)) {\n            return callback(null, self[name]);\n        }\n        else {\n         return model.where(model.primaryKey).equal(self[model.primaryKey]).select(name).value(function(err, result) {\n                if (err) { return callback(err); }\n                self[name] = result;\n                return callback(null, result);\n            });\n        }\n    }\n    //if mapping association defines foreign key association\n    if (mapping.associationType==='association' && mapping.childModel === model.name) {\n        //if object has already this property\n        if (self.hasOwnProperty(name)) {\n            //if property is an object\n            if (typeof self[name] === 'object' && self[name] != null) {\n                //return the defined parent field\n                callback(null, self[name][mapping.parentField]);\n            }\n            else if (self[name] == null) {\n                callback();\n            }\n            else {\n                callback(null, self[name]);\n            }\n        }\n        else {\n            //otherwise get value from db\n            model.where(model.primaryKey).equal(this[model.primaryKey]).select(mapping.childField).flatten().value(function(err, result) {\n                if (err) { return callback(err); }\n                self[name] = result;\n                return callback(null, result);\n            });\n        }\n    }\n    else {\n        return callback();\n    }\n\n}\n\n/**\n * @memberOf DataObject\n * @function\n * @param {DataContext} context - The underlying data context\n * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n * @private\n */\nfunction save_(context, callback) {\n    const self = this;\n    //get current application\n    const model = self.getModel();\n    if (_.isNil(model)) {\n        return callback.call(self, new DataError('EMODEL','Data model cannot be found.'));\n    }\n    let i;\n    //register before listeners\n    const beforeListeners = self.listeners('before.save');\n    for (i = 0; i < beforeListeners.length; i++) {\n        const beforeListener = beforeListeners[i];\n        model.once('before.save', beforeListener);\n    }\n    //register after listeners\n    const afterListeners = self.listeners('after.save');\n    for (i = 0; i < afterListeners.length; i++) {\n        const afterListener = afterListeners[i];\n        model.once('after.save', afterListener);\n    }\n    model.save(self, callback);\n}\n\n/**\n * @memberOf DataObject\n * @function\n * @param {DataContext} context\n * @param {Function} callback\n * @private\n */\nfunction remove_(context, callback) {\n    const self = this;\n    //get current application\n    const model = self.getModel();\n    if (_.isNil(model)) {\n        return callback.call(self, new DataError('EMODEL','Data model cannot be found.'));\n    }\n    //register before listeners\n    const beforeListeners = self.listeners('before.remove');\n    for (let i = 0; i < beforeListeners.length; i++) {\n        const beforeListener = beforeListeners[i];\n        model.once('before.remove', beforeListener);\n    }\n    //register after listeners\n    const afterListeners = self.listeners('after.remove');\n    for (let j = 0; j < afterListeners.length; j++) {\n        const afterListener = afterListeners[j];\n        model.once('after.remove', afterListener);\n    }\n    model.remove(self, callback);\n}\n"]}