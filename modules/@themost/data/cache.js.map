{"version":3,"sources":["cache.es6"],"names":["SequentialEventEmitter","_","Args","Q","rawCacheProperty","Symbol","DataCache","initialized","callback","cacheModule","NodeCache","require","err","key","self","nfbind","init","set","denodeify","flushAll","value","absoluteExpiration","fn","check","isFunction","get","then","res","isNil","source","add","result","current","cacheService","NoDataCache","isObject","window","global","application","getService","getCurrent"],"mappings":"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","file":"cache.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport {SequentialEventEmitter} from '@themost/common/emitter';\nimport _ from 'lodash';\nimport {Args} from \"@themost/common/utils\";\nimport Q from 'q';\n\nconst rawCacheProperty = Symbol('rawCache');\n\n/**\n * @class\n * @classdesc Implements data cache mechanisms in MOST Data Applications.\n * DataCache class is used as the internal data caching engine, if any other caching mechanism is not defined.\n * @property {Number} ttl - An amount of time in seconds which is the default cached item lifetime.\n * @constructor\n * @augments EventEmitter2\n */\nexport class DataCache extends SequentialEventEmitter {\n\n    constructor() {\n        super();\n        this.initialized = false;\n    }\n\n    /**\n     * Initializes data caching.\n     * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     * @private\n     */\n    init(callback) {\n        try {\n            if (this.initialized) {\n                return callback();\n            }\n            const cacheModule = \"node-cache\";\n            const NodeCache = require(cacheModule);\n            this[rawCacheProperty] = new NodeCache();\n            this.initialized = true;\n            return callback();\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n\n    /**\n     * Removes a cached value.\n     * @param {string} key - A string that represents the key of the cached value to be removed\n     * @returns {Promise}\n     */\n    remove(key) {\n        const self = this;\n        return Q.nfbind((callback) => {\n            self.init((err) => {\n                if (err) {\n                    return callback(err);\n                }\n                self[rawCacheProperty].set(key, callback);\n            });\n        })();\n    }\n\n    /**\n     * Flush all cached data.\n     * @returns {Promise}\n     */\n    clear() {\n        const self = this;\n        return Q.denodeify((callback) => {\n            self.init((err) => {\n                if (err) {\n                    return callback(err);\n                }\n                self[rawCacheProperty].flushAll();\n                return callback();\n            });\n        })();\n    }\n\n    /**\n     * Sets a key value pair in cache.\n     * @param {string} key - A string that represents the key of the cached value\n     * @param {*} value - The value to be cached\n     * @param {number=} absoluteExpiration - An absolute expiration time in seconds. This parameter is optional.\n     * @returns {Promise}\n     */\n    add(key, value, absoluteExpiration) {\n        const self = this;\n        return Q.denodeify((callback) => {\n            self.init(function(err) {\n                if (err) {\n                    return callback(err);\n                }\n                self[rawCacheProperty].set(key, value, absoluteExpiration, callback);\n            });\n        })();\n    }\n\n    /**\n     * Gets data from cache or executes the defined function and adds the result to the cache with the specified key\n     * @param {string|*} key - A string which represents the key of the cached data\n     * @param {Function} fn - A function to execute if data will not be found in cache\n     * @param {number=} absoluteExpiration - An absolute expiration time in seconds. This parameter is optional.\n     * @returns {Promise}\n     */\n    getOrDefault(key, fn, absoluteExpiration) {\n        const self = this;\n        Args.check(_.isFunction(fn),'Invalid argument. Expected function.');\n        return self.get(key).then((res) => {\n            if (_.isNil(res)) {\n                let source = fn();\n                Args.check(_.isFunction(source.then), 'Invalid argument. Expected a valid promise.');\n                return source.then((res) => {\n                    if (_.isNil(res)) {\n                        return Q();\n                    }\n                    return self.add(key,res,absoluteExpiration).then(() => {\n                        return Q(res);\n                    });\n                });\n            }\n            return Q(res);\n        });\n    }\n\n    /**\n     * Gets a cached value defined by the given key.\n     * @param {string|*} key\n     * @returns {Observable}\n     */\n    get(key) {\n        const self = this;\n        return Q.nfbind(function(key,callback) {\n            self.init((err) => {\n                if (err) {\n                    return callback(err);\n                }\n                return self[rawCacheProperty].get(key, function(err, result) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    if (typeof result[key] !== 'undefined') {\n                        return callback(null, result[key]);\n                    }\n                    return callback();\n                });\n            });\n        })(key);\n    }\n\n    /**\n     * Returns the current cache service.\n     * @returns {*|DataCache}\n     */\n    static getCurrent() {\n        return DataCache.current;\n    }\n\n    /**\n     * Sets the current cache service\n     * @param {*|DataCache} cacheService\n     */\n    static setCurrent(cacheService) {\n        DataCache.current = cacheService;\n    }\n\n}\n\nexport class NoDataCache {\n    constructor() {\n        //\n    }\n\n    /**\n     * Gets a cached value defined by the given key.\n     * @param {string|*} key\n     * @returns {Promise}\n     */\n    get(key) {\n        return Q();\n    }\n\n    /**\n     * Removes a cached value.\n     * @param {string} key - A string that represents the key of the cached value to be removed\n     * @returns {Promise}\n     */\n    remove(key) {\n        return Q();\n    }\n\n\n\n    /**\n     * Sets a key value pair in cache.\n     * @param {string} key - A string that represents the key of the cached value\n     * @param {*} value - The value to be cached\n     * @param {number=} absoluteExpiration - An absolute expiration time in seconds. This parameter is optional.\n     * @returns {Promise}\n     */\n    add(key, value, absoluteExpiration) {\n        return Q();\n    }\n\n    /**\n     * Flush all cached data.\n     * @returns {Promise}\n     */\n    clear() {\n        return Q();\n    }\n\n    /**\n     * Gets data from cache or executes the defined function and adds the result to the cache with the specified key\n     * @param {string|*} key - A string which represents the key of the cached data\n     * @param {Function} fn - A function to execute if data will not be found in cache\n     * @param {number=} absoluteExpiration - An absolute expiration time in seconds. This parameter is optional.\n     * @returns {Promise}\n     */\n    getOrDefault(key, fn, absoluteExpiration) {\n        Args.check(_.isFunction(fn),'Invalid argument. Expected function.');\n        let source = fn();\n        Args.check(_.isObject(source) && _.isFunction(source.then), 'Invalid argument. Expected a valid observable.');\n        return source.then((res) => {\n            if (_.isNil(res)) {\n                return Q();\n            }\n            return Q(res);\n        });\n    }\n\n\n}\n//set no data cache (by default)\nDataCache.current = new NoDataCache();\n//enable caching in node.js mode (this is the default behaviour)\nif (typeof window === 'undefined') {\n    DataCache.current = new DataCache();\n}\n//validates application instance\nif (global && global['application']) {\n    //get application\n    const application = global['application'];\n    //if application.getService method exists\n    if (_.isFunction(application.getService)) {\n        //override getCurrent() static method\n        DataCache.getCurrent = () => {\n            //and return application cache factory\n            return application.getService('$CacheFactory');\n        }\n    }\n}\n\n"]}