{"version":3,"sources":["view.es6"],"names":["_","DataField","modelProperty","Symbol","DataModelView","model","public","sealed","fields","obj","self","res","localFields","filter","y","isNil","field","name","isArray","arr","forEach","x","push","attrs","assign"],"mappings":";;;;;;;qjBAAA;;;;;;;;;;;AASA;;AACA;;IAAOA,C;;AACP;;IAAQC,S,UAAAA,S;;;;;;AAER,IAAMC,gBAAgBC,OAAO,OAAP,CAAtB;;AAEA;;;;;;;;;;;;;;IAaaC,a,WAAAA,a;AACT;;;;AAIA,2BAAYC,KAAZ,EAAmB;AAAA;;AAEf,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKN,aAAL,IAAsBG,KAAtB;AACH;;AAED;;;;;;;;;AA6BA;;;;;6BAKKI,G,EAAK;AACN,gBAAMC,OAAO,IAAb;AACA,gBAAIC,YAAJ;AACA,gBAAMC,cAAcZ,EAAEa,MAAF,CAASH,KAAKF,MAAd,EAAsB,UAASM,CAAT,EAAY;AAClD,uBAAO,CAACd,EAAEe,KAAF,CAAQL,KAAKL,KAAL,CAAWW,KAAX,CAAiBF,EAAEG,IAAnB,CAAR,CAAR;AACH,aAFmB,CAApB;AAGA,gBAAIjB,EAAEkB,OAAF,CAAUT,GAAV,CAAJ,EAAoB;AAChB,oBAAMU,MAAM,EAAZ;AACAnB,kBAAEoB,OAAF,CAAUX,GAAV,EAAe,UAASY,CAAT,EAAY;AACvBV,0BAAM,EAAN;AACAX,sBAAEoB,OAAF,CAAUR,WAAV,EAAuB,UAASE,CAAT,EAAY;AAC/B,4BAAI,OAAOO,EAAEP,EAAEG,IAAJ,CAAP,KAAqB,WAAzB,EACIN,IAAIG,EAAEG,IAAN,IAAcI,EAAEP,EAAEG,IAAJ,CAAd;AACP,qBAHD;AAIAE,wBAAIG,IAAJ,CAASX,GAAT;AACH,iBAPD;AAQA,uBAAOQ,GAAP;AACH,aAXD,MAYK;AACDR,sBAAM,EAAN;AACAX,kBAAEoB,OAAF,CAAUR,WAAV,EAAuB,UAASE,CAAT,EAAY;AAC/B,wBAAI,OAAOL,IAAIK,EAAEG,IAAN,CAAP,KAAuB,WAA3B,EACIN,IAAIG,EAAEG,IAAN,IAAcR,IAAIK,EAAEG,IAAN,CAAd;AACP,iBAHD;AAIA,uBAAON,GAAP;AACH;AACJ;;;4BAzDW;AACR,mBAAO,KAAKT,aAAL,CAAP;AACH;;AAED;;;;;;4BAGiB;AACb,gBAAMQ,OAAO,IAAb;AACA,gBAAMa,QAAQ,EAAd;AACAvB,cAAEoB,OAAF,CAAU,KAAKZ,MAAf,EAAuB,UAASa,CAAT,EAAY;AAC/B,oBAAIX,KAAKL,KAAT,EAAgB;AACZ,wBAAMW,QAAQhB,EAAEwB,MAAF,CAAS,IAAIvB,SAAJ,EAAT,EAA0BS,KAAKL,KAAL,CAAWW,KAAX,CAAiBK,EAAEJ,IAAnB,CAA1B,CAAd;AACA,wBAAID,KAAJ,EACIO,MAAMD,IAAN,CAAWtB,EAAEwB,MAAF,CAASR,KAAT,EAAgBK,CAAhB,CAAX,EADJ,KAGIE,MAAMD,IAAN,CAAWtB,EAAEwB,MAAF,CAAS,EAAT,EAAaH,CAAb,CAAX;AACP,iBAND,MAQIE,MAAMD,IAAN,CAAWtB,EAAEwB,MAAF,CAAS,EAAT,EAAaH,CAAb,CAAX;AACP,aAVD;AAWA,mBAAOE,KAAP;AACH","file":"view.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport _ from 'lodash';\nimport {DataField} from './types';\n\nconst modelProperty = Symbol('model');\n\n/**\n * @class\n * @property {string} title - Gets or sets the title of the current view\n * @property {string} name - Gets or sets the name of the current data view\n * @property {boolean} public - Gets or sets a boolean that indicates whether this data view is public or not.The default value is true.\n * @property {boolean} sealed - Gets or sets a boolean that indicates whether this data view is sealed or not. The default value is true.\n * @property {string|QueryExpression|*} filter - Gets or sets an open data formatted filter string or a query expression object associated with this view.\n * @property {string|*} order - Gets or sets an open data formatted order string or an order expression object associated with this view.\n * @property {string|*} group - Gets or sets an open data formatted group string or a group expression object associated with this view.\n * @property {Array} fields - Gets or sets the collection of data view's fields\n * @property {DataModel} model - Gets a DataModel instance that represents the parent model of the current view\n * @property {Array} attributes - A readonly collection of DataField instances\n */\nexport class DataModelView {\n    /**\n     * @constructor\n     * @param {DataModel} model - The parent model associated with this view\n     */\n    constructor(model) {\n\n        this.public = true;\n        this.sealed = true;\n        this.fields = [];\n        this[modelProperty] = model;\n    }\n\n    /**\n     * @returns {DataModel}\n     */\n    get model() {\n        return this[modelProperty];\n    }\n\n    /**\n     * @returns {Array};\n     */\n    get attributes() {\n        const self = this;\n        const attrs = [];\n        _.forEach(this.fields, function(x) {\n            if (self.model) {\n                const field = _.assign(new DataField(), self.model.field(x.name));\n                if (field)\n                    attrs.push(_.assign(field, x));\n                else\n                    attrs.push(_.assign({}, x));\n            }\n            else\n                attrs.push(_.assign({}, x));\n        });\n        return attrs;\n    }\n\n\n\n    /**\n     * Casts an object or an array of objects based on view's field collection.\n     * @param {Array|*} obj\n     * @returns {Array|*}\n     */\n    cast(obj) {\n        const self = this;\n        let res;\n        const localFields = _.filter(self.fields, function(y) {\n            return !_.isNil(self.model.field(y.name));\n        });\n        if (_.isArray(obj)) {\n            const arr = [];\n            _.forEach(obj, function(x) {\n                res = {};\n                _.forEach(localFields, function(y) {\n                    if (typeof x[y.name] !== 'undefined')\n                        res[y.name] = x[y.name];\n                });\n                arr.push(res);\n            });\n            return arr;\n        }\n        else {\n            res = { };\n            _.forEach(localFields, function(y) {\n                if (typeof obj[y.name] !== 'undefined')\n                    res[y.name] = obj[y.name];\n            });\n            return res;\n        }\n    }\n}"]}