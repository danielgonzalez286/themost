{"version":3,"sources":["query.es6"],"names":["sprintf","_","_empty","obj","forEach","keys","x","hasOwnProperty","QueryParameter","QueryFieldAggregator","comparison","name","isArray","i","length","Error","privatesProperty","Symbol","QueryExpression","$select","undefined","$delete","$update","$insert","$order","$group","$expand","$where","$prepared","$fixed","s","prop","assign","alias","$alias","isNil","entity","findKey","joins","filter","isObject","push","fields","re","QueryField","fieldNameExpression","arr","lastIndex","test","f","from","$entity","table","tableFields","y","useOr","preparedWhere","$or","$and","self","result","$take","value","$distinct","prototype","nameOf","call","where","valueOf","table1","props","args","Array","slice","arguments","TypeError","QueryEntity","$as","$ref","expand","expr","$with","apply","$asc","$desc","op","newFilter","aggr","p0","wrapWith","QueryFieldComparer","compareWith","__append","$ne","values","$in","$nin","$mod","$bit","$gt","isString","$regex","$options","$text","$search","$not","$lt","$lte","$gte","value1","value2","comparison1","comparison2","comp1","comp2","n","$skip","isNaN","$add","$subtract","$multiply","$divide","$round","start","$substr","$indexOf","$concat","$trim","$length","$date","$year","$month","$dayOfMonth","$hour","$minutes","$seconds","$floor","$ceiling","$toLower","$toUpper","q","select","number","res","toString","val","Date","dt","year","getFullYear","month","zeroPad","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","Object","escape","join","replace","ComparisonOperators","$eq","LogicalOperators","$nor","EvaluationOperators","$sub","$mul","$div","eq","equal","ne","notEqual","gt","greaterThan","lt","lowerThan","lte","lowerOrEqual","gte","greaterOrEqual","defineProperty","get","configurable","enumerable","$join","QueryValue","$value","QueryFieldUtils","count","min","max","average","sum","divider","multiplier","$day","$minute","$second","$name","concat","split","aggregate","$count","strings","$sum","$min","$avg","$max","RegExp","source","String","as","fieldName","fromEntity","OpenDataQuery","exprs","left","right","$filter","lop","_lop","attr","$top","$orderby","append","indexOf","pos","s0","s1","s2","s3","s4"],"mappings":"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","file":"query.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport sprintf from 'sprintf';\nimport _ from 'lodash';\n\nfunction _empty(obj) {\n    if (typeof obj === 'undefined' || obj === null) { return; }\n    _.forEach(_.keys(obj), function(x) { if (obj.hasOwnProperty(x)) { delete obj[x]; }  });\n}\n\n/**\n * @class\n */\nclass QueryParameter {\n    constructor() {\n        //do nothing\n    }\n}\n\n/**\n * @class\n */\nclass QueryFieldAggregator {\n    /**\n     * Wraps the given comparison expression in this aggregate function e.g. wraps { $gt:45 } with $floor aggregate function and returns { $floor: { $gt:45 } }\n     * @param {*} comparison\n     */\n    wrapWith(comparison) {\n        const name = _.keys(this)[0];\n        if (name) {\n            if (_.isArray(this[name])) {\n                //search for query parameter\n                for (let i = 0; i < this[name].length; i++) {\n                    if (this[name][i] instanceof QueryParameter) {\n                        this[name][i] = comparison;\n                        return this;\n                    }\n                }\n                throw new Error('Invalid aggregate expression. Parameter is missing.');\n            }\n            else {\n                if (this[name] instanceof QueryParameter) {\n                    this[name] = comparison;\n                    return this;\n                }\n                throw new Error('Invalid aggregate expression. Parameter is missing.');\n            }\n        }\n        throw new Error('Invalid aggregate expression. Aggregator is missing.');\n    }\n}\n\nconst privatesProperty = Symbol('privates');\n\n/**\n * @class\n */\nexport class QueryExpression {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /**\n         * Gets or sets an object or an array of objects that represents the entity where a select query will be applied.\n         * e.g. $select : { products: ['id', 'title', 'price'] },\n         * $select : [{ products: ['id', 'title', 'price'] }, { manufacturer:[ 'id', 'title', 'location'] }]\n         * @type {*}\n         * @private\n         */\n        this.$select = undefined;\n        /**\n         * Gets or sets an object or an array of objects that represents the entity where a delete query will be applied.\n         * e.g. { $delete : 'products', $where : { id :100 } }\n         * @type {*}\n         * @private\n         */\n        this.$delete = undefined;\n        /**\n         Gets or sets an object or an array of objects that represents the entity where an update query will be applied.\n         * e.g. $update : { products: {title: 'string #1', price: 100}, $where: { id:100 } }\n         * @type {*}\n         * @private\n         */\n        this.$update = undefined;\n        /**\n         * Gets or sets an object or an array of objects that represents the entity where an insert query will be applied.\n         * e.g. $insert : { products: { title: 'string #1', price: 100} }\n         * @type {*}\n         * @private\n         */\n        this.$insert = undefined;\n        /**\n         * Gets or sets the order statement of this query\n         * e.g. $order: [{ $asc: 'price' }, { $desc: 'dateCreated' }] or $order: [{ $asc: ['price', 'dateCreated'] }]\n         * @type {*}\n         * @private\n         */\n        this.$order = undefined;\n        /**\n         * Gets or sets the group by statement of this query\n         * e.g. $group: ['price', 'dateCreated']\n         * @type {*}\n         * @private\n         */\n        this.$group = undefined;\n        /**\n         * @type {*}\n         * @private\n         */\n        this.$expand = undefined;\n        /**\n         * Represents the filter statement of this query expression\n         * e.g. $where : { { price: 100} }\n         * @type {*}\n         * @private\n         */\n        this.$where = undefined;\n        /**\n         * Represents a prepared filter that\n         * e.g. $where : { { price: 100} }\n         * @type {*}\n         * @private\n         */\n        this.$prepared = undefined;\n        /**\n         * Represents a select query with only fixed values e.g. SELECT * FROM (SELECT 1 AS id,'test' AS title) t0\n         * @type {*}\n         * @private\n         */\n        this.$fixed = undefined;\n        /**\n         * @private\n         */\n        this[privatesProperty] = { };\n\n    }\n\n    /**\n     * Creates a new query expression\n     * @param {*=} entity\n     * @param {Array=} fields\n     * @returns {QueryExpression}\n     */\n    static create(entity, fields) {\n        const q = new QueryExpression();\n        q.from(entity);\n        if (_.isArray(fields)) {\n            q.select(fields);\n        }\n        return q;\n    }\n\n    /**\n     * @private\n     * @param {string|*=} s\n     * @returns {string|*}\n     */\n    prop(s) {\n        if (typeof s === 'undefined') { return this[privatesProperty].prop; }\n        if (s === null) { delete this[privatesProperty].prop; }\n        this[privatesProperty].prop = s;\n    }\n\n    /**\n     * Clones the current expression and returns a new QueryExpression object.\n     * @example\n     * var q = new QueryExpression();\n     * //do some stuff\n     * //...\n     * //clone expression\n     * var q1 = q.clone();\n     * @returns {QueryExpression}\n     */\n    clone() {\n        return _.assign(new QueryExpression(), this);\n    }\n\n    /**\n     * Sets the alias of a QueryExpression instance. This alias is going to be used in sub-query operations.\n     * @returns {QueryExpression}\n     */\n    as(alias) {\n        this.$alias = alias;\n        return this;\n    }\n\n    /**\n     * Gets a collection that represents the selected fields of the underlying expression\n     * @returns {Array}\n     */\n    fields() {\n\n        if (_.isNil(this.$select))\n            return [];\n        const entity = _.findKey(this.$select);\n        let joins = [];\n        if (_.isArray(this.$expand))\n        {\n            joins=_.filter(this.$expand, (x)=>{\n                return _.isObject(x);\n            });\n        }\n        else if (_.isObject(this.$expand)) {\n            joins.push(this.$expand);\n        }\n        //get entity fields\n        const fields = [];\n        //get fields\n        const re = QueryField.fieldNameExpression, arr = this.$select[entity] || [];\n        _.forEach(arr, function(x)\n        {\n            if (typeof x === 'string') {\n                re.lastIndex=0;\n                if (!re.test(x))\n                    fields.push(new QueryField(x));\n                else {\n                    const f = new QueryField(x);\n                    fields.push(f.from(entity));\n                }\n            }\n            else {\n                fields.push(_.assign(new QueryField(), x));\n            }\n        });\n        //enumerate join fields\n        _.forEach(joins, function(x)\n        {\n            if (x.$entity instanceof QueryExpression) {\n                //todo::add fields if any\n            }\n            else {\n                const table = _.findKey(x.$entity), tableFields = x.$entity[table] || [];\n                _.forEach(tableFields, function(y) {\n                    if (typeof x === 'string') {\n                        fields.push(new QueryField(y));\n                    }\n                    else {\n                        fields.push(_.assign(new QueryField(), y));\n                    }\n                });\n            }\n        });\n        return fields;\n    }\n\n    /**\n     * Gets a boolean value that indicates whether query expression has a filter statement or not.\n     * @returns {boolean}\n     */\n    hasFilter() {\n        return _.isObject(this.$where);\n    }\n\n    /**\n     * @param {Boolean} useOr\n     * @returns {QueryExpression}\n     */\n    prepare(useOr) {\n        if (typeof this.$where === 'object') {\n            if (typeof this.$prepared === 'object')\n            {\n                let preparedWhere = {};\n                if (useOr)\n                    preparedWhere = { $or: [this.$prepared, this.$where] };\n                else\n                    preparedWhere = { $and: [this.$prepared, this.$where] };\n                this.$prepared = preparedWhere;\n            }\n            else {\n                this.$prepared = this.$where;\n            }\n            delete this.$where;\n        }\n        return this;\n    }\n\n    /**\n     * Gets a boolean value that indicates whether query expression has fields or not.\n     * @returns {boolean}\n     */\n    hasFields() {\n        const self = this;\n        if (!_.isObject(self.$select))\n            return false;\n        const entity = _.findKey(self.$select);\n        let joins = [];\n        if (self.$expand!==null)\n        {\n            if (_.isArray(self.$expand))\n                joins=self.$expand;\n            else\n                joins.push(self.$expand);\n        }\n        //search for fields\n        if (_.isArray(self.$select[entity])) {\n            if (self.$select[entity].length>0)\n                return true;\n        }\n        let result = false;\n        //enumerate join fields\n        _.forEach(joins, function(x)\n        {\n            const table = _.findKey(x.$entity);\n            if (_.isArray(x.$entity[table])) {\n                if (x.$entity[table].length>0)\n                    result = true;\n            }\n        });\n        return result;\n    }\n\n    /**\n     * Gets a boolean value that indicates whether query expression has paging or not.\n     * @returns {boolean}\n     */\n    hasPaging() {\n        return (typeof this.$take !=='undefined' && this.$take!==null);\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    distinct(value) {\n        if (typeof value === 'undefined')\n            this.$distinct = true;\n        else\n            this.$distinct = value || false;\n        return this;\n    }\n\n    /**\n     * @param name {string|QueryField|*}\n     * @returns {QueryExpression}\n     */\n    where(name) {\n        if (_.isNil(name))\n            throw new Error('Left operand cannot be empty. Expected string or object.');\n        delete this.$where;\n        if (typeof name === 'string') {\n            this.prop(name);\n        }\n        else if (typeof name === 'object') {\n            this.prop(QueryField.prototype.nameOf.call(name))\n        }\n        else {\n            throw new Error('Invalid left operand. Expected string or object.');\n        }\n        return this;\n    }\n\n    /**\n     * Injects the given filter expression into the current query expression\n     * @param {*} where - An object that represents a filter expression\n     * @returns {QueryExpression}\n     */\n    injectWhere(where) {\n        if (_.isNil(where))\n            return this;\n        this.$where = where;\n        return this;\n    }\n\n    /**\n     * Initializes a delete query and sets the entity name that is going to be used in this query.\n     * @param entity {string}\n     * @returns {QueryExpression}\n     */\n    delete(entity) {\n        if (_.isNil(entity))\n            return this;\n        this.$delete = entity.valueOf();\n        //delete other properties (if any)\n        delete this.$insert;\n        delete this.$select;\n        delete this.$update;\n        return this;\n    }\n\n    /**\n     * Initializes an insert query and sets the object that is going to be inserted.\n     * @param obj {*}\n     * @returns {QueryExpression}\n     */\n    insert(obj) {\n        if (_.isNil(obj))\n            return this;\n        if (_.isArray(obj) || _.isObject(obj)) {\n            this.$insert = { table1: obj };\n            //delete other properties (if any)\n            delete this.$delete;\n            delete this.$select;\n            delete this.$update;\n            return this;\n        }\n        else {\n            throw new Error('Invalid argument. Object must be an object or an array of objects');\n        }\n    }\n\n    into(entity) {\n        if (_.isNil(entity))\n            return this;\n        if (_.isNil(this.$insert))\n            return this;\n        const prop = _.findKey(this.$insert);\n        if (_.isNil(prop))\n            return this;\n        if (prop===entity)\n            return this;\n        const value = this.$insert[prop];\n        if (_.isNil(value))\n            return this;\n        this.$insert[entity] = value;\n        delete this.$insert[prop];\n        return this;\n    }\n\n    /**\n     * Initializes an update query and sets the entity name that is going to be used in this query.\n     * @param {string} entity\n     * @returns {QueryExpression}\n     */\n    update(entity) {\n        if (_.isNil(entity))\n            return this;\n        if (typeof entity !== 'string')\n            throw new Error('Invalid argument type. Update entity argument must be a string.');\n        this.$update = {};\n        this.$update[entity] = {};\n        //delete other properties (if any)\n        delete this.$delete;\n        delete this.$select;\n        delete this.$insert;\n        return this;\n    }\n\n    /**\n     * Sets the object that is going to be updated through an update expression.\n     * @param {*} obj\n     * @returns {QueryExpression}\n     */\n    set(obj) {\n        if (_.isNil(obj))\n            return this;\n        if (_.isArray(obj) || !_.isObject(obj))\n            throw new Error('Invalid argument type. Update expression argument must be an object.');\n        //get entity name (by property)\n        const prop = _.findKey(this.$update);\n        if (_.isNil(prop))\n            throw new Error('Invalid operation. Update entity cannot be empty at this context.');\n        //set object to update\n        this.$update[prop] = obj;\n        return this;\n    }\n\n    /**\n     *\n     * @param props {...*}\n     * @returns {QueryExpression}\n     */\n    select(props) {\n\n        const args = Array.prototype.slice.call(arguments);\n        if (args.length===0)\n            return this;\n        if (_.isArray(args[0]) && args.length>1) {\n            throw new TypeError('Invalid arguments. Expected array only (for backward compatibility issues)')\n        }\n        let fields = [];\n        if (_.isArray(args[0])) {\n            //validate parameters\n            fields = args[0]\n        }\n        else {\n            fields = args;\n        }\n        //if entity is already defined\n        if (this[privatesProperty].entity)\n        {\n            //initialize $select property\n            this.$select = {};\n            //and set array of fields\n            this.$select[this[privatesProperty].entity] = fields;\n        }\n        else\n        {\n            //otherwise store array of fields in temporary property and wait\n            this[privatesProperty].fields = fields;\n        }\n        //delete other properties (if any)\n        delete this.$delete;\n        delete this.$insert;\n        delete this.$update;\n        return this;\n    }\n\n    /**\n     * Sets the entity of a select query expression\n     * @param entity {string|QueryEntity|*} A string that represents the entity name\n     * @returns {QueryExpression}\n     */\n    from(entity) {\n\n        if (_.isNil(entity))\n            return this;\n        let name;\n        if (entity instanceof QueryEntity) {\n            name  = entity.$as || entity.name;\n            this.$ref = this.$ref || {};\n            this.$ref[name] = entity;\n        }\n        else {\n            name = entity.valueOf();\n        }\n        if (this[privatesProperty].fields) {\n            //initialize $select property\n            this.$select = {};\n            //and set array of fields\n            this.$select[name] = this[privatesProperty].fields;\n        }\n        else {\n            this[privatesProperty].entity = name;\n        }\n        //delete other properties (if any)\n        delete this.$delete;\n        delete this.$insert;\n        delete this.$update;\n        //and return this object\n        return this;\n    }\n\n    /**\n     * Initializes a join expression with the specified entity\n     * @param {*} entity\n     * @param {Array=} props\n     * @param {String=} alias\n     * @returns {QueryExpression}\n     */\n    join(entity, props, alias) {\n\n        if (_.isNil(entity))\n            return this;\n        // if (_.isNil(this.$select))\n        //     throw new Error('Query entity cannot be empty when adding a join entity.');\n        let obj = {};\n        if (entity instanceof QueryEntity) {\n            //do nothing (clone object)\n            obj = entity;\n        }\n        else if (entity instanceof QueryExpression) {\n            //do nothing (clone object)\n            obj = entity;\n        }\n        else {\n            obj[entity] = props || [];\n            if (typeof alias === 'string')\n                obj.$as=alias;\n        }\n        this[privatesProperty].expand =  { $entity: obj };\n        //and return this object\n        return this;\n    }\n\n    /**\n     * Sets the join expression of the last join entity\n     * @param obj {Array|*}\n     * @returns {QueryExpression}\n     */\n    with(obj) {\n\n        if (_.isNil(obj))\n            return this;\n        if (_.isNil(this[privatesProperty].expand))\n            throw new Error('Join entity cannot be empty when adding a join expression. Use QueryExpression.join(entity, props) before.');\n        if (obj instanceof QueryExpression)\n        {\n            /**\n             * @type {QueryExpression}\n             */\n            const expr = obj;\n            let where = null;\n            if (expr.$where)\n                where = expr.$prepared ? { $and: [expr.$prepared, expr.$where] } : expr.$where;\n            else if (expr.$prepared)\n                where = expr.$prepared;\n            this[privatesProperty].expand.$with = where;\n        }\n        else {\n            this[privatesProperty].expand.$with = obj;\n        }\n\n        //copy expand\n        const expand = [];\n        if (_.isArray(this.$expand)) {\n            expand.push.apply(expand, this.$expand);\n        }\n        else if (_.isObject(this.$expand)) {\n            expand.push(this.$expand);\n        }\n        //finally add new expand item\n        expand.push(this[privatesProperty].expand);\n        this.$expand = expand;\n        //destroy temp object\n        delete this[privatesProperty].expand;\n        //and return QueryExpression\n        return this;\n    }\n\n    /**\n     * Applies an ascending ordering to a query expression\n     * @param name {string}\n     * @returns {QueryExpression}\n     */\n    orderBy(name) {\n\n        if (_.isNil(name))\n            return this;\n        this.$order = this.$order || [];\n        this.$order.push({ $asc: name });\n        return this;\n    }\n\n    /**\n     * Applies a descending ordering to a query expression\n     * @param name\n     * @returns {QueryExpression}\n     */\n    orderByDescending(name) {\n\n        if (_.isNil(name))\n            return this;\n        this.$order = this.$order || [];\n        this.$order.push({ $desc: name });\n        return this;\n    }\n\n    /**\n     * Performs a subsequent ordering in a query expression\n     * @param name {string|Array}\n     * @returns {QueryExpression}\n     */\n    thenBy(name) {\n\n        if (_.isNil(name))\n            return this;\n        this.$order = this.$order || [];\n        this.$order.push({ $asc: name });\n        return this;\n    }\n\n    /**\n     * Performs a subsequent ordering in a query expression\n     * @param name {string|Array}\n     * @returns {QueryExpression}\n     */\n    thenByDescending(name) {\n\n        if (_.isNil(name))\n            return this;\n        this.$order = this.$order || [];\n        this.$order.push({ $desc: name });\n        return this;\n    }\n\n    /**\n     *\n     * @param name {string|Array}\n     * @returns {QueryExpression}\n     */\n    groupBy(name) {\n\n        if (_.isNil(name))\n            return this;\n        if (this.$group===null)\n            this.$group = [];\n        const self = this;\n        if (_.isArray(name)) {\n            _.forEach(name, function (x) {\n                if (x)\n                    self.$group.push(x);\n            });\n        }\n        else\n            this.$group.push(name);\n        return this;\n    }\n\n    /**\n     * @param expr\n     * @private\n     */\n    __append(expr) {\n        if (!expr)\n            return;\n        if (!this.$where) {\n            this.$where = expr;\n        }\n        else {\n            const op = this[privatesProperty].expr;\n            if (op) {\n                //get current operator\n                const keys = _.keys(this.$where);\n                if (keys[0]===op) {\n                    this.$where[op].push(expr);\n                }\n                else {\n                    const newFilter = {};\n                    newFilter[op] = [this.$where, expr];\n                    this.$where = newFilter;\n                }\n            }\n        }\n        delete this[privatesProperty].prop;\n        delete this[privatesProperty].expr;\n        delete this[privatesProperty].aggr;\n    }\n\n    /**\n     * @param name {string|QueryField}\n     * @returns {QueryExpression}\n     */\n    or(name) {\n        if (_.isNil(name))\n            throw new Error('Left operand cannot be empty. Expected string or object.');\n        if (typeof name === 'string') {\n            this.prop(name);\n        }\n        else if (typeof name === 'object') {\n            this.prop(QueryField.prototype.nameOf.call(name))\n        }\n        else {\n            throw new Error('Invalid left operand. Expected string or object.');\n        }\n        this[privatesProperty].expr = '$or';\n        return this;\n    }\n\n    /**\n     * @param name {string|QueryField|*}\n     * @returns {QueryExpression}\n     */\n    and(name) {\n        if (_.isNil(name))\n            throw new Error('Left operand cannot be empty. Expected string or object.');\n        if (typeof name === 'string') {\n            this.prop(name);\n        }\n        else if (typeof name === 'object') {\n            this.prop(QueryField.prototype.nameOf.call(name))\n        }\n        else {\n            throw new Error('Invalid left operand. Expected string or object.');\n        }\n        this[privatesProperty].expr = '$and';\n        return this;\n    }\n\n    /**\n     * Prepares an equal expression.\n     * @example\n     * q.where('id').equal(10) //id=10 expression\n     * @param {*} value - A value that represents the right part of the prepared expression\n     * @returns {QueryExpression}\n     */\n    equal(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = value;\n            //apply aggregation if any\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, value);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * Prepares a not equal expression.\n     * @example\n     * q.where('id').notEqual(10) //id<>10 expression\n     * @param {*} value - A value that represents the right part of the prepared expression\n     * @returns {QueryExpression}\n     */\n    notEqual(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $ne:value };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr,{ $ne:value });\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * Prepares an in statement expression\n     * @example\n     * q.where('id').in([10, 11, 12]) //id in (10,11,12) expression\n     * @param {Array} values - An array of values that represents the right part of the prepared expression\n     * @returns {QueryExpression}\n     */\n    in(values) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $in : values };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * Prepares a not in statement expression\n     * @example\n     * q.where('id').notIn([10, 11, 12]) //id in (10,11,12) expression\n     * @param {Array} values - An array of values that represents the right part of the prepared expression\n     * @returns {QueryExpression}\n     */\n    notIn(values) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $nin : values };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr,{ $nin : values });\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param {*} value The value to be compared\n     * @param {Number} result The result of modulo expression\n     * @returns {QueryExpression}\n     */\n    mod(value, result) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $mod : [ value, result] };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param {*} value The value to be compared\n     * @param {Number} result The result of a bitwise and expression\n     * @returns {QueryExpression}\n     */\n    bit(value, result) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $bit : [ value, result] };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param value {*}\n     * @returns {QueryExpression}\n     */\n    greaterThan(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $gt:value };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param {string} value\n     * @returns {QueryExpression}\n     */\n    startsWith(value) {\n        const p0 = this.prop();\n        if (p0) {\n            if (!_.isString(value)) {\n                throw new Error('Invalid argument. Expected string.')\n            }\n            let comparison = { $regex : '^' + value, $options:'i' };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr,{ $regex : '^' + value, $options:'i' });\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param value {*}\n     * @returns {QueryExpression}\n     */\n    endsWith(value) {\n        const p0 = this.prop();\n        if (p0) {\n            if (!_.isString(value)) {\n                throw new Error('Invalid argument. Expected string.');\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, { $regex : value + '$', $options:'i' });\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * Prepares a contains expression.\n     * @example\n     * var qry = require('most-query');\n     * var q = qry.query('Person').where('first').contains('om').select(['id','first', 'last']);\n     * var formatter = new qry.classes.SqlFormatter();\n     * console.log(formatter.format(q));\n     * //returns SELECT Person.id, Person.first, Person.last FROM Person WHERE ((first REGEXP 'om')=true)\n     * @param  {*} value - A value that represents the right part of the expression\n     * @returns {QueryExpression}\n     */\n    contains(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $text: { $search: value } };\n            //apply aggregation if any\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison );\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    notContains(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $text: { $search: value } };\n            //apply aggregation if any\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = { $not: QueryFieldComparer.prototype.compareWith.call(p0, comparison) };\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param value {*}\n     * @returns {QueryExpression}\n     */\n    lowerThan(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $lt:value };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param value {*}\n     * @returns {QueryExpression}\n     */\n    lowerOrEqual(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $lte:value };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param value {*}\n     * @returns {QueryExpression}\n     */\n    greaterOrEqual(value) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison = { $gte:value };\n            if (typeof this.aggr === 'object') {\n                comparison = QueryFieldAggregator.prototype.wrapWith.call(this.aggr, comparison);\n                delete this.aggr;\n            }\n            const expr = QueryFieldComparer.prototype.compareWith.call(p0, comparison);\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * @param {*} value1\n     * @param {*} value2\n     * @returns {QueryExpression}\n     */\n    between(value1, value2) {\n        const p0 = this.prop();\n        if (p0) {\n            let comparison1 = { $gte:value1}, comparison2 = { $lte:value2 };\n            if (typeof this.aggr === 'object') {\n                comparison1 = QueryFieldAggregator.prototype.wrapWith({ $gte:value1} );\n                comparison2 = QueryFieldAggregator.prototype.wrapWith({ $lte:value2} );\n                delete this.aggr\n            }\n            const comp1 = QueryFieldComparer.prototype.compareWith.call(p0, comparison1);\n            const comp2 = QueryFieldComparer.prototype.compareWith.call(p0, comparison2);\n            const expr = {};\n            expr['$and'] = [ comp1, comp2 ];\n            this.__append(expr);\n        }\n        return this;\n    }\n\n    /**\n     * Skips the specified number of objects during select.\n     * @param {Number} n\n     * @returns {QueryExpression}\n     */\n    skip(n) {\n        this.$skip = isNaN(n) ? 0 : n;\n        return this;\n    }\n\n    /**\n     * Takes the specified number of objects during select.\n     * @param {Number} n\n     * @returns {QueryExpression}\n     */\n    take(n) {\n        this.$take = isNaN(n) ? 0 : n;\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number|*} number\n     * @param {number} length\n     * @returns {*}\n     */\n    static zeroPad(number, length) {\n        number = number || 0;\n        let res = number.toString();\n        while (res.length < length) {\n            res = '0' + res;\n        }\n        return res;\n    }\n\n    /**\n     * @param {number|*} x\n     * @returns {QueryExpression}\n     */\n    add(x) {\n        this.aggr = { $add:[ x, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {number|*} x\n     * @returns {QueryExpression}\n     */\n    subtract(x) {\n        this.aggr = { $subtract:[ x, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {number} x\n     * @returns {QueryExpression}\n     */\n    multiply(x) {\n        this.aggr = { $multiply:[ x, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {number} x\n     * @returns {QueryExpression}\n     */\n    divide(x) {\n        this.aggr = { $divide:[ x, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {number=} n\n     * @returns {QueryExpression}\n     */\n    round(n) {\n        this.aggr = { $round:[ n, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number=} length\n     * @returns {QueryExpression}\n     */\n    substr(start, length) {\n        this.aggr = { $substr:[ start, length, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {string} s\n     * @returns {QueryExpression}\n     */\n    indexOf(s) {\n        this.aggr = { $indexOf:[ s, new QueryParameter() ] };\n        return this;\n    }\n\n    /**\n     * @param {string|*} s\n     * @returns {QueryExpression}\n     */\n    concat(s) {\n        this.aggr = { $concat:[ s, new QueryParameter()] };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    trim() {\n        this.aggr = { $trim: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    length() {\n        this.aggr = { $length: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getDate() {\n        this.aggr = { $date: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getYear() {\n        this.aggr = { $year: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getMonth() {\n        this.aggr = { $month: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getDay() {\n        this.aggr = { $dayOfMonth: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getHours() {\n        this.aggr = { $hour: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getMinutes() {\n        this.aggr = { $minutes: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    getSeconds() {\n        this.aggr = { $seconds: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    floor() {\n        this.aggr = { $floor: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    ceil() {\n        this.aggr = { $ceiling: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    toLocaleLowerCase() {\n        this.aggr = { $toLower: new QueryParameter() };\n        return this;\n    }\n\n    /**\n     * @returns {QueryExpression}\n     */\n    toLocaleUpperCase() {\n        this.aggr = { $toUpper: new QueryParameter() };\n        return this;\n    }\n\n    static escape(val) {\n        if (val === undefined || val === null) {\n            return 'null';\n        }\n\n        switch (typeof val) {\n        case 'boolean': return (val) ? 'true' : 'false';\n        case 'number': return val+'';\n        }\n\n        if (val instanceof Date) {\n            const dt = new Date(val);\n            const year   = dt.getFullYear();\n            const month  = QueryExpression.zeroPad(dt.getMonth() + 1, 2);\n            const day    = QueryExpression.zeroPad(dt.getDate(), 2);\n            const hour   = QueryExpression.zeroPad(dt.getHours(), 2);\n            const minute = QueryExpression.zeroPad(dt.getMinutes(), 2);\n            const second = QueryExpression.zeroPad(dt.getSeconds(), 2);\n            const millisecond = QueryExpression.zeroPad(dt.getMilliseconds(), 3);\n            val = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + millisecond;\n        }\n\n        if (typeof val === 'object' && Object.prototype.toString.call(val) === '[object Array]') {\n            const values = [];\n            _.forEach(val, function(x) {\n                QueryExpression.escape(x);\n            });\n            return values.join(',');\n        }\n\n        if (typeof val === 'object') {\n            if (val.hasOwnProperty('$name'))\n            //return field identifier\n                return val['$name'];\n            else\n                return this.escape(val.valueOf())\n        }\n\n        val = val.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, function(s) {\n            switch(s) {\n            case \"\\0\": return \"\\\\0\";\n            case \"\\n\": return \"\\\\n\";\n            case \"\\r\": return \"\\\\r\";\n            case \"\\b\": return \"\\\\b\";\n            case \"\\t\": return \"\\\\t\";\n            case \"\\x1a\": return \"\\\\Z\";\n            default: return \"\\\\\"+s;\n            }\n        });\n        return \"'\"+val+\"'\";\n    }\n}\n\n/**\n * Represents an enumeration of comparison query operators\n * @type {*}\n */\nQueryExpression.ComparisonOperators = { $eq:'$eq', $ne:'$ne', $gt:'$gt',$gte:'$gte', $lt:'$lt',$lte:'$lte', $in: '$in', $nin:'$nin' };\n/**\n * Represents an enumeration of logical query operators\n * @type {*}\n */\nQueryExpression.LogicalOperators = { $or:'$or', $and:'$and', $not:'$not', $nor:'$not' };\n/**\n * Represents an enumeration of evaluation query operators\n * @type {*}\n */\nQueryExpression.EvaluationOperators = { $mod:'$mod', $add:'$add', $sub:'$sub', $mul:'$mul', $div:'$div' };\n\n/**\n * Prepares an equal expression.\n * @example\n * q.where('id').eq(10) //id=10 expression\n * @param {*} value\n * @returns {QueryExpression}\n */\nQueryExpression.prototype.eq = QueryExpression.prototype.equal;\n\n\nQueryExpression.prototype.ne = QueryExpression.prototype.notEqual;\n\nQueryExpression.prototype.gt = QueryExpression.prototype.greaterThan;\n/**\n * @param value {*}\n * @returns {QueryExpression}\n */\nQueryExpression.prototype.lt = QueryExpression.prototype.lowerThan;\n\nQueryExpression.prototype.lte = QueryExpression.prototype.lowerOrEqual;\n/**\n * @param value {*}\n * @returns {QueryExpression}\n */\nQueryExpression.prototype.gte = QueryExpression.prototype.greaterOrEqual;\n\n/**\n * @class\n */\nexport class QueryEntity {\n    /**\n     * @constructor\n     * @param {string|*} obj\n     */\n    constructor(obj) {\n        const entity = obj || 'Table';\n        this[entity] = [];\n        Object.defineProperty(this, 'name', {\n            get: function() {\n                return entity;\n            }, configurable:false, enumerable:false\n        });\n        const self = this;\n        Object.defineProperty(this, 'props', {\n            get: function() {\n                return self[entity];\n            }, configurable:false, enumerable:false\n        });\n    }\n    /**\n     * Creates an entity reference that is going to be used in query expressions.\n     * @param {string} entity - The entity name\n     * @param {Array=} fields - An array that represents the entity's field collection to be used.\n     * @returns {QueryEntity|*}\n     */\n    static create(entity, fields) {\n        const obj = new QueryEntity(entity);\n        obj[entity] = fields || [];\n        return obj;\n    }\n\n    select(name) {\n        const f = new QueryField(name);\n        return f.from(this.$as ? this.$as : this.name);\n    }\n\n    as(alias) {\n        this.$as = alias;\n        return this;\n    }\n\n    inner() {\n        this.$join = 'inner';\n        return this;\n    }\n\n    left() {\n        this.$join = 'left';\n        return this;\n    }\n\n    right() {\n        this.$join = 'right';\n        return this;\n    }\n}\n/**\n * @class\n * @property $value - The underlying value\n */\nexport class QueryValue {\n\n    /**\n     * @constructor\n     * @param {*=} value\n     */\n    constructor(value) {\n        this.$value = value;\n    }\n\n    /**\n     * Creates a new query value\n     * @param value\n     * @returns {QueryValue}\n     */\n    static create(value) {\n        return new QueryValue(value);\n    }\n\n}\n\nexport class QueryFieldUtils {\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static select(name) {\n        return new QueryField(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static count(name) {\n        const f = new QueryField();\n        return f.count(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static min(name) {\n        const f = new QueryField();\n        return f.min(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static max(name) {\n        const f = new QueryField();\n        return f.max(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static average(name) {\n        const f = new QueryField();\n        return f.average(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static avg(name) {\n        return QueryFieldUtils.average(name);\n    }\n\n    /**\n     * @param name {string}\n     * @returns {QueryField}\n     */\n    static sum(name) {\n        const f = new QueryField();\n        return f.sum(name);\n    }\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static floor(name) {\n        const f = { };\n        f[name] = { $floor:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static ceil(name) {\n        const f = { };\n        f[name] = { $ceiling:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @param {number=} divider\n     * @returns {QueryField}\n     */\n    static modulo(name, divider) {\n        const f = { };\n        f[name] = { $mod:[ QueryFieldUtils.select(name), divider ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @param {number=} x\n     * @returns {QueryField}\n     */\n    static add(name, x) {\n        const f = { };\n        f[name] = { $add:[ QueryFieldUtils.select(name), x ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @param {number=} x\n     * @returns {QueryField}\n     */\n    static subtract(name, x) {\n        const f = { };\n        f[name] = { $subtract:[ QueryFieldUtils.select(name), x ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @param {number=} divider\n     * @returns {QueryField}\n     */\n    static divide(name, divider) {\n        const f = { };\n        f[name] = { $divide:[ QueryFieldUtils.select(name), divider ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @param {number=} multiplier\n     * @returns {QueryField}\n     */\n    static multiply(name, multiplier) {\n        const f = { };\n        f[name] = { $multiply:[ QueryFieldUtils.select(name), multiplier ] };\n        return _.assign(new QueryField(), f);\n    }\n    /**\n     * @param {string} name\n     * @param {number=} n\n     * @returns {QueryField}\n     */\n    static round(name, n) {\n        const f = { };\n        if (typeof n !== 'number') { n=2; }\n        f[name] = { $round:[ QueryFieldUtils.select(name), n ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static month(name) {\n        const f = { };\n        f[name] = { $month:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static year(name) {\n        const f = { };\n        f[name] = { $year:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static day(name) {\n        const f = { };\n        f[name] = { $day:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static hour(name) {\n        const f = { };\n        f[name] = { $hour:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static minute(name) {\n        const f = { };\n        f[name] = { $minute:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static second(name) {\n        const f = { };\n        f[name] = { $second:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static date(name) {\n        const f = { };\n        f[name] = { $date:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static length(name) {\n        const f = { };\n        f[name] = { $length:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n\n    /**\n     * @param {string} name\n     * @returns {QueryField}\n     */\n    static trim(name) {\n        const f = { };\n        f[name] = { $trim:[ QueryFieldUtils.select(name) ] };\n        return _.assign(new QueryField(), f);\n    }\n}\n\n/**\n * @class\n */\nexport class QueryField {\n    /**\n     * @constructor\n     * @param {string=} obj\n     */\n    constructor(obj) {\n        if (typeof  obj === 'string') {\n            this.$name = obj;\n        }\n        else if (typeof obj === 'object' && obj!==null) {\n            _.assign(this, obj);\n        }\n    }\n\n    /**\n     * Creates a query field of the given entity\n     * @param {string=} fieldName\n     * @param {string=} fromEntity\n     * @returns {QueryField}\n     */\n    static create(fieldName, fromEntity) {\n        const f = new QueryField(fieldName);\n        if (_.isNil(fromEntity)) {\n            return f;\n        }\n        return f.from(fromEntity);\n    }\n\n    /**\n     * @param name {string} The name of the field that is going to be selected\n     * @returns {QueryField}\n     */\n    select(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as string e.g. { $name: 'price' }\n        this.$name = name;\n        return this;\n    }\n\n    /**\n     * Sets the entity of the current field\n     * @param entity {string}\n     * @returns {QueryField}\n     */\n    from(entity) {\n        let name;\n        if (typeof entity !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //get property\n        if (!_.isNil(this.$name))\n        {\n            if (typeof this.$name === 'string') {\n                //check if an entity is already defined\n                name = this.$name;\n                if (QueryField.fieldNameExpression.test(name))\n                //if not append entity name\n                    this.$name = entity.concat('.', name);\n                else\n                //split field name and add entity\n                    this.$name = entity.concat('.', name.split('.')[1]);\n            }\n            else\n                throw new Error(\"Invalid field definition.\");\n        }\n        else {\n            //get default property\n            const alias = _.findKey(this);\n            if (_.isNil(alias))\n                throw new Error(\"Field definition cannot be empty at this context\");\n            //get field expression\n            const expr = this[alias];\n            //get field name\n            const aggregate = _.findKey(expr);\n            if (_.isNil(aggregate))\n                throw new Error(\"Field expression cannot be empty at this context\");\n            name = expr[aggregate];\n            if (QueryField.fieldNameExpression.test(name))\n            //if not append entity name\n                expr[aggregate] = entity.concat('.', name);\n            else\n            //split field name and add entity\n                expr[aggregate] = entity.concat('.', name.split('.')[1]);\n        }\n        return this;\n    }\n\n    count(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as aggregate function e.g. { price: { $count: 'price' } }\n        this[name] = { $count: name };\n        return this;\n    }\n\n    /**\n     * @param {...string} [strings]\n     * @return {string}\n     */\n    concat(strings) {\n        return this.$name.concat(strings)\n    }\n\n    sum(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as aggregate function e.g. { price: { $sum: 'price' } }\n        this[name] = { $sum: name };\n        return this;\n    }\n\n    min(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as aggregate function e.g. { price: { $min: 'price' } }\n        this[name] = { $min: name };\n        return this;\n    }\n\n    average(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as aggregate function e.g. { price: { $avg: 'price' } }\n        this[name] = { $avg: name };\n        return this;\n    }\n\n    max(name) {\n        if (typeof name !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //clear object\n        _empty(this);\n        // field as aggregate function e.g. { price: { $max: 'price' } }\n        this[name] = { $max: name };\n        return this;\n    }\n\n    /**\n     *\n     * @param {String=} alias\n     * @returns {QueryField|String}\n     */\n    as(alias) {\n        if (typeof alias === 'undefined')\n        {\n            if (typeof this.$name !== 'undefined')\n                return null;\n            const keys = _.keys(this);\n            if (keys.length === 0)\n                return null;\n            else\n                return keys[0];\n        }\n        if (typeof alias !== 'string')\n            throw  new Error('Invalid argument. Expected string');\n        //get first property\n        const prop = _.findKey(this);\n        if (prop === null)\n            throw  new Error('Invalid object state. Field is not selected.');\n        const value = this[prop];\n        if (prop!==alias) {\n            this[alias] = value;\n            delete this[prop];\n        }\n        return this;\n    }\n\n    name() {\n        let name = null;\n        if (typeof this.$name === 'string') {\n            name = this.$name\n        }\n        else {\n            const prop = _.findKey(this);\n            if (prop) {\n                name = this[prop];\n            }\n        }\n        if (typeof name === 'string') {\n            //check if an entity is already defined\n            const re = new RegExp(QueryField.fieldNameExpression.source);\n            if (re.test(name))\n                return name;\n            else\n                return name.split('.')[1];\n        }\n        return null;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getName() {\n        return this.name();\n    }\n\n    nameOf() {\n\n        if ((typeof this === 'string') || (this instanceof String)) {\n            return this;\n        }\n        let alias;\n        if (typeof this.as === 'function')\n            alias = this.as();\n        else\n            alias = QueryField.prototype.as.call(this);\n\n        if (alias) {\n            return this[alias];\n        }\n        else {\n            return this.$name;\n        }\n    }\n\n    valueOf() {\n        return this.$name;\n    }\n\n\n}\n\nQueryField.fieldNameExpression = /^[A-Za-z_0-9]+$/;\n\n/**\n * @class\n */\nclass QueryFieldComparer {\n    /**\n     *\n     * @param {*} comparison\n     * @returns {*}\n     */\n    compareWith(comparison) {\n        const expr = { };\n        if ((typeof this === 'string') || (this instanceof String)) {\n            expr[this] = comparison;\n            return expr;\n        }\n\n        //get aggregate function\n        const aggr = _.findKey(this);\n\n        let name;\n        if (_.isArray(this[aggr])) {\n            //get first element (the field name)\n            name = QueryField.prototype.nameOf.call(this[aggr][0]);\n        }\n        else {\n            //get element (the field name)\n            name = QueryField.prototype.nameOf.call(this[aggr]);\n        }\n        expr[name] = { };\n        expr[name][aggr] = comparison;\n        return expr;\n    }\n\n    wrapWithAggregate(aggr, comparison) {\n    }\n}\n\n/**\n * @class\n * @property {string} $model - Gets or sets a string which represents the target model\n * @property {string} $filter - Gets or sets a string which represents a filter statement assigned to the current data query\n * @property {number} $top - Gets or sets an integer which represents the number of records to get\n * @property {number} $skip - Gets or sets an integer which represents the number of records to skip\n */\nexport class OpenDataQuery {\n    /**\n     * @constructor\n     */\n    constructor() {\n\n        /**\n         * @private\n         */\n        this[privatesProperty] = {};\n    }\n\n    /**\n     * @private\n     * @returns OpenDataQuery\n     */\n    append() {\n        let exprs;\n        const self = this;\n        if (self[privatesProperty].left) {\n            let expr = null;\n\n            if (self[privatesProperty].op==='in') {\n                if (_.isArray(self[privatesProperty].right)) {\n                    //expand values\n                    exprs = [];\n                    _.forEach(self[privatesProperty].right, function(x) {\n                        exprs.push(self[privatesProperty].left + ' eq ' + QueryExpression.escape(x));\n                    });\n                    if (exprs.length>0)\n                        expr = '(' + exprs.join(' or ') + ')';\n                }\n            }\n            else if (self[privatesProperty].op==='nin') {\n                if (_.isArray(self[privatesProperty].right)) {\n                    //expand values\n                    exprs = [];\n                    _.forEach(self[privatesProperty].right, function(x) {\n                        exprs.push(self[privatesProperty].left + ' ne ' + QueryExpression.escape(x));\n                    });\n                    if (exprs.length>0)\n                        expr = '(' + exprs.join(' and ') + ')';\n                }\n            }\n            else\n                expr = self[privatesProperty].left + ' ' + self[privatesProperty].op + ' ' + QueryExpression.escape(self[privatesProperty].right);\n            if (expr) {\n                if (_.isNil(self.$filter))\n                    self.$filter = expr;\n                else {\n                    self[privatesProperty].lop = self[privatesProperty].lop || 'and';\n                    self[privatesProperty]._lop = self[privatesProperty]._lop || self[privatesProperty].lop;\n                    if (self[privatesProperty]._lop === self[privatesProperty].lop)\n                        self.$filter = self.$filter + ' ' + self[privatesProperty].lop + ' ' + expr;\n                    else\n                        self.$filter = '(' + self.$filter + ') ' + self[privatesProperty].lop + ' ' + expr;\n                    self[privatesProperty]._lop = self[privatesProperty].lop;\n                }\n            }\n        }\n        delete self[privatesProperty].lop;delete self[privatesProperty].left; delete self[privatesProperty].op; delete self[privatesProperty].right;\n        return this;\n    }\n\n    /**\n     * @param {Array|String} attr\n     * @returns OpenDataQuery\n     */\n    select(attr) {\n        if (_.isArray(attr)) {\n            this.$select = attr.join(',');\n        }\n        else\n            this.$select = attr;\n    }\n\n    /**\n     * @param {number} val\n     * @returns OpenDataQuery\n     */\n    take(val) {\n        this.$top = isNaN(val) ? 0 : val;\n        return this;\n    }\n\n    /**\n     * @param {number} val\n     * @returns OpenDataQuery\n     */\n    skip(val) {\n        this.$skip = isNaN(val) ? 0 : val;\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    orderBy(name) {\n        if (typeof name !=='undefined' || name!==null)\n            this.$orderby = name.toString();\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    orderByDescending(name) {\n        if (typeof name !=='undefined' || name!==null)\n            this.$orderby = name.toString() + ' desc';\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    thenBy(name) {\n        if (typeof name !=='undefined' || name!==null) {\n            this.$orderby += (this.$orderby ? ',' + name.toString() : name.toString());\n        }\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    thenByDescending(name) {\n        if (typeof name !=='undefined' || name!==null) {\n            this.$orderby += (this.$orderby ? ',' + name.toString() : name.toString()) + ' desc';\n        }\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    where(name) {\n        this[privatesProperty].left = name;\n        return this;\n    }\n\n    /**\n     * @param {String=} name\n     * @returns OpenDataQuery\n     */\n    and(name) {\n        this[privatesProperty].lop = 'and';\n        if (typeof name !== 'undefined')\n            this[privatesProperty].left = name;\n        return this;\n    }\n\n    /**\n     * @param {String=} name\n     * @returns OpenDataQuery\n     */\n    or(name) {\n        this[privatesProperty].lop = 'or';\n        if (typeof name !== 'undefined')\n            this[privatesProperty].left = name;\n        return this;\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    equal(value) {\n        this[privatesProperty].op = 'eq';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    indexOf(name) {\n        this[privatesProperty].left = 'indexof(' + name + ')';\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    andIndexOf(name) {\n        this[privatesProperty].lop = 'and';\n        return this.indexOf(name);\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    orIndexOf(name) {\n        this[privatesProperty].lop = 'or';\n        return this.indexOf(name);\n    }\n\n    /**\n     * @param {*} name\n     * @param {*} s\n     * @returns OpenDataQuery\n     */\n    endsWith(name, s) {\n        this[privatesProperty].left = sprintf.sprintf('endswith(%s,%s)',name,QueryExpression.escape(s));\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @param {*} s\n     * @returns OpenDataQuery\n     */\n    startsWith(name, s) {\n        this[privatesProperty].left = sprintf.sprintf('startswith(%s,%s)',name,QueryExpression.escape(s));\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @param {*} s\n     * @returns OpenDataQuery\n     */\n    substringOf(name, s) {\n        this[privatesProperty].left = sprintf.sprintf('substringof(%s,%s)',name,QueryExpression.escape(s));\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @param {number} pos\n     * @param {number} length\n     * @returns OpenDataQuery\n     */\n    substring(name, pos, length) {\n        this[privatesProperty].left = sprintf.sprintf('substring(%s,%s,%s)',name,pos,length);\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @returns OpenDataQuery\n     */\n    length(name) {\n        this[privatesProperty].left = sprintf.sprintf('length(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @returns OpenDataQuery\n     */\n    toLower(name) {\n        this[privatesProperty].left = sprintf.sprintf('tolower(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @returns OpenDataQuery\n     */\n    toUpper(name) {\n        this[privatesProperty].left = sprintf.sprintf('toupper(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {*} name\n     * @returns OpenDataQuery\n     */\n    trim(name) {\n        this[privatesProperty].left = sprintf.sprintf('trim(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {*} s0\n     * @param {*} s1\n     * @param {*=} s2\n     * @param {*=} s3\n     * @param {*=} s4\n     * @returns OpenDataQuery\n     */\n    concat(s0, s1, s2, s3, s4) {\n        this[privatesProperty].left = 'concat(' + QueryExpression.escape(s0) + ',' + QueryExpression.escape(s1);\n        if (typeof s2 !== 'undefined')\n            this[privatesProperty].left +=',' + QueryExpression.escape(s2);\n        if (typeof s3 !== 'undefined')\n            this[privatesProperty].left +=',' + QueryExpression.escape(s3);\n        if (typeof s4 !== 'undefined')\n            this[privatesProperty].left +=',' + QueryExpression.escape(s4);\n        this[privatesProperty].left +=')';\n        return this;\n    }\n\n    field(name) {\n        return { \"$name\":name }\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    day(name) {\n        this[privatesProperty].left = sprintf.sprintf('day(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    hour(name) {\n        this[privatesProperty].left = sprintf.sprintf('hour(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    minute(name) {\n        this[privatesProperty].left = sprintf.sprintf('minute(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    month(name) {\n        this[privatesProperty].left = sprintf.sprintf('month(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    second(name) {\n        this[privatesProperty].left = sprintf.sprintf('second(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    year(name) {\n        this[privatesProperty].left = sprintf.sprintf('year(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    round(name) {\n        this[privatesProperty].left = sprintf.sprintf('round(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    floor(name) {\n        this[privatesProperty].left = sprintf.sprintf('floor(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {String} name\n     * @returns OpenDataQuery\n     */\n    ceiling(name) {\n        this[privatesProperty].left = sprintf.sprintf('ceil(%s)',name);\n        return this;\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    notEqual(value) {\n        this[privatesProperty].op = 'ne';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    greaterThan(value) {\n        this[privatesProperty].op = 'gt';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    greaterOrEqual(value) {\n        this[privatesProperty].op = 'ge';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    lowerThan(value) {\n        this[privatesProperty].op = 'lt';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {*} value\n     * @returns OpenDataQuery\n     */\n    lowerOrEqual(value) {\n        this[privatesProperty].op = 'le';this[privatesProperty].right = value; return this.append();\n    }\n\n    /**\n     * @param {Array} values\n     * @returns OpenDataQuery\n     */\n    in(values) {\n        this[privatesProperty].op = 'in';this[privatesProperty].right = values; return this.append();\n    }\n\n    /**\n     * @param {Array} values\n     * @returns OpenDataQuery\n     */\n    notIn(values) {\n        this[privatesProperty].op = 'nin';this[privatesProperty].right = values; return this.append();\n    }\n}\n"]}