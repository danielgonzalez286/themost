{"version":3,"sources":["utils.es6"],"names":["QueryExpression","_","convertTimezone","tz","m","match","parseInt","zeroPad","number","length","toString","dateToString","date","timeZone","dt","Date","setTime","getTime","getTimezoneOffset","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","bufferToString","buffer","hex","err","i","byte","objectToValues","obj","values","key","hasOwnProperty","value","push","escapeId","escape","join","arrayToList","array","map","v","Array","isArray","val","forbidQualified","replace","STR_ESCAPE_REGEXP","stringifyObjects","undefined","Buffer","isBuffer","s","format","sql","concat","index","SqlUtils","args","prototype","slice","call","arguments","TypeError","apply","QueryUtils","entity","create","fields","q","select","insert","update","delete"],"mappings":"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","file":"utils.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport {QueryExpression} from './query';\nimport _ from 'lodash';\n/**\n * SQL Escape global function\n */\n/**\n * @param {string} tz\n */\n\nfunction convertTimezone(tz) {\n    if (tz === \"Z\") return 0;\n\n    const m = tz.match(/([+\\-\\s])(\\d\\d):?(\\d\\d)?/);\n    if (m) {\n        return (m[1] === '-' ? -1 : 1) * (parseInt(m[2], 10) + ((m[3] ? parseInt(m[3], 10) : 0) / 60)) * 60;\n    }\n    return false;\n}\n\nfunction zeroPad(number, length) {\n    number = number.toString();\n    while (number.length < length) {\n        number = '0' + number;\n    }\n    return number;\n}\n\nfunction dateToString(date, timeZone) {\n    const dt = new Date(date);\n\n    if (timeZone !== 'local') {\n        const tz = convertTimezone(timeZone);\n        dt.setTime(dt.getTime() + (dt.getTimezoneOffset() * 60000));\n        if (tz !== false) {\n            dt.setTime(dt.getTime() + (tz * 60000));\n        }\n    }\n\n    const year   = dt.getFullYear();\n    const month  = zeroPad(dt.getMonth() + 1, 2);\n    const day    = zeroPad(dt.getDate(), 2);\n    const hour   = zeroPad(dt.getHours(), 2);\n    const minute = zeroPad(dt.getMinutes(), 2);\n    const second = zeroPad(dt.getSeconds(), 2);\n    const millisecond = zeroPad(dt.getMilliseconds(), 3);\n\n    return year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second + '.' + millisecond;\n}\n\nfunction bufferToString(buffer) {\n    let hex = '';\n    try {\n        hex = buffer.toString('hex');\n    } catch (err) {\n        // node v0.4.x does not support hex / throws unknown encoding error\n        for (let i = 0; i < buffer.length; i++) {\n            const byte = buffer[i];\n            hex += zeroPad(byte.toString(16));\n        }\n    }\n\n    return \"X'\" + hex+ \"'\";\n}\n\nfunction objectToValues(obj, timeZone) {\n    const values = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const value = obj[key];\n            if(typeof value === 'function') {\n                continue;\n            }\n            values.push(escapeId(key) + ' = ' + escape(value, true, timeZone));\n        }\n    }\n    return values.join(', ');\n}\n\nfunction arrayToList(array, timeZone) {\n    return array.map(function(v) {\n        if (Array.isArray(v)) return '(' + arrayToList(v, timeZone) + ')';\n        return escape(v, true, timeZone);\n    }).join(', ');\n}\n\nfunction escapeId(val, forbidQualified) {\n    if (Array.isArray(val)) {\n        return val.map(function(v) {\n            return escapeId(v, forbidQualified);\n        }).join(', ');\n    }\n\n    if (forbidQualified) {\n        return '`' + val.replace(/`/g, '``') + '`';\n    }\n    return '`' + val.replace(/`/g, '``').replace(/\\./g, '`.`') + '`';\n}\n\nconst STR_ESCAPE_REGEXP = /[\\0\\n\\r\\b\\t\\\\'\"\\x1a]/g;\n\nfunction escape(val, stringifyObjects, timeZone) {\n    if (val === undefined || val === null) {\n        return 'NULL';\n    }\n\n    switch (typeof val) {\n    case 'boolean': return (val) ? 'true' : 'false';\n    case 'number': return val+'';\n    }\n\n    if (val instanceof Date) {\n        val = dateToString(val, timeZone || 'local');\n    }\n\n    if (Buffer.isBuffer(val)) {\n        return bufferToString(val);\n    }\n\n    if (_.isArray(val)) {\n        return arrayToList(val, timeZone);\n    }\n\n    if (typeof val === 'object') {\n        if (stringifyObjects) {\n            val = val.toString();\n        } else {\n            return objectToValues(val, timeZone);\n        }\n    }\n    val = val.replace(STR_ESCAPE_REGEXP, function(s) {\n        switch(s) {\n        case \"\\0\": return \"\\\\0\";\n        case \"\\n\": return \"\\\\n\";\n        case \"\\r\": return \"\\\\r\";\n        case \"\\b\": return \"\\\\b\";\n        case \"\\t\": return \"\\\\t\";\n        case \"\\x1a\": return \"\\\\Z\";\n        default: return \"\\\\\"+s;\n        }\n    });\n    return \"'\"+val+\"'\";\n}\n\nfunction format(sql, values, stringifyObjects, timeZone) {\n    values = values === null ? [] : [].concat(values);\n    let index = 0;\n    return sql.replace(/\\?\\??/g, function(match) {\n        if (index === values.length) {\n            return match;\n        }\n        const value = values[index++];\n        return match === '??'\n            ? escapeId(value)\n            : escape(value, stringifyObjects, timeZone);\n    });\n}\n/**\n * @class\n */\nexport class SqlUtils {\n    /**\n     * @static\n     * Escapes the given value and returns an equivalent string which is going to be used in SQL expressions.\n     * @param {*} val\n     * @returns {*}\n     */\n    static escape(val) {\n        return escape(val);\n    }\n    /**\n     * @static\n     * Formats the given SQL expression string and replaces parameters with the given parameters, if any.\n     * e.g. * SELECT * FROM User where username=? with values: ['user1'] etc.\n     * @param {string} sql\n     * @param {*...} values\n     * @returns {*}\n     */\n    static format(sql, values) {\n        const args = Array.prototype.slice.call(arguments, 1);\n        if (args.length===0)\n            return sql;\n        if (_.isArray(args) && args.length>1) {\n            throw new TypeError('Invalid arguments. Expected array only (for backward compatibility issues)')\n        }\n        return format(sql, args);\n    }\n\n    /**\n     * @static\n     * Formats the given SQL expression string and replaces parameters with the given parameters, if any.\n     * e.g. * SELECT * FROM User where username=? with values: ['user1'] etc.\n     * @param {string} sql\n     * @param {*...} values\n     * @returns {*}\n     */\n    static prepare(sql, values) {\n        return format.apply(this, Array.prototype.slice.call(arguments));\n    }\n\n}\n\n\nexport class QueryUtils {\n    /**\n     * Initializes a select query expression by specifying the entity name\n     * @param {string|*} entity - The name of the entity\n     */\n    static query(entity) {\n        return QueryExpression.create(entity);\n    }\n    /**\n     * Initializes a select query expression\n     * @param {*...} fields\n     */\n    static select(fields) {\n        const q = new QueryExpression();\n        return q.select.apply(q,fields);\n    }\n    /**\n     * Initializes an insert query expression\n     * @param {*} obj - The object to insert\n     */\n    static insert(obj) {\n        const q = new QueryExpression();\n        return q.insert(obj);\n    }\n\n    /**\n     * Initializes an update query expression\n     * @param {string|*} entity - The name of the entity\n     */\n    static update(entity) {\n        const q = new QueryExpression();\n        return q.update(entity);\n    }\n\n    /**\n     * Initializes a delete query expression\n     * @param {string} entity - The name of the entity\n     */\n    static delete(entity) {\n        const q = new QueryExpression();\n        return q.delete(entity);\n    }\n\n\n}"]}