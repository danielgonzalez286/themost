{"version":3,"sources":["formatter.es6"],"names":["SqlUtils","sprintf","_","QueryExpression","QueryField","Args","methodsProperty","Symbol","SqlFormatter","provider","settings","nameFormat","forceAlias","name","callable","notString","notFunction","test","hasOwnProperty","comparison","isNil","Date","concat","escape","compares","key","push","length","arr","i","ComparisonOperators","undefined","Error","escapedValue","join","obj","findKey","value","unquoted","escapeName","$name","valueOf","where","self","keys","property","propertyValue","formatWhere","separator","isArray","map","x","op","sql","isQueryField_","$eq","escapedProperty","$text","$search","$gt","$gte","$lt","$lte","$ne","$regex","$in","sq","assign","$select","format","$nin","fn","p1","args","argn","j","isComparison","f0","apply","formatComparison","replace","p0","pos","toString","$this","escapedEntity","entity","joins","$expand","filter","isObject","fields","$ref","entityRef","$as","$fixed","$distinct","table","forEach","$entity","$alias","joinType","$join","toUpperCase","$with","left","right","leftTable","rightTable","leftFields","rightFields","leftExpr","rightExpr","formatField","$where","$prepared","where1","$and","$group","formatGroupBy","$order","formatOrder","formatSelect","$take","$skip","escapeConstant","tableName","fieldNameExpression","f","$desc","$asc","a","$insert","obj1","props","prop","$update","$delete","useAlias","expr","alias","s","field","select","formatFieldEx","query","hasPaging","formatLimitSelect","formatInsert","formatUpdate","formatDelete","prototype","$indexOf","$indexof","$substr","$substring","$toLower","$tolower","$toUpper","$toupper","$dayOfMonth","$day","$minutes","$minute","$seconds","$second","$subtract","$sub","$multiply","$mul","$divide","$div","constructor"],"mappings":"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","file":"formatter.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport {SqlUtils} from './utils';\nimport sprintf from 'sprintf';\nimport _ from 'lodash';\nimport {QueryExpression,QueryField} from './query';\nimport {Args} from \"@themost/common/utils\";\n\nconst methodsProperty = Symbol('methods');\n\n/**\n * Initializes an SQL formatter class.\n * @class\n */\nexport class SqlFormatter {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this[methodsProperty] = { };\n        //\n        this.provider = null;\n        /**\n         * Gets or sets formatter settings\n         * @type {{nameFormat: string}|*}\n         */\n        this.settings = {\n            /**\n             * Gets or sets a format that is going to be applied in field expression e.g. AS [$1] or AS '$1'.\n             * @type {string}\n             */\n            nameFormat : '$1',\n            /**\n             * Gets or sets a boolean that indicates whether field aliases will forcibly be used even if field expression does not have any alias\n             * (e.g. SELECT Person.name as name or SELECT Person.name).\n             * @type {boolean}\n             */\n            forceAlias: false\n        }\n    }\n\n    /**\n     * @param {string} name\n     * @param {Function} callable\n     */\n    method(name, callable) {\n        Args.notString(name,'Name');\n        Args.notFunction(name,'Method');\n        if (/^\\$/.test(name)) {\n            this[methodsProperty][name] = callable;\n        }\n        else {\n            this[methodsProperty][`${name}`] = callable;\n        }\n    }\n    /**\n     * @param {string} name\n     */\n    hasMethod(name) {\n        if (/^\\$/.test(name)) {\n            return this[methodsProperty].hasOwnProperty(name);\n        }\n        else {\n            return this[methodsProperty].hasOwnProperty(`${{name}}`);\n        }\n    }\n\n    /**\n     * Formats a JSON comparison object to the equivalent sql expression eg. { $gt: 100} as >100, or { $in:[5, 8] } as IN {5,8} etc\n     * @param {*} comparison\n     * @returns {string}\n     */\n    formatComparison(comparison) {\n        if (_.isNil(comparison))\n            return '(%s IS NULL)';\n        if (typeof comparison === 'object')\n        {\n            if (comparison instanceof Date) {\n                return '(%s'.concat(sprintf.sprintf('=%s)',this.escape(comparison)));\n            }\n            const compares = [];\n            for(let key in comparison) {\n                if (comparison.hasOwnProperty(key))\n                    compares.push(key);\n            }\n            if (compares.length===0)\n                return '(%s IS NULL)';\n            else {\n                const arr = [];\n                for (let i = 0; i < compares.length; i++) {\n                    let key = compares[i];\n                    if (QueryExpression.ComparisonOperators[key]===undefined)\n                        throw new Error(sprintf.sprintf('Unknown operator %s.', key));\n                    const escapedValue = this.escape(comparison[key]);\n                    switch (key) {\n                    case '$eq': arr.push('(%s'.concat('=',escapedValue,')'));break;\n                    case '$lt': arr.push('(%s'.concat('<',escapedValue,')'));break;\n                    case '$lte': arr.push('(%s'.concat('<=',escapedValue,')'));break;\n                    case '$gt': arr.push('(%s'.concat('>',escapedValue,')'));break;\n                    case '$gte': arr.push('(%s'.concat('>=',escapedValue,')'));break;\n                    case '$ne': arr.push('(NOT %s'.concat('=',escapedValue,')'));break;\n                    case '$in': arr.push('(%s'.concat('(',escapedValue,'))'));break;\n                    case '$nin':arr.push('(NOT %s'.concat('(',escapedValue,'))'));break;\n                    }\n                }\n                //join expression\n                if (arr.length===1)\n                    return arr[0];\n                else if (arr.length>1) {\n                    return '('.concat(arr.join(' AND '),')');\n                }\n                else\n                    return '(%s IS NULL)';\n            }\n        }\n        else\n        {\n            return '(%s'.concat(sprintf.sprintf('=%s)',this.escape(comparison)));\n        }\n    }\n\n    isComparison(obj) {\n        const key = _.findKey(obj);\n        return (/^\\$(eq|ne|lt|lte|gt|gte|in|nin|text|regex)$/g.test(key));\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * @returns {string} - The equivalent SQL string value\n     */\n    escape(value, unquoted) {\n        if (_.isNil(value))\n            return SqlUtils.escape(null);\n\n        if (typeof value === 'object')\n        {\n            //add an exception for Date object\n            if (value instanceof Date)\n                return SqlUtils.escape(value);\n            if (value.hasOwnProperty('$name'))\n                return this.escapeName(value.$name);\n        }\n        if (unquoted)\n            return value.valueOf();\n        else\n            return SqlUtils.escape(value);\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * returns {string} - The equivalent SQL string value\n     */\n    escapeConstant(value, unquoted) {\n        return this.escape(value,unquoted);\n    }\n\n    /**\n     * Formats a where expression object and returns the equivalen SQL string expression.\n     * @param {*} where - An object that represents the where expression object to be formatted.\n     * @returns {string|*}\n     */\n    formatWhere(where) {\n        const self = this;\n\n        //get expression (the first property of the object)\n        const keys = _.keys(where), property = keys[0];\n        if (typeof property === 'undefined')\n            return '';\n        //get property value\n        const propertyValue = where[property];\n        switch (property) {\n        case '$not':\n            return '(NOT ' + self.formatWhere(propertyValue) + ')';\n        case '$and':\n        case '$or':\n            const separator = property==='$or' ? ' OR ' : ' AND ';\n            //property value must be an array\n            if (!_.isArray(propertyValue))\n                throw new Error('Invalid query argument. A logical expression must contain one or more comparison expressions.');\n            if (propertyValue.length===0)\n                return '';\n            return '(' + _.map(propertyValue, function(x) {\n                return self.formatWhere(x);\n            }).join(separator) + ')';\n        default:\n            let comparison = propertyValue;\n            let op =  null, sql = null;\n            if (isQueryField_(comparison)) {\n                op = '$eq';\n                comparison = {$eq:propertyValue};\n            }\n            else if (typeof comparison === 'object' && comparison !== null) {\n                //get comparison operator\n                op = _.keys(comparison)[0];\n            }\n            else {\n                //set default comparison operator to equal\n                op = '$eq';\n                comparison = {$eq:propertyValue};\n            }\n            //escape property name\n            const escapedProperty = this.escapeName(property);\n            switch (op) {\n            case '$text':\n                return self.$text({ $name:property}, comparison.$text.$search);\n            case '$eq':\n                if (_.isNil(comparison.$eq))\n                    return sprintf.sprintf('(%s IS NULL)', escapedProperty);\n                return sprintf.sprintf('(%s=%s)', escapedProperty, self.escape(comparison.$eq));\n            case '$gt':\n                return sprintf.sprintf('(%s>%s)', escapedProperty, self.escape(comparison.$gt));\n            case '$gte':\n                return sprintf.sprintf('(%s>=%s)', escapedProperty, self.escape(comparison.$gte));\n            case '$lt':\n                return sprintf.sprintf('(%s<%s)', escapedProperty, self.escape(comparison.$lt));\n            case '$lte':\n                return sprintf.sprintf('(%s<=%s)', escapedProperty, self.escape(comparison.$lte));\n            case '$ne':\n                if (_.isNil(comparison.$ne))\n                    return sprintf.sprintf('(NOT %s IS NULL)', escapedProperty);\n                if (comparison!==null)\n                    return sprintf.sprintf('(NOT %s=%s)', escapedProperty, self.escape(comparison.$ne));\n                else\n                    return sprintf.sprintf('(NOT %s IS NULL)', escapedProperty);\n            case '$regex':\n                return this.$regex({ $name:property} , comparison.$regex);\n            case '$in':\n                if (_.isArray(comparison.$in)) {\n                    if (comparison.$in.length===0)\n                        return sprintf.sprintf('(%s IN (NULL))', escapedProperty);\n                    sql = '('.concat(escapedProperty,' IN (',_.map(comparison.$in, function (x) {\n                        return self.escape(x!==null ? x: null)\n                    }).join(', '),'))');\n                    return sql;\n                }\n                else if (typeof comparison.$in === 'object') {\n                    //try to validate if comparison.$in is a select query expression (sub-query support)\n                    let sq = _.assign(new QueryExpression(), comparison.$in);\n                    if (sq.$select) {\n                        //if sub query is a select expression\n                        return sprintf.sprintf('(%s IN (%s))', escapedProperty, self.format(sq));\n                    }\n                }\n                //otherwise throw error\n                throw new Error('Invalid query argument. An in statement must contain one or more values.');\n            case '$nin':\n                if (_.isArray(comparison.$nin)) {\n                    if (comparison.$nin.length===0)\n                        return sprintf.sprintf('(NOT %s IN (NULL))', escapedProperty);\n                    sql = '(NOT '.concat(escapedProperty,' IN (',_.map(comparison.$nin, function (x) {\n                        return self.escape(x!==null ? x: null)\n                    }).join(', '),'))');\n                    return sql;\n                }\n                else if (typeof comparison.$in === 'object') {\n                    //try to validate if comparison.$nin is a select query expression (sub-query support)\n                    let sq = _.assign(new QueryExpression(), comparison.$in);\n                    if (sq.$select) {\n                        //if sub query is a select expression\n                        return sprintf.sprintf('(NOT %s IN (%s))', escapedProperty, self.format(sq));\n                    }\n                }\n                //otherwise throw error\n                throw new Error('Invalid query argument. An in statement must contain one or more values.');\n            default :\n                //search if current operator (arithmetic, evaluation etc) exists as a formatter function (e.g. function $add(p1,p2) { ... } )\n                //in this case the first parameter is the defined property e.g. Price\n                // and the property value contains an array of all others parameters (if any) and the comparison operator\n                // e.g. { Price: { $add: [5, { $gt:100} ]} } where we are trying to find elements that meet the following query expression: (Price+5)>100\n                // The identifier <Price> is the first parameter, the constant 5 is the second\n                const fn = this[op], p1 = comparison[op];\n                if (typeof fn === 'function')\n                {\n                    const args = [];\n                    let argn = null;\n                    //push identifier\n                    args.push({ $name:property });\n                    if (_.isArray(p1)) {\n                        //push other parameters\n                        for (let j = 0; j < p1.length-1; j++) {\n                            args.push(p1[j]);\n                        }\n                        //get comparison argument (last item of the arguments' array)\n                        argn = p1[p1.length-1];\n                    }\n                    else {\n                        if (self.isComparison(p1)) {\n                            argn = p1;\n                        }\n                        else {\n                            //get comparison argument (equal)\n                            argn = { $eq: p1.valueOf() };\n                        }\n\n                    }\n                    //call formatter function\n                    const f0 = fn.apply(this, args);\n                    return self.formatComparison(argn).replace(/%s/g, f0.replace('$','\\$'));\n                }\n                else {\n                    //equal expression\n                    if (typeof p1 !== 'undefined' && p1!==null)\n                        return sprintf.sprintf('(%s=%s)', property, self.escape(p1));\n                    else\n                        return sprintf.sprintf('(%s IS NULL)', property);\n                }\n\n            }\n        }\n    }\n\n    /**\n     * Implements startsWith(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $startswith(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'^%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements endsWith(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $endswith(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s$$\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements regular expression formatting.\n     * @param {*} p0\n     * @param {string|*} p1\n     * @returns {string}\n     */\n    $regex(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements length(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $length(p0) {\n        return sprintf.sprintf('LEN(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements trim(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $trim(p0) {\n        return sprintf.sprintf('TRIM(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements concat(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $concat(p0, p1) {\n        return sprintf.sprintf('CONCAT(%s,%s)', this.escape(p0),  this.escape(p1));\n    }\n\n    /**\n     * Implements indexOf(str,substr) expression formatter.\n     * @param {string} p0 The source string\n     * @param {string} p1 The string to search for\n     * @returns {string}\n     */\n    $indexof(p0, p1) {\n        return sprintf.sprintf('LOCATE(%s,%s)', this.escape(p1), this.escape(p0));\n    }\n\n    /**\n     * Implements substring(str,pos) expression formatter.\n     * @param {String} p0 The source string\n     * @param {Number} pos The starting position\n     * @param {Number=} length The length of the resulted string\n     * @returns {string}\n     */\n    $substring(p0, pos, length) {\n        if (length)\n            return sprintf.sprintf('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\n        else\n            return sprintf.sprintf('SUBSTRING(%s,%s)', this.escape(p0), pos.valueOf()+1);\n    }\n\n    /**\n     * Implements lower(str) expression formatter.\n     * @param {String} p0\n     * @returns {string}\n     */\n    $tolower(p0) {\n        return sprintf.sprintf('LOWER(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements upper(str) expression formatter.\n     * @param {String} p0\n     * @returns {string}\n     */\n    $toupper(p0) {\n        return sprintf.sprintf('UPPER(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $contains(p0, p1) {\n        return this.$text(p0, p1);\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {string|*} p0\n     * @param {string|*} p1\n     * @returns {string}\n     */\n    $text(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        if (p1.valueOf().toString().length===0)\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    $day(p0) { return sprintf.sprintf('DAY(%s)', this.escape(p0)); }\n    $month(p0) { return sprintf.sprintf('MONTH(%s)', this.escape(p0)); }\n    $year(p0) { return sprintf.sprintf('YEAR(%s)', this.escape(p0)); }\n    $hour(p0) { return sprintf.sprintf('HOUR(%s)', this.escape(p0)); }\n    $minute(p0) { return sprintf.sprintf('MINUTE(%s)', this.escape(p0)); }\n    $second(p0) { return sprintf.sprintf('SECOND(%s)', this.escape(p0)); }\n\n    $date(p0) {\n        return sprintf.sprintf('DATE(%s)', this.escape(p0));\n    }\n\n    $floor(p0) { return sprintf.sprintf('FLOOR(%s)', this.escape(p0)); }\n    $ceiling(p0) { return sprintf.sprintf('CEILING(%s)', this.escape(p0)); }\n\n    /**\n     * Implements round(a) expression formatter.\n     * @param {*} p0\n     * @param {*=} p1\n     * @returns {string}\n     */\n    $round(p0, p1) {\n        if (_.isNil(p1))\n            p1 = 0;\n        return sprintf.sprintf('ROUND(%s,%s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements a + b expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $add(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s + %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Validates whether the given parameter is a field object or not.\n     * @param obj\n     * @returns {boolean}\n     */\n    isField(obj) {\n        if (obj===null || typeof obj==='undefined')\n            return false;\n        if (typeof obj === 'object')\n            if (obj.hasOwnProperty('$name'))\n                return true;\n        return false;\n    }\n\n    /**\n     * Implements a - b expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $sub(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s - %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements a * b expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $mul(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s * %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a / b] expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $div(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s / %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a mod b] expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $mod(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s % %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a & b] bitwise and expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $bit(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s & %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     *\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatSelect(obj) {\n        const $this = this;\n        let sql = '';\n        let escapedEntity;\n        if (_.isNil(obj.$select))\n            throw new Error('Select expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$select);\n        let joins = [];\n        if (_.isArray(obj.$expand)) {\n            joins=_.filter(obj.$expand, (x)=> {\n                return _.isObject(x);\n            });\n        }\n        else if (_.isObject(obj.$expand)) {\n            joins.push(obj.$expand);\n        }\n        //get entity fields\n        const fields = obj.fields();\n        //if fields is not an array\n        if (!_.isArray(fields))\n            throw new Error('Select expression does not contain any fields or the collection of fields is of the wrong type.');\n\n        //validate entity reference (if any)\n        if (obj.$ref && obj.$ref[entity]) {\n            const entityRef = obj.$ref[entity];\n            //escape entity ref\n            escapedEntity = entityRef.$as ?  $this.escapeName(entityRef.name) + ' AS ' + $this.escapeName(entityRef.$as) : $this.escapeName(entityRef.name);\n        }\n        else {\n            //escape entity name\n            escapedEntity = $this.escapeName(entity)\n        }\n        //add basic SELECT statement\n        if (obj.$fixed) {\n            sql = sql.concat('SELECT * FROM (SELECT ', _.map(fields, function(x) {\n                return $this.format(x,'%f');\n            }).join(', '), ') ', escapedEntity);\n        }\n        else {\n            sql = sql.concat(obj.$distinct ? 'SELECT DISTINCT ' : 'SELECT ', _.map(fields, function(x) {\n                return $this.format(x,'%f');\n            }).join(', '), ' FROM ', escapedEntity);\n        }\n\n        let table;\n\n        //add join if any\n        _.forEach(joins, function(x) {\n            if (x.$entity instanceof QueryExpression) {\n                //get on statement (the join comparison)\n                sql = sql.concat(sprintf.sprintf(' INNER JOIN (%s)', $this.format(x.$entity)));\n                //add alias\n                if (x.$entity.$alias)\n                    sql = sql.concat(' AS ').concat($this.escapeName(x.$entity.$alias));\n            }\n            else {\n                //get join table name\n                table = _.findKey(x.$entity);\n                //get on statement (the join comparison)\n                const joinType = (x.$entity.$join || 'inner').toUpperCase();\n                sql = sql.concat(' '+ joinType + ' JOIN ').concat($this.escapeName(table));\n                //add alias\n                if (x.$entity.$as)\n                    sql = sql.concat(' AS ').concat($this.escapeName(x.$entity.$as));\n            }\n            if (_.isArray(x.$with))\n            {\n                if (x.$with.length!==2)\n                    throw new Error('Invalid join comparison expression.');\n\n                //get left and right expression\n                const left = x.$with[0];\n\n                const right = x.$with[1];\n\n                let leftTable =  entity;\n                let rightTable = table;\n\n                if (typeof left === 'object') {\n                    leftTable = _.findKey(left);\n                }\n                if (typeof right === 'object') {\n                    rightTable = _.findKey(right);\n                }\n                const leftFields =[];\n                const rightFields =[];\n                leftFields.push.apply(leftFields, _.isArray(left[leftTable]) ? left[leftTable]: [left[leftTable]]);\n                rightFields.push.apply(rightFields, _.isArray(right[rightTable]) ? right[rightTable]: [right[rightTable]]);\n\n                for (let i = 0; i < leftFields.length; i++)\n                {\n                    let leftExpr = null, rightExpr = null;\n                    if (typeof leftFields[i] === 'object')\n                        leftExpr = leftFields[i];\n                    else {\n                        leftExpr = {};\n                        leftExpr[leftTable] = leftFields[i];\n                    }\n                    if (typeof rightFields[i] === 'object')\n                        rightExpr = rightFields[i];\n                    else {\n                        rightExpr = {};\n                        rightExpr[rightTable] = rightFields[i];\n                    }\n                    sql = sql.concat((i===0) ? ' ON ' : ' AND ', $this.formatField(leftExpr), '=',  $this.formatField(rightExpr));\n                }\n            }\n            else {\n                sql = sql.concat(' ON ', $this.formatWhere(x.$with));\n            }\n        });\n        //add WHERE statement if any\n        if (_.isObject(obj.$where))\n        {\n            if (_.isObject(obj.$prepared)) {\n                const where1 = { $and: [obj.$where, obj.$prepared] };\n                sql = sql.concat(' WHERE ',this.formatWhere(where1));\n            }\n            else {\n                sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n            }\n\n        }\n        else {\n            if (_.isObject(obj.$prepared))\n                sql = sql.concat(' WHERE ',this.formatWhere(obj.$prepared));\n        }\n\n        if (_.isObject(obj.$group))\n            sql = sql.concat(this.formatGroupBy(obj.$group));\n\n        if (_.isObject(obj.$order))\n            sql = sql.concat(this.formatOrder(obj.$order));\n\n        //finally return statement\n        return sql;\n    }\n\n    /**\n     *\n     * @param {QueryExpression} obj\n     * @returns {string}\n     */\n    formatLimitSelect(obj) {\n\n        let sql=this.formatSelect(obj);\n        if (obj.$take) {\n            if (obj.$skip)\n            //add limit and skip records\n                sql= sql.concat(' LIMIT ', obj.$skip.toString() ,', ',obj.$take.toString());\n            else\n            //add only limit\n                sql= sql.concat(' LIMIT ',  obj.$take.toString());\n        }\n        return sql;\n    }\n\n    formatField(obj) {\n        const self = this;\n        if (obj===null)\n            return '';\n        if (typeof obj === 'string')\n            return obj;\n        if (_.isArray(obj)) {\n            return _.map(obj, function(x) {\n                return x.valueOf();\n            }).join(', ');\n        }\n        if (typeof obj === 'object') {\n            //if field is a constant e.g. { $value:1000 }\n            if (obj.hasOwnProperty('$value'))\n                return this.escapeConstant(obj['$value']);\n            //get table name\n            const tableName = _.findKey(obj);\n            let fields = [];\n            if (!_.isArray(obj[tableName])) {\n                fields.push(obj[tableName])\n            }\n            else {\n                fields = obj[tableName];\n            }\n            return _.map(fields, function(x) {\n                if (QueryField.fieldNameExpression.test(x.valueOf()))\n                    return self.escapeName(tableName.concat('.').concat(x.valueOf()));\n                else\n                    return self.escapeName(x.valueOf());\n            }).join(', ');\n        }\n    }\n\n    /**\n     * Formats a order object to the equivalent SQL statement\n     * @param obj\n     * @returns {string}\n     */\n    formatOrder(obj) {\n        const self = this;\n        if (!_.isArray(obj))\n            return '';\n        const sql = _.map(obj, function(x)\n        {\n            const f = x.$desc ? x.$desc : x.$asc;\n            if (typeof f === 'undefined' || f===null)\n                throw new Error('An order by object must have either ascending or descending property.');\n            if (_.isArray(f)) {\n                return _.map(f, function(a) {\n                    return self.format(a,'%ff').concat(x.$desc ? ' DESC': ' ASC');\n                }).join(', ');\n            }\n            return self.format(f,'%ff').concat(x.$desc ? ' DESC': ' ASC');\n        }).join(', ');\n        if (sql.length>0)\n            return ' ORDER BY '.concat(sql);\n        return sql;\n    }\n\n    /**\n     * Formats a group by object to the equivalent SQL statement\n     * @param obj {Array}\n     * @returns {string}\n     */\n    formatGroupBy(obj) {\n        const self = this;\n        if (!_.isArray(obj))\n            return '';\n        const arr = [];\n        _.forEach(obj, function(x) {\n            arr.push(self.format(x, '%ff'));\n        });\n        const sql = arr.join(', ');\n        if (sql.length>0)\n            return ' GROUP BY '.concat(sql);\n        return sql;\n    }\n\n    /**\n     * Formats an insert query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatInsert(obj) {\n        const self= this;\n        let sql = '';\n        if (_.isNil(obj.$insert))\n            throw new Error('Insert expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$insert);\n        //get entity fields\n        const obj1 = obj.$insert[entity];\n        const props = [];\n        for(const prop in obj1)\n            if (obj1.hasOwnProperty(prop))\n                props.push(prop);\n        sql = sql.concat('INSERT INTO ', self.escapeName(entity), '(' , _.map(props, function(x) { return self.escapeName(x); }).join(', '), ') VALUES (',\n            _.map(props, function(x)\n            {\n                const value = obj1[x];\n                return self.escape(value!==null ? value: null);\n            }).join(', ') ,')');\n        return sql;\n    }\n\n    /**\n     * Formats an update query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatUpdate(obj) {\n        const self= this;\n        let sql = '';\n        if (!_.isObject(obj.$update))\n            throw new Error('Update expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$update);\n        //get entity fields\n        const obj1 = obj.$update[entity];\n        const props = [];\n        for(const prop in obj1)\n            if (obj1.hasOwnProperty(prop))\n                props.push(prop);\n        //add basic INSERT statement\n        sql = sql.concat('UPDATE ', self.escapeName(entity), ' SET ',\n            _.map(props, function(x)\n            {\n                const value = obj1[x];\n                return self.escapeName(x).concat('=', self.escape(value!==null ? value: null));\n            }).join(', '));\n        if (_.isObject(obj.$where))\n            sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n        return sql;\n    }\n\n    /**\n     * Formats a delete query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatDelete(obj) {\n        let sql = '';\n        if (obj.$delete===null)\n            throw new Error('Delete expression cannot be empty at this context.');\n        //get entity name\n        const entity = obj.$delete;\n        //add basic INSERT statement\n        sql = sql.concat('DELETE FROM ', this.escapeName(entity));\n        if (_.isObject(obj.$where))\n            sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n        return sql;\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string')\n            return name.replace(/(\\w+)$|^(\\w+)$/g, this.settings.nameFormat);\n        return name;\n    }\n\n    /**\n     * @param obj {QueryField}\n     * @param format {string}\n     * @returns {string|*}\n     */\n    formatFieldEx(obj, format) {\n\n        if ((typeof obj === 'undefined') || (obj===null))\n            return null;\n        if (!isQueryField_(obj))\n            throw new Error('Invalid argument. An instance of QueryField class is expected.');\n        //get property\n        let prop = _.findKey(obj);\n        if (prop===null)\n            return null;\n        const useAlias = (format==='%f');\n        if (prop==='$name') {\n            return (this.settings.forceAlias && useAlias) ? this.escapeName(obj.$name).concat(' AS ', this.escapeName(obj.name())) : this.escapeName(obj.$name);\n        }\n        else {\n            const expr = obj[prop];\n            if (expr===null)\n                throw new Error('Field definition cannot be empty while formatting.');\n            if (typeof expr === 'string') {\n                return useAlias ? this.escapeName(expr).concat(' AS ', this.escapeName(prop)) : expr;\n            }\n            //get aggregate expression\n            const alias = prop;\n            prop = _.findKey(expr);\n            const name = expr[prop];\n            let s;\n            switch (prop) {\n            case '$count':\n                s= sprintf.sprintf('COUNT(%s)',this.escapeName(name));\n                break;\n            case '$min':\n                s= sprintf.sprintf('MIN(%s)',this.escapeName(name));\n                break;\n            case '$max':\n                s= sprintf.sprintf('MAX(%s)',this.escapeName(name));\n                break;\n            case '$avg':\n                s= sprintf.sprintf('AVG(%s)',this.escapeName(name));\n                break;\n            case '$sum':\n                s= sprintf.sprintf('SUM(%s)',this.escapeName(name));\n                break;\n            case '$value':\n                s= this.escapeConstant(name);\n                break;\n            default :\n                const fn = this[prop];\n                if (typeof fn === 'function') {\n                    /**\n                         * get method arguments\n                         * @type {Array}\n                         */\n                    const args = expr[prop];\n                    s = fn.apply(this,args);\n                }\n                else\n                    throw new Error('The specified function is not yet implemented.');\n            }\n            return useAlias ? s.concat(' AS ', this.escapeName(alias)) : s;\n        }\n    }\n\n    /**\n     * Formats a query expression and returns the SQL equivalent string\n     * @param obj {QueryExpression|*}\n     * @param s {string=}\n     * @returns {string|*}\n     */\n    format(obj, s) {\n        if (obj===null)\n            return null;\n        //if a format is defined\n        if (s!==undefined)\n        {\n            if ((s ==='%f') || (s ==='%ff'))\n            {\n                //field formatting\n                let field = new QueryField();\n                if (typeof obj === 'string')\n                    field.select(obj);\n                else\n                    field = _.assign(new QueryField(), obj);\n                return this.formatFieldEx(field, s);\n            }\n            else if (s==='%o') {\n                if (obj instanceof QueryExpression)\n                    return this.formatOrder(obj.$order);\n                return this.formatOrder(obj);\n            }\n        }\n\n        /**\n         * @type {QueryExpression}\n         */\n        let query = null;\n        //cast object to QueryExpression\n        if (obj instanceof QueryExpression)\n            query = obj;\n        else\n            query = _.assign(new QueryExpression(), obj);\n        //format query\n        if (_.isObject(query.$select)) {\n            if (!query.hasPaging())\n                return this.formatSelect(query);\n            else\n                return this.formatLimitSelect(query);\n        }\n        else if (_.isObject(query.$insert))\n            return this.formatInsert(query);\n        else if (_.isObject(query.$update))\n            return this.formatUpdate(query);\n        else if (query.$delete!==null)\n            return this.formatDelete(query);\n        else if (query.$where!==null)\n            return this.formatWhere(query.$where);\n        else\n            return null;\n\n    }\n}\n\nSqlFormatter.prototype.$indexOf = SqlFormatter.prototype.$indexof;\n\nSqlFormatter.prototype.$substr = SqlFormatter.prototype.$substring;\n\nSqlFormatter.prototype.$toLower = SqlFormatter.prototype.$tolower;\nSqlFormatter.prototype.$toUpper = SqlFormatter.prototype.$toupper;\nSqlFormatter.prototype.$dayOfMonth = SqlFormatter.prototype.$day;\nSqlFormatter.prototype.$minutes = SqlFormatter.prototype.$minute;\nSqlFormatter.prototype.$seconds = SqlFormatter.prototype.$second;\n\nSqlFormatter.prototype.$subtract = SqlFormatter.prototype.$sub;\n\nSqlFormatter.prototype.$multiply = SqlFormatter.prototype.$mul;\n\nSqlFormatter.prototype.$divide = SqlFormatter.prototype.$div;\n\nfunction isQueryField_(obj) {\n    if (_.isNil(obj))\n        return false;\n    return (obj.constructor) && (obj.constructor.name === 'QueryField');\n}"]}