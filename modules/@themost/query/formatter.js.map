{"version":3,"sources":["formatter.es6"],"names":["SqlUtils","sprintf","_","QueryExpression","QueryField","Args","methodsProperty","Symbol","SqlFormatter","provider","settings","nameFormat","forceAlias","name","callable","notString","notFunction","test","hasOwnProperty","comparison","isNil","Date","concat","escape","compares","key","push","length","arr","op","i","ComparisonOperators","undefined","Error","escapedValue","join","obj","findKey","value","unquoted","escapeName","$name","valueOf","where","self","keys","property","propertyValue","formatWhere","separator","isArray","map","x","sql","isQueryField_","$eq","escapedProperty","$text","$search","$gt","$gte","$lt","$lte","$ne","$regex","$in","sq","assign","$select","format","$nin","fn","p0","p1","args","argn","j","isComparison","f0","apply","formatComparison","replace","pos","toString","$this","escapedEntity","entity","joins","$expand","filter","isObject","fields","$ref","entityRef","$as","$fixed","$distinct","table","forEach","$entity","$alias","joinType","$join","toUpperCase","$with","left","right","leftTable","rightTable","leftFields","rightFields","leftExpr","rightExpr","formatField","$where","$prepared","where1","$and","$group","formatGroupBy","$order","formatOrder","formatSelect","$take","$skip","escapeConstant","tableName","fieldNameExpression","f","$desc","$asc","a","$insert","obj1","props","prop","$update","$delete","useAlias","expr","alias","s","field","select","formatFieldEx","query","hasPaging","formatLimitSelect","formatInsert","formatUpdate","formatDelete","prototype","$indexOf","$indexof","$substr","$substring","$toLower","$tolower","$toUpper","$toupper","$dayOfMonth","$day","$minutes","$minute","$seconds","$second","$subtract","$sub","$multiply","$mul","$divide","$div","constructor"],"mappings":"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","file":"formatter.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {SqlUtils} from './utils';\nimport sprintf from 'sprintf';\nimport {_} from 'lodash';\nimport {QueryExpression,QueryField} from './query';\nimport {Args} from \"@themost/common/utils\";\n\nconst methodsProperty = Symbol('methods');\n\n/**\n * Initializes an SQL formatter class.\n * @class\n */\nexport class SqlFormatter {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        this[methodsProperty] = { };\n        //\n        this.provider = null;\n        /**\n         * Gets or sets formatter settings\n         * @type {{nameFormat: string}|*}\n         */\n        this.settings = {\n            /**\n             * Gets or sets a format that is going to be applied in field expression e.g. AS [$1] or AS '$1'.\n             * @type {string}\n             */\n            nameFormat : '$1',\n            /**\n             * Gets or sets a boolean that indicates whether field aliases will forcibly be used even if field expression does not have any alias\n             * (e.g. SELECT Person.name as name or SELECT Person.name).\n             * @type {boolean}\n             */\n            forceAlias: false\n        }\n    }\n\n    /**\n     * @param {string} name\n     * @param {Function} callable\n     */\n    method(name, callable) {\n        Args.notString(name,'Name');\n        Args.notFunction(name,'Method');\n        if (/^\\$/.test(name)) {\n            this[methodsProperty][name] = callable;\n        }\n        else {\n            this[methodsProperty][`${name}`] = callable;\n        }\n    }\n    /**\n     * @param {string} name\n     */\n    hasMethod(name) {\n        if (/^\\$/.test(name)) {\n            return this[methodsProperty].hasOwnProperty(name);\n        }\n        else {\n            return this[methodsProperty].hasOwnProperty(`${{name}}`);\n        }\n    }\n\n    /**\n     * Formats a JSON comparison object to the equivalent sql expression eg. { $gt: 100} as >100, or { $in:[5, 8] } as IN {5,8} etc\n     * @param {*} comparison\n     * @returns {string}\n     */\n    formatComparison(comparison) {\n        if (_.isNil(comparison))\n            return '(%s IS NULL)';\n        if (typeof comparison === 'object')\n        {\n            if (comparison instanceof Date) {\n                return '(%s'.concat(sprintf.sprintf('=%s)',this.escape(comparison)));\n            }\n            const compares = [];\n            for(let key in comparison) {\n                if (comparison.hasOwnProperty(key))\n                    compares.push(key);\n            }\n            if (compares.length===0)\n                return '(%s IS NULL)';\n            else {\n                const arr = [], op = '=';\n                for (let i = 0; i < compares.length; i++) {\n                    let key = compares[i];\n                    if (QueryExpression.ComparisonOperators[key]===undefined)\n                        throw new Error(sprintf.sprintf('Unknown operator %s.', key));\n                    const escapedValue = this.escape(comparison[key]);\n                    switch (key) {\n                        case '$eq': arr.push('(%s'.concat('=',escapedValue,')'));break;\n                        case '$lt': arr.push('(%s'.concat('<',escapedValue,')'));break;\n                        case '$lte': arr.push('(%s'.concat('<=',escapedValue,')'));break;\n                        case '$gt': arr.push('(%s'.concat('>',escapedValue,')'));break;\n                        case '$gte': arr.push('(%s'.concat('>=',escapedValue,')'));break;\n                        case '$ne': arr.push('(NOT %s'.concat('=',escapedValue,')'));break;\n                        case '$in': arr.push('(%s'.concat('(',escapedValue,'))'));break;\n                        case '$nin':arr.push('(NOT %s'.concat('(',escapedValue,'))'));break;\n                    }\n                }\n                //join expression\n                if (arr.length===1)\n                    return arr[0];\n                else if (arr.length>1) {\n                    return '('.concat(arr.join(' AND '),')');\n                }\n                else\n                    return '(%s IS NULL)';\n            }\n        }\n        else\n        {\n            return '(%s'.concat(sprintf.sprintf('=%s)',this.escape(comparison)));\n        }\n    }\n\n    isComparison(obj) {\n        const key = _.findKey(obj);\n        return (/^\\$(eq|ne|lt|lte|gt|gte|in|nin|text|regex)$/g.test(key));\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * @returns {string} - The equivalent SQL string value\n     */\n    escape(value, unquoted) {\n        if (_.isNil(value))\n            return SqlUtils.escape(null);\n\n        if (typeof value === 'object')\n        {\n            //add an exception for Date object\n            if (value instanceof Date)\n                return SqlUtils.escape(value);\n            if (value.hasOwnProperty('$name'))\n                return this.escapeName(value.$name);\n        }\n        if (unquoted)\n            return value.valueOf();\n        else\n            return SqlUtils.escape(value);\n    }\n\n    /**\n     * Escapes an object or a value and returns the equivalent sql value.\n     * @param {*} value - A value that is going to be escaped for SQL statements\n     * @param {boolean=} unquoted - An optional value that indicates whether the resulted string will be quoted or not.\n     * returns {string} - The equivalent SQL string value\n     */\n    escapeConstant(value, unquoted) {\n        return this.escape(value,unquoted);\n    }\n\n    /**\n     * Formats a where expression object and returns the equivalen SQL string expression.\n     * @param {*} where - An object that represents the where expression object to be formatted.\n     * @returns {string|*}\n     */\n    formatWhere(where) {\n        const self = this;\n\n        //get expression (the first property of the object)\n        const keys = _.keys(where), property = keys[0];\n        if (typeof property === 'undefined')\n            return '';\n        //get property value\n        const propertyValue = where[property];\n        switch (property) {\n            case '$not':\n                return '(NOT ' + self.formatWhere(propertyValue) + ')';\n                break;\n            case '$and':\n            case '$or':\n                const separator = property==='$or' ? ' OR ' : ' AND ';\n                //property value must be an array\n                if (!_.isArray(propertyValue))\n                    throw new Error('Invalid query argument. A logical expression must contain one or more comparison expressions.');\n                if (propertyValue.length===0)\n                    return '';\n                return '(' + _.map(propertyValue, function(x) {\n                    return self.formatWhere(x);\n                }).join(separator) + ')';\n                break;\n            default:\n                let comparison = propertyValue;\n                let op =  null, sql = null;\n                if (isQueryField_(comparison)) {\n                    op = '$eq';\n                    comparison = {$eq:propertyValue};\n                }\n                else if (typeof comparison === 'object' && comparison !== null) {\n                    //get comparison operator\n                    op = _.keys(comparison)[0];\n                }\n                else {\n                    //set default comparison operator to equal\n                    op = '$eq';\n                    comparison = {$eq:propertyValue};\n                }\n                //escape property name\n                const escapedProperty = this.escapeName(property);\n                switch (op) {\n                    case '$text':\n                        return self.$text({ $name:property}, comparison.$text.$search);\n                    case '$eq':\n                        if (_.isNil(comparison.$eq))\n                            return sprintf.sprintf('(%s IS NULL)', escapedProperty);\n                        return sprintf.sprintf('(%s=%s)', escapedProperty, self.escape(comparison.$eq));\n                    case '$gt':\n                        return sprintf.sprintf('(%s>%s)', escapedProperty, self.escape(comparison.$gt));\n                    case '$gte':\n                        return sprintf.sprintf('(%s>=%s)', escapedProperty, self.escape(comparison.$gte));\n                    case '$lt':\n                        return sprintf.sprintf('(%s<%s)', escapedProperty, self.escape(comparison.$lt));\n                    case '$lte':\n                        return sprintf.sprintf('(%s<=%s)', escapedProperty, self.escape(comparison.$lte));\n                    case '$ne':\n                        if (_.isNil(comparison.$ne))\n                            return sprintf.sprintf('(NOT %s IS NULL)', escapedProperty);\n                        if (comparison!==null)\n                            return sprintf.sprintf('(NOT %s=%s)', escapedProperty, self.escape(comparison.$ne));\n                        else\n                            return sprintf.sprintf('(NOT %s IS NULL)', escapedProperty);\n                    case '$regex':\n                        return this.$regex({ $name:property} , comparison.$regex);\n                    case '$in':\n                        if (_.isArray(comparison.$in)) {\n                            if (comparison.$in.length===0)\n                                return sprintf.sprintf('(%s IN (NULL))', escapedProperty);\n                            sql = '('.concat(escapedProperty,' IN (',_.map(comparison.$in, function (x) {\n                                return self.escape(x!==null ? x: null)\n                            }).join(', '),'))');\n                            return sql;\n                        }\n                        else if (typeof comparison.$in === 'object') {\n                            //try to validate if comparison.$in is a select query expression (sub-query support)\n                            let sq = _.assign(new QueryExpression(), comparison.$in);\n                            if (sq.$select) {\n                                //if sub query is a select expression\n                                return sprintf.sprintf('(%s IN (%s))', escapedProperty, self.format(sq));\n                            }\n                        }\n                        //otherwise throw error\n                        throw new Error('Invalid query argument. An in statement must contain one or more values.');\n                    case '$nin':\n                        if (_.isArray(comparison.$nin)) {\n                            if (comparison.$nin.length===0)\n                                return sprintf.sprintf('(NOT %s IN (NULL))', escapedProperty);\n                            sql = '(NOT '.concat(escapedProperty,' IN (',_.map(comparison.$nin, function (x) {\n                                return self.escape(x!==null ? x: null)\n                            }).join(', '),'))');\n                            return sql;\n                        }\n                        else if (typeof comparison.$in === 'object') {\n                            //try to validate if comparison.$nin is a select query expression (sub-query support)\n                            let sq = _.assign(new QueryExpression(), comparison.$in);\n                            if (sq.$select) {\n                                //if sub query is a select expression\n                                return sprintf.sprintf('(NOT %s IN (%s))', escapedProperty, self.format(sq));\n                            }\n                        }\n                        //otherwise throw error\n                        throw new Error('Invalid query argument. An in statement must contain one or more values.');\n                    default :\n                        //search if current operator (arithmetic, evaluation etc) exists as a formatter function (e.g. function $add(p1,p2) { ... } )\n                        //in this case the first parameter is the defined property e.g. Price\n                        // and the property value contains an array of all others parameters (if any) and the comparison operator\n                        // e.g. { Price: { $add: [5, { $gt:100} ]} } where we are trying to find elements that meet the following query expression: (Price+5)>100\n                        // The identifier <Price> is the first parameter, the constant 5 is the second\n                        const fn = this[op], p0 = property, p1 = comparison[op];\n                        if (typeof fn === 'function')\n                        {\n                            const args = [];\n                            let argn = null;\n                            //push identifier\n                            args.push({ $name:property });\n                            if (_.isArray(p1)) {\n                                //push other parameters\n                                for (let j = 0; j < p1.length-1; j++) {\n                                    args.push(p1[j]);\n                                }\n                                //get comparison argument (last item of the arguments' array)\n                                argn = p1[p1.length-1];\n                            }\n                            else {\n                                if (self.isComparison(p1)) {\n                                    argn = p1;\n                                }\n                                else {\n                                    //get comparison argument (equal)\n                                    argn = { $eq: p1.valueOf() };\n                                }\n\n                            }\n                            //call formatter function\n                            const f0 = fn.apply(this, args);\n                            return self.formatComparison(argn).replace(/%s/g, f0.replace('$','\\$'));\n                        }\n                        else {\n                            //equal expression\n                            if (typeof p1 !== 'undefined' && p1!==null)\n                                return sprintf.sprintf('(%s=%s)', property, self.escape(p1));\n                            else\n                                return sprintf.sprintf('(%s IS NULL)', property);\n                        }\n\n                }\n        }\n    }\n\n    /**\n     * Implements startsWith(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $startswith(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'^%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements endsWith(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $endswith(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s$$\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements regular expression formatting.\n     * @param {*} p0\n     * @param {string|*} p1\n     * @returns {string}\n     */\n    $regex(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    /**\n     * Implements length(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $length(p0) {\n        return sprintf.sprintf('LEN(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements trim(a) expression formatter.\n     * @param {*} p0\n     * @returns {string}\n     */\n    $trim(p0) {\n        return sprintf.sprintf('TRIM(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements concat(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $concat(p0, p1) {\n        return sprintf.sprintf('CONCAT(%s,%s)', this.escape(p0),  this.escape(p1));\n    }\n\n    /**\n     * Implements indexOf(str,substr) expression formatter.\n     * @param {string} p0 The source string\n     * @param {string} p1 The string to search for\n     * @returns {string}\n     */\n    $indexof(p0, p1) {\n        return sprintf.sprintf('LOCATE(%s,%s)', this.escape(p1), this.escape(p0));\n    }\n\n    /**\n     * Implements substring(str,pos) expression formatter.\n     * @param {String} p0 The source string\n     * @param {Number} pos The starting position\n     * @param {Number=} length The length of the resulted string\n     * @returns {string}\n     */\n    $substring(p0, pos, length) {\n        if (length)\n            return sprintf.sprintf('SUBSTRING(%s,%s,%s)', this.escape(p0), pos.valueOf()+1, length.valueOf());\n        else\n            return sprintf.sprintf('SUBSTRING(%s,%s)', this.escape(p0), pos.valueOf()+1);\n    }\n\n    /**\n     * Implements lower(str) expression formatter.\n     * @param {String} p0\n     * @returns {string}\n     */\n    $tolower(p0) {\n        return sprintf.sprintf('LOWER(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements upper(str) expression formatter.\n     * @param {String} p0\n     * @returns {string}\n     */\n    $toupper(p0) {\n        return sprintf.sprintf('UPPER(%s)', this.escape(p0));\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $contains(p0, p1) {\n        return this.$text(p0, p1);\n    }\n\n    /**\n     * Implements contains(a,b) expression formatter.\n     * @param {string|*} p0\n     * @param {string|*} p1\n     * @returns {string}\n     */\n    $text(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '';\n        if (p1.valueOf().toString().length===0)\n            return '';\n        return sprintf.sprintf('(%s REGEXP \\'%s\\')', this.escape(p0), this.escape(p1, true));\n    }\n\n    $day(p0) { return sprintf.sprintf('DAY(%s)', this.escape(p0)); }\n    $month(p0) { return sprintf.sprintf('MONTH(%s)', this.escape(p0)); }\n    $year(p0) { return sprintf.sprintf('YEAR(%s)', this.escape(p0)); }\n    $hour(p0) { return sprintf.sprintf('HOUR(%s)', this.escape(p0)); }\n    $minute(p0) { return sprintf.sprintf('MINUTE(%s)', this.escape(p0)); }\n    $second(p0) { return sprintf.sprintf('SECOND(%s)', this.escape(p0)); }\n\n    $date(p0) {\n        return sprintf.sprintf('DATE(%s)', this.escape(p0));\n    }\n\n    $floor(p0) { return sprintf.sprintf('FLOOR(%s)', this.escape(p0)); }\n    $ceiling(p0) { return sprintf.sprintf('CEILING(%s)', this.escape(p0)); }\n\n    /**\n     * Implements round(a) expression formatter.\n     * @param {*} p0\n     * @param {*=} p1\n     * @returns {string}\n     */\n    $round(p0, p1) {\n        if (_.isNil(p1))\n            p1 = 0;\n        return sprintf.sprintf('ROUND(%s,%s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements a + b expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $add(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s + %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Validates whether the given parameter is a field object or not.\n     * @param obj\n     * @returns {boolean}\n     */\n    isField(obj) {\n        if (obj===null || typeof obj==='undefined')\n            return false;\n        if (typeof obj === 'object')\n            if (obj.hasOwnProperty('$name'))\n                return true;\n        return false;\n    }\n\n    /**\n     * Implements a - b expression formatter.\n     * @param {*} p0\n     * @param {*} p1\n     * @returns {string}\n     */\n    $sub(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s - %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements a * b expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $mul(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s * %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a / b] expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $div(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s / %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a mod b] expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $mod(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s % %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     * Implements [a & b] bitwise and expression formatter.\n     * @param p0 {*}\n     * @param p1 {*}\n     */\n    $bit(p0, p1) {\n        //validate params\n        if (_.isNil(p0) || _.isNil(p1))\n            return '0';\n        return sprintf.sprintf('(%s & %s)', this.escape(p0), this.escape(p1));\n    }\n\n    /**\n     *\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatSelect(obj) {\n        const $this = this;\n        let sql = '';\n        let escapedEntity;\n        if (_.isNil(obj.$select))\n            throw new Error('Select expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$select);\n        let joins = [];\n        if (_.isArray(obj.$expand)) {\n            joins=_.filter(obj.$expand, (x)=> {\n                return _.isObject(x);\n            });\n        }\n        else if (_.isObject(obj.$expand)) {\n            joins.push(obj.$expand);\n        }\n        //get entity fields\n        const fields = obj.fields();\n        //if fields is not an array\n        if (!_.isArray(fields))\n            throw new Error('Select expression does not contain any fields or the collection of fields is of the wrong type.');\n\n        //validate entity reference (if any)\n        if (obj.$ref && obj.$ref[entity]) {\n            const entityRef = obj.$ref[entity];\n            //escape entity ref\n            escapedEntity = entityRef.$as ?  $this.escapeName(entityRef.name) + ' AS ' + $this.escapeName(entityRef.$as) : $this.escapeName(entityRef.name);\n        }\n        else {\n            //escape entity name\n            escapedEntity = $this.escapeName(entity)\n        }\n        //add basic SELECT statement\n        if (obj.$fixed) {\n            sql = sql.concat('SELECT * FROM (SELECT ', _.map(fields, function(x) {\n                return $this.format(x,'%f');\n            }).join(', '), ') ', escapedEntity);\n        }\n        else {\n            sql = sql.concat(obj.$distinct ? 'SELECT DISTINCT ' : 'SELECT ', _.map(fields, function(x) {\n                return $this.format(x,'%f');\n            }).join(', '), ' FROM ', escapedEntity);\n        }\n\n        let table;\n\n        //add join if any\n        _.forEach(joins, function(x) {\n            if (x.$entity instanceof QueryExpression) {\n                //get on statement (the join comparison)\n                sql = sql.concat(sprintf.sprintf(' INNER JOIN (%s)', $this.format(x.$entity)));\n                //add alias\n                if (x.$entity.$alias)\n                    sql = sql.concat(' AS ').concat($this.escapeName(x.$entity.$alias));\n            }\n            else {\n                //get join table name\n                table = _.findKey(x.$entity);\n                //get on statement (the join comparison)\n                const joinType = (x.$entity.$join || 'inner').toUpperCase();\n                sql = sql.concat(' '+ joinType + ' JOIN ').concat($this.escapeName(table));\n                //add alias\n                if (x.$entity.$as)\n                    sql = sql.concat(' AS ').concat($this.escapeName(x.$entity.$as));\n            }\n            if (_.isArray(x.$with))\n            {\n                if (x.$with.length!==2)\n                    throw new Error('Invalid join comparison expression.');\n\n                //get left and right expression\n                const left = x.$with[0];\n\n                const right = x.$with[1];\n\n                let leftTable =  entity;\n                let rightTable = table;\n\n                if (typeof left === 'object') {\n                    leftTable = _.findKey(left);\n                }\n                if (typeof right === 'object') {\n                    rightTable = _.findKey(right);\n                }\n                const leftFields = left[leftTable], rightFields = right[rightTable];\n                for (let i = 0; i < leftFields.length; i++)\n                {\n                    let leftExpr = null, rightExpr = null;\n                    if (typeof leftFields[i] === 'object')\n                        leftExpr = leftFields[i];\n                    else {\n                        leftExpr = {};\n                        leftExpr[leftTable] = leftFields[i];\n                    }\n                    if (typeof rightFields[i] === 'object')\n                        rightExpr = rightFields[i];\n                    else {\n                        rightExpr = {};\n                        rightExpr[rightTable] = rightFields[i];\n                    }\n                    sql = sql.concat((i===0) ? ' ON ' : ' AND ', $this.formatField(leftExpr), '=',  $this.formatField(rightExpr));\n                }\n            }\n            else {\n                sql = sql.concat(' ON ', $this.formatWhere(x.$with));\n            }\n        });\n        //add WHERE statement if any\n        if (_.isObject(obj.$where))\n        {\n            if (_.isObject(obj.$prepared)) {\n                const where1 = { $and: [obj.$where, obj.$prepared] };\n                sql = sql.concat(' WHERE ',this.formatWhere(where1));\n            }\n            else {\n                sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n            }\n\n        }\n        else {\n            if (_.isObject(obj.$prepared))\n                sql = sql.concat(' WHERE ',this.formatWhere(obj.$prepared));\n        }\n\n        if (_.isObject(obj.$group))\n            sql = sql.concat(this.formatGroupBy(obj.$group));\n\n        if (_.isObject(obj.$order))\n            sql = sql.concat(this.formatOrder(obj.$order));\n\n        //finally return statement\n        return sql;\n    }\n\n    /**\n     *\n     * @param {QueryExpression} obj\n     * @returns {string}\n     */\n    formatLimitSelect(obj) {\n\n        let sql=this.formatSelect(obj);\n        if (obj.$take) {\n            if (obj.$skip)\n            //add limit and skip records\n                sql= sql.concat(' LIMIT ', obj.$skip.toString() ,', ',obj.$take.toString());\n            else\n            //add only limit\n                sql= sql.concat(' LIMIT ',  obj.$take.toString());\n        }\n        return sql;\n    }\n\n    formatField(obj) {\n        const self = this;\n        if (obj===null)\n            return '';\n        if (typeof obj === 'string')\n            return obj;\n        if (_.isArray(obj)) {\n            return _.map(obj, function(x) {\n                return x.valueOf();\n            }).join(', ');\n        }\n        if (typeof obj === 'object') {\n            //if field is a constant e.g. { $value:1000 }\n            if (obj.hasOwnProperty('$value'))\n                return this.escapeConstant(obj['$value']);\n            //get table name\n            const tableName = _.findKey(obj);\n            let fields = [];\n            if (!_.isArray(obj[tableName])) {\n                fields.push(obj[tableName])\n            }\n            else {\n                fields = obj[tableName];\n            }\n            return _.map(fields, function(x) {\n                if (QueryField.fieldNameExpression.test(x.valueOf()))\n                    return self.escapeName(tableName.concat('.').concat(x.valueOf()));\n                else\n                    return self.escapeName(x.valueOf());\n            }).join(', ');\n        }\n    }\n\n    /**\n     * Formats a order object to the equivalent SQL statement\n     * @param obj\n     * @returns {string}\n     */\n    formatOrder(obj) {\n        const self = this;\n        if (!_.isArray(obj))\n            return '';\n        const sql = _.map(obj, function(x)\n        {\n            const f = x.$desc ? x.$desc : x.$asc;\n            if (typeof f === 'undefined' || f===null)\n                throw new Error('An order by object must have either ascending or descending property.');\n            if (_.isArray(f)) {\n                return _.map(f, function(a) {\n                    return self.format(a,'%ff').concat(x.$desc ? ' DESC': ' ASC');\n                }).join(', ');\n            }\n            return self.format(f,'%ff').concat(x.$desc ? ' DESC': ' ASC');\n        }).join(', ');\n        if (sql.length>0)\n            return ' ORDER BY '.concat(sql);\n        return sql;\n    }\n\n    /**\n     * Formats a group by object to the equivalent SQL statement\n     * @param obj {Array}\n     * @returns {string}\n     */\n    formatGroupBy(obj) {\n        const self = this;\n        if (!_.isArray(obj))\n            return '';\n        const arr = [];\n        _.forEach(obj, function(x) {\n            arr.push(self.format(x, '%ff'));\n        });\n        const sql = arr.join(', ');\n        if (sql.length>0)\n            return ' GROUP BY '.concat(sql);\n        return sql;\n    }\n\n    /**\n     * Formats an insert query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatInsert(obj) {\n        const self= this;\n        let sql = '';\n        if (_.isNil(obj.$insert))\n            throw new Error('Insert expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$insert);\n        //get entity fields\n        const obj1 = obj.$insert[entity];\n        const props = [];\n        for(const prop in obj1)\n            if (obj1.hasOwnProperty(prop))\n                props.push(prop);\n        sql = sql.concat('INSERT INTO ', self.escapeName(entity), '(' , _.map(props, function(x) { return self.escapeName(x); }).join(', '), ') VALUES (',\n            _.map(props, function(x)\n            {\n                const value = obj1[x];\n                return self.escape(value!==null ? value: null);\n            }).join(', ') ,')');\n        return sql;\n    }\n\n    /**\n     * Formats an update query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatUpdate(obj) {\n        const self= this;\n        let sql = '';\n        if (!_.isObject(obj.$update))\n            throw new Error('Update expression cannot be empty at this context.');\n        //get entity name\n        const entity = _.findKey(obj.$update);\n        //get entity fields\n        const obj1 = obj.$update[entity];\n        const props = [];\n        for(const prop in obj1)\n            if (obj1.hasOwnProperty(prop))\n                props.push(prop);\n        //add basic INSERT statement\n        sql = sql.concat('UPDATE ', self.escapeName(entity), ' SET ',\n            _.map(props, function(x)\n            {\n                const value = obj1[x];\n                return self.escapeName(x).concat('=', self.escape(value!==null ? value: null));\n            }).join(', '));\n        if (_.isObject(obj.$where))\n            sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n        return sql;\n    }\n\n    /**\n     * Formats a delete query to the equivalent SQL statement\n     * @param obj {QueryExpression|*}\n     * @returns {string}\n     */\n    formatDelete(obj) {\n        let sql = '';\n        if (obj.$delete===null)\n            throw new Error('Delete expression cannot be empty at this context.');\n        //get entity name\n        const entity = obj.$delete;\n        //add basic INSERT statement\n        sql = sql.concat('DELETE FROM ', this.escapeName(entity));\n        if (_.isObject(obj.$where))\n            sql = sql.concat(' WHERE ',this.formatWhere(obj.$where));\n        return sql;\n    }\n\n    escapeName(name) {\n        if (typeof name === 'string')\n            return name.replace(/(\\w+)$|^(\\w+)$/g, this.settings.nameFormat);\n        return name;\n    }\n\n    /**\n     * @param obj {QueryField}\n     * @param format {string}\n     * @returns {string|*}\n     */\n    formatFieldEx(obj, format) {\n\n        if ((typeof obj === 'undefined') || (obj===null))\n            return null;\n        if (!isQueryField_(obj))\n            throw new Error('Invalid argument. An instance of QueryField class is expected.');\n        //get property\n        let prop = _.findKey(obj);\n        if (prop===null)\n            return null;\n        const useAlias = (format==='%f');\n        if (prop==='$name') {\n            return (this.settings.forceAlias && useAlias) ? this.escapeName(obj.$name).concat(' AS ', this.escapeName(obj.name())) : this.escapeName(obj.$name);\n        }\n        else {\n            const expr = obj[prop];\n            if (expr===null)\n                throw new Error('Field definition cannot be empty while formatting.');\n            if (typeof expr === 'string') {\n                return useAlias ? this.escapeName(expr).concat(' AS ', this.escapeName(prop)) : expr;\n            }\n            //get aggregate expression\n            const alias = prop;\n            prop = _.findKey(expr);\n            const name = expr[prop];\n            let s;\n            switch (prop) {\n                case '$count':\n                    s= sprintf.sprintf('COUNT(%s)',this.escapeName(name));\n                    break;\n                case '$min':\n                    s= sprintf.sprintf('MIN(%s)',this.escapeName(name));\n                    break;\n                case '$max':\n                    s= sprintf.sprintf('MAX(%s)',this.escapeName(name));\n                    break;\n                case '$avg':\n                    s= sprintf.sprintf('AVG(%s)',this.escapeName(name));\n                    break;\n                case '$sum':\n                    s= sprintf.sprintf('SUM(%s)',this.escapeName(name));\n                    break;\n                case '$value':\n                    s= this.escapeConstant(name);\n                    break;\n                default :\n                    const fn = this[prop];\n                    if (typeof fn === 'function') {\n                        /**\n                         * get method arguments\n                         * @type {Array}\n                         */\n                        const args = expr[prop];\n                        s = fn.apply(this,args);\n                    }\n                    else\n                        throw new Error('The specified function is not yet implemented.');\n            }\n            return useAlias ? s.concat(' AS ', this.escapeName(alias)) : s;\n        }\n    }\n\n    /**\n     * Formats a query expression and returns the SQL equivalent string\n     * @param obj {QueryExpression|*}\n     * @param s {string=}\n     * @returns {string|*}\n     */\n    format(obj, s) {\n        if (obj===null)\n            return null;\n        //if a format is defined\n        if (s!==undefined)\n        {\n            if ((s ==='%f') || (s ==='%ff'))\n            {\n                //field formatting\n                let field = new QueryField();\n                if (typeof obj === 'string')\n                    field.select(obj);\n                else\n                    field = _.assign(new QueryField(), obj);\n                return this.formatFieldEx(field, s);\n            }\n            else if (s==='%o') {\n                if (obj instanceof QueryExpression)\n                    return this.formatOrder(obj.$order);\n                return this.formatOrder(obj);\n            }\n        }\n\n        /**\n         * @type {QueryExpression}\n         */\n        let query = null;\n        //cast object to QueryExpression\n        if (obj instanceof QueryExpression)\n            query = obj;\n        else\n            query = _.assign(new QueryExpression(), obj);\n        //format query\n        if (_.isObject(query.$select)) {\n            if (!query.hasPaging())\n                return this.formatSelect(query);\n            else\n                return this.formatLimitSelect(query);\n        }\n        else if (_.isObject(query.$insert))\n            return this.formatInsert(query);\n        else if (_.isObject(query.$update))\n            return this.formatUpdate(query);\n        else if (query.$delete!==null)\n            return this.formatDelete(query);\n        else if (query.$where!==null)\n            return this.formatWhere(query.$where);\n        else\n            return null;\n\n    }\n}\n\nSqlFormatter.prototype.$indexOf = SqlFormatter.prototype.$indexof;\n\nSqlFormatter.prototype.$substr = SqlFormatter.prototype.$substring;\n\nSqlFormatter.prototype.$toLower = SqlFormatter.prototype.$tolower;\nSqlFormatter.prototype.$toUpper = SqlFormatter.prototype.$toupper;\nSqlFormatter.prototype.$dayOfMonth = SqlFormatter.prototype.$day;\nSqlFormatter.prototype.$minutes = SqlFormatter.prototype.$minute;\nSqlFormatter.prototype.$seconds = SqlFormatter.prototype.$second;\n\nSqlFormatter.prototype.$subtract = SqlFormatter.prototype.$sub;\n\nSqlFormatter.prototype.$multiply = SqlFormatter.prototype.$mul;\n\nSqlFormatter.prototype.$divide = SqlFormatter.prototype.$div;\n\nfunction isQueryField_(obj) {\n    if (_.isNil(obj))\n        return false;\n    return (obj.constructor) && (obj.constructor.name === 'QueryField');\n}"]}