{"version":3,"sources":["config.es6"],"names":["_","ConfigurationStrategy","ConfigurationBase","PathUtils","TraceUtils","routesProperty","Symbol","HttpConfiguration","configPath","hasSourceAt","setSourceAt","require","join","getConfigurationPath","err","code","error","extension","find","mimes","x","getSourceAt"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;IAAQA,C,WAAAA,C;;AACR;;IAAQC,qB,WAAAA,qB;IAAsBC,iB,WAAAA,iB;;AAC9B;;IAAQC,S,UAAAA,S;IACAC,U,UAAAA,U;;;;;;;;AAER,IAAMC,iBAAkBC,OAAO,QAAP,CAAxB;;IAEaC,iB,WAAAA,iB;;;AACT;;;AAGA,+BAAYC,UAAZ,EAAwB;AAAA;;AAAA,0IACdA,UADc;;AAEpB,YAAI,CAAC,MAAKC,WAAL,CAAiB,OAAjB,CAAL,EAAgC;AAAE,kBAAKC,WAAL,CAAiB,OAAjB,EAAyB,EAAzB;AAA+B;AACjE,YAAI,CAAC,MAAKD,WAAL,CAAiB,SAAjB,CAAL,EAAkC;AAAE,kBAAKC,WAAL,CAAiB,SAAjB,EAA2B,EAA3B;AAAiC;AACrE,YAAI,CAAC,MAAKD,WAAL,CAAiB,aAAjB,CAAL,EAAsC;AAAE,kBAAKC,WAAL,CAAiB,aAAjB,EAA+B,EAA/B;AAAqC;AAC7E,YAAI;AACA,kBAAKL,cAAL,IAAuBM,QAAQR,UAAUS,IAAV,CAAe,MAAKC,oBAAL,EAAf,EAA2C,aAA3C,CAAR,CAAvB;AACH,SAFD,CAGA,OAAMC,GAAN,EAAW;AACP,gBAAIA,IAAIC,IAAJ,KAAa,kBAAjB,EAAqC;AACjC,sBAAKV,cAAL,IAAuBM,QAAQ,yBAAR,CAAvB;AACH,aAFD,MAGK;AACDP,2BAAWY,KAAX,CAAiB,mDAAjB;AACAZ,2BAAWY,KAAX,CAAiBF,GAAjB;AACH;AAEJ;AAjBmB;AAkBvB;;AAED;;;;;;;;;;AAgCA;;;;;oCAKYG,S,EAAW;AACnB,mBAAOjB,EAAEkB,IAAF,CAAO,KAAKC,KAAZ,EAAkB,UAASC,CAAT,EAAY;AACjC,uBAAQA,EAAEH,SAAF,KAAcA,SAAf,IAA8BG,EAAEH,SAAF,KAAc,MAAIA,SAAvD;AACH,aAFM,CAAP;AAGH;;;4BArCW;AACR,mBAAO,KAAKI,WAAL,CAAiB,OAAjB,CAAP;AACH;;AAED;;;;;;;4BAIc;AACV,mBAAO,KAAKA,WAAL,CAAiB,SAAjB,CAAP;AACH;;AAED;;;;;;;4BAIkB;AACd,mBAAO,KAAKA,WAAL,CAAiB,aAAjB,CAAP;AACH;;AAED;;;;;;;4BAIa;AACT,mBAAO,KAAKhB,cAAL,CAAP;AACH;;;;EAtDkCH,iB","file":"config.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {_} from 'lodash';\nimport {ConfigurationStrategy,ConfigurationBase} from '@themost/common/config';\nimport {PathUtils} from \"@themost/common/utils\";\nimport {TraceUtils} from \"@themost/common/utils\";\n\nconst routesProperty  = Symbol('routes');\n\nexport class HttpConfiguration extends ConfigurationBase {\n    /**\n     * @param {string} configPath\n     */\n    constructor(configPath) {\n        super(configPath);\n        if (!this.hasSourceAt('mimes')) { this.setSourceAt('mimes',[]); }\n        if (!this.hasSourceAt('engines')) { this.setSourceAt('engines',[]); }\n        if (!this.hasSourceAt('controllers')) { this.setSourceAt('controllers',[]); }\n        try {\n            this[routesProperty] = require(PathUtils.join(this.getConfigurationPath(),'routes.json'))\n        }\n        catch(err) {\n            if (err.code === 'MODULE_NOT_FOUND') {\n                this[routesProperty] = require('./resources/routes.json');\n            }\n            else {\n                TraceUtils.error('An error occurred while loading routes collection');\n                TraceUtils.error(err);\n            }\n\n        }\n    }\n\n    /**\n     * Gets a collection of mime types registered for the current application\n     * @returns {Array}\n     */\n    get mimes() {\n        return this.getSourceAt('mimes');\n    }\n\n    /**\n     * Gets a collection of mime types registered for the current application\n     * @returns {Array}\n     */\n    get engines() {\n        return this.getSourceAt('engines');\n    }\n\n    /**\n     * Gets a collection of mime types registered for the current application\n     * @returns {Array}\n     */\n    get controllers() {\n        return this.getSourceAt('controllers');\n    }\n\n    /**\n     * Gets a collection of routes registered for the current application\n     * @returns {Array}\n     */\n    get routes() {\n        return this[routesProperty];\n    }\n\n    /**\n     * Gets a mime type based on the given extension\n     * @param {string} extension\n     * @returns {T}\n     */\n    getMimeType(extension) {\n        return _.find(this.mimes,function(x) {\n            return (x.extension===extension) || (x.extension==='.'+extension);\n        });\n    }\n\n}"]}