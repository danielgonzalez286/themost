{"version":3,"sources":["data.es6"],"names":["Q","_","HttpController","httpGet","httpAction","httpPut","httpPost","httpDelete","HttpError","HttpMethodNotAllowedError","HttpBadRequestError","HttpNotFoundError","HttpServerError","TraceUtils","DataExpandResolver","HttpDataController","context","model_","self","Object","defineProperty","get","model","name","set","value","configurable","enumerable","data","nfbind","callback","isArray","target","convert","insert","err","create","postNewItem","clone","JSON","parse","stringify","m","assign","keys","i","length","key","indexOf","mappings_","view","source","fields","privileges","constraints","eventListeners","attributes","forEach","x","mapping","inferMapping","calculation","views","field","test","mField","filter","y","hasOwnProperty","id","getItem","save","postItem","where","getPrimaryKey","equal","first","then","isObject","remove","reject","params","Error","$filter","select","$select","search","$search","skip","$skip","levels","parseInt","$levels","orderBy","$order","$orderby","groupBy","$group","$groupby","expand","$expand","q","apply","split","map","replace","isNaN","orderByDescending","matches","testExpandExpression","e","top","attr","take","count","asArray","result","catch","all","records","total","list","getItems","postItems","log","err1","message","code","er","parent","isNil","primaryKey","obj","associatedModel","type","parentModel","associationType","junction","property","query","$prepared","$where","$take","childField"],"mappings":"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","file":"data.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport Q from 'q';\nimport {_} from 'lodash';\nimport {HttpController} from '../mvc';\nimport {httpGet,httpAction} from '../decorators';\nimport {HttpError,HttpMethodNotAllowedError,HttpBadRequestError,HttpNotFoundError,HttpServerError} from '@themost/common/errors';\nimport {TraceUtils} from '@themost/common/utils';\nimport {httpPut, httpPost, httpDelete} from \"../decorators\";\nimport {DataExpandResolver} from '@themost/data/expand-resolver';\n\n\n/**\n * @classdesc HttpDataController class describes a common MOST Web Framework data controller.\n * This controller is inherited by default from all data models. It offers a set of basic actions for CRUD operations against data objects\n * and allows filtering, paging, sorting and grouping data objects with options similar to [OData]{@link http://www.odata.org/}.\n <h2>Basic Features</h2>\n <h3>Data Filtering ($filter query option)</h3>\n <p>Logical Operators</p>\n <p>The following table contains the logical operators supported in the query language:</p>\n  <table class=\"table-flat\">\n    <thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead>\n    <tbody>\n        <tr><td>eq</td><td>Equal</td><td>/Order/index.json?$filter=customer eq 353</td></tr>\n        <tr><td>ne</td><td>Not Equal</td><td>/Order/index.json?$filter=orderStatus/alternateName ne 'OrderDelivered'</td></tr>\n        <tr><td>gt</td><td>Greater than</td><td>/Order/index.json?$filter=orderedItem/price gt 1000</td></tr>\n        <tr><td>ge</td><td>Greater than or equal</td><td>/Order/index.json?$filter=orderedItem/price ge 500</td></tr>\n        <tr><td>lt</td><td>Lower than</td><td>/Order/index.json?$filter=orderedItem/price lt 500</td></tr>\n        <tr><td>le</td><td>Lower than or equal</td><td>/Order/index.json?$filter=orderedItem/price le 1000</td></tr>\n        <tr><td>and</td><td>Logical and</td><td>/Order/index.json?$filter=orderedItem/price gt 1000 and orderStatus/alternateName eq 'OrderPickup'</td></tr>\n        <tr><td>or</td><td>Logical or</td><td>/Order/index.json?$filter=orderStatus/alternateName eq 'OrderPickup' or orderStatus/alternateName eq 'OrderProcessing'</td></tr>\n    </tbody>\n </table>\n <p>Arithmetic Operators</p>\n <p>The following table contains the arithmetic operators supported in the query language:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>add</td><td>Addition</td><td>/Order/index.json?$filter=(orderedItem/price add 10) gt 1560</td></tr>\n     <tr><td>sub</td><td>Subtraction</td><td>/Order/index.json?$filter=(orderedItem/price sub 10) gt 1540</td></tr>\n     <tr><td>mul</td><td>Multiplication</td><td>/Order/index.json?$filter=(orderedItem/price mul 1.20) gt 1000</td></tr>\n     <tr><td>div</td><td>Division</td><td>/Order/index.json?$filter=(orderedItem/price div 2) le 500</td></tr>\n     <tr><td>mod</td><td>Modulo</td><td>/Order/index.json?$filter=(orderedItem/price mod 2) eq 0</td></tr>\n     </tbody>\n </table>\n <p>Functions</p>\n <p>A set of functions are also defined for use in $filter query option:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Function</th><th>Example</th></tr></thead>\n     <tbody>\n        <tr><td colspan=\"2\"><b>String Functions</b></td></tr>\n        <tr><td>startswith(field,string)</td><td>/Product/index.json?$filter=startswith(name,'Apple') eq true</td></tr>\n        <tr><td>endswith(field,string)</td><td>/Product/index.json?$filter=endswith(name,'Workstation') eq true</td></tr>\n        <tr><td>contains(field,string)</td><td>/Product/index.json?$filter=contains(name,'MacBook') eq true</td></tr>\n         <tr><td>length(field)</td><td>/Product/index.json?$filter=length(name) gt 40</td></tr>\n         <tr><td>indexof(field,string)</td><td>/Product/index.json?$filter=indexof(name,'Air') gt 1</td></tr>\n         <tr><td>substring(field,number)</td><td>/Product/index.json?$filter=substring(category,1) eq 'aptops'</td></tr>\n         <tr><td>substring(field,number,number)</td><td>/Product/index.json?$filter=substring(category,1,2) eq 'ap'</td></tr>\n         <tr><td>tolower(field)</td><td>/Product/index.json?$filter=tolower(category) eq 'laptops'</td></tr>\n         <tr><td>toupper(field)</td><td>/Product/index.json?$filter=toupper(category) eq 'LAPTOPS'</td></tr>\n         <tr><td>trim(field)</td><td>/Product/index.json?$filter=trim(category) eq 'Laptops'</td></tr>\n <tr><td colspan=\"2\"><b>Date Functions</b></td></tr>\n <tr><td>day(field)</td><td>/Order/index.json?$filter=day(orderDate) eq 4</td></tr>\n <tr><td>month(field)</td><td>/Order/index.json?$filter=month(orderDate) eq 6</td></tr>\n <tr><td>year(field)</td><td>/Order/index.json?$filter=year(orderDate) ge 2014</td></tr>\n <tr><td>hour(field)</td><td>/Order/index.json?$filter=hour(orderDate) ge 12 and hour(orderDate) lt 14</td></tr>\n <tr><td>minute(field)</td><td>/Order/index.json?$filter=minute(orderDate) gt 15 and minute(orderDate) le 30</td></tr>\n <tr><td>second(field)</td><td>/Order/index.json?$filter=second(orderDate) ge 0 and second(orderDate) le 45</td></tr>\n <tr><td>date(field)</td><td>/Order/index.json?$filter=date(orderDate) eq '2015-03-20'</td></tr>\n <tr><td colspan=\"2\"><b>Math Functions</b></td></tr>\n <tr><td>round(field)</td><td>/Product/index.json?$filter=round(price) le 389</td></tr>\n <tr><td>floor(field)</td><td>/Product/index.json?$filter=floor(price) eq 389</td></tr>\n <tr><td>ceiling(field)</td><td>/Product/index.json?$filter=ceiling(price) eq 390</td></tr>\n      </tbody>\n </table>\n <h3>Attribute Selection ($select query option)</h3>\n <p>The following table contains attribute selection expressions supported in the query language:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>Select attribute</td><td>/Order/index.json?$select=id,customer,orderStatus</td></tr>\n     <tr><td>Select attribute with alias</td><td>/Order/index.json?$select=id,customer/description as customerName,orderStatus/name as orderStatusName</td></tr>\n     <tr><td>Select attribute with aggregation</td><td>/Order/index.json?$select=count(id) as totalCount&$filter=orderStatus/alternateName eq 'OrderProcessing'</td></tr>\n     <tr><td>&nbsp;</td><td>/Product/index.json?$select=max(price) as maxPrice&$filter=category eq 'Laptops'</td></tr>\n     <tr><td>&nbsp;</td><td>/Product/index.json?$select=min(price) as minPrice&$filter=category eq 'Laptops'</td></tr>\n </tbody>\n </table>\n <h3>Data Sorting ($orderby or $order query options)</h3>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n        <tr><td>Ascending order</td><td>/Product/index.json?$orderby=name</td></tr>\n        <tr><td>Descending order</td><td>/Product/index.json?$orderby=category desc,name desc</td></tr>\n     </tbody>\n </table>\n  <h3>Data Paging ($top, $skip and $inlinecount query options)</h3>\n <p>The $top query option allows developers to apply paging in the result-set by giving the max number of records for each page. The default value is 25.\n The $skip query option provides a way to skip a number of records. The default value is 0.\n The $inlinecount query option includes in the result-set the total number of records of the query expression provided:\n <pre class=\"prettyprint\"><code>\n {\n     \"total\": 94,\n     \"records\": [ ... ]\n }\n  </code></pre>\n <p>The default value is false.</p>\n  </p>\n   <table class=\"table-flat\">\n      <thead><tr><th>Description</th><th>Example</th></tr></thead>\n      <tbody>\n      <tr><td>Limit records</td><td>/Product/index.json?$top=5</td></tr>\n      <tr><td>Skip records</td><td>/Product/index.json?$top=5&$skip=5</td></tr>\n      <tr><td>Paged records</td><td>/Product/index.json?$top=5&$skip=5&$inlinecount=true</td></tr>\n      </tbody>\n  </table>\n  <h3>Data Grouping ($groupby or $group query options)</h3>\n  <p>The $groupby query option allows developers to group the result-set by one or more attributes</p>\n  <table class=\"table-flat\">\n  <thead><tr><th>Description</th><th>Example</th></tr></thead>\n  <tbody>\n  <tr><td>group</td><td>/Product/index.json?$select=count(id) as totalCount,category&$groupby=category</td></tr>\n  <tr><td>group and sort</td><td>/Product/index.json?$select=count(id) as totalCount,category&$groupby=category&$orderby=count(id) desc</td></tr>\n  </tbody>\n  </table>\n <h3>Data Expanding ($expand)</h3>\n <p>The $expand query option forces response to include associated objects which are not marked as expandable by default.</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>expand</td><td>/Order/index.json?$filter=orderStatus/alternateName eq 'OrderProcessing'&$expand=customer</td></tr>\n     </tbody>\n </table>\n <p>The $expand option is optional for a <a href=\"https://docs.themost.io/most-data/DataField.html\">DataField</a> marked as expandable.</p>\n * @class\n * @constructor\n * @augments HttpController\n * @property {DataModel} model - Gets or sets the current data model.\n */\nclass HttpDataController extends HttpController {\n    /**\n     * @constructor\n     * @param {HttpContext} context\n     */\n    constructor(context) {\n        super(context);\n        let model_;\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get: function() {\n                if (model_)\n                    return model_;\n                model_ = self.context.model(self.name);\n                return model_;\n            },\n            set: function(value) {\n                model_ = value;\n            }, configurable:false, enumerable:false\n        });\n    }\n\n    /**\n     * Handles data object creation (e.g. /user/new.html, /user/new.json etc)\n     * @returns {Promise|*}\n     */\n    @httpGet()\n    @httpAction('new')\n    getNewItem() {\n        return Q({});\n    }\n\n    /**\n     * Handles data object insertion (e.g. /user/new.html, /user/new.json etc)\n     * @returns {Promise|*}\n     */\n    @httpPost()\n    @httpAction('new')\n    postNewItem(data) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            if (_.isArray(data)) {\n                return callback(new HttpBadRequestError());\n            }\n            const target = self.model.convert(data, true);\n            self.model.insert(target, function(err)\n            {\n                if (err) {\n                    callback(HttpError.create(err));\n                }\n                else {\n                    callback(null, target);\n                }\n            });\n        })();\n    }\n\n    /**\n     * Handles data object insertion (e.g. /user/new.html, /user/new.json etc)\n     * @returns {Promise|*}\n     */\n    @httpPut()\n    @httpAction('new')\n    putNewItem(data) {\n        return this.postNewItem(data);\n    }\n\n    /**\n     * @returns {Promise|*}\n     */\n    @httpGet()\n    @httpAction('schema')\n    getSchema() {\n        const self = this, context = self.context;\n        return Q.nfbind(function(callback) {\n            if (self.model) {\n                //prepare client model\n                const clone = JSON.parse(JSON.stringify(self.model));\n                const m = _.assign({}, clone);\n                //delete private properties\n                const keys = Object.keys(m);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    if (key.indexOf(\"_\")===0)\n                        delete m[key];\n                }\n                //delete other server properties\n                delete m.mappings_;\n                delete m.view;\n                delete m.source;\n                delete m.fields;\n                delete m.privileges;\n                delete m.constraints;\n                delete m.eventListeners;\n                //set fields equal attributes\n                m.attributes = JSON.parse(JSON.stringify(self.model.attributes));\n                m.attributes.forEach(function(x) {\n                    const mapping = self.model.inferMapping(x.name);\n                    if (mapping)\n                        x.mapping = JSON.parse(JSON.stringify(mapping));\n                    //delete private properties\n                    delete x.value;\n                    delete x.calculation;\n                });\n                //prepare views and view fields\n                if (m.views) {\n                    m.views.forEach(function(view) {\n                        if (view.fields) {\n                            view.fields.forEach(function(field) {\n                                if (/\\./.test(field.name)===false) {\n                                    //extend view field\n                                    const name = field.name;\n                                    const mField = m.attributes.filter(function(y) {\n                                        return (y.name===name);\n                                    })[0];\n                                    if (mField) {\n                                        for (const key in mField) {\n                                            if (mField.hasOwnProperty(key) && !field.hasOwnProperty(key)) {\n                                                field[key] = mField[key];\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n                callback(null, m);\n            }\n            else {\n                callback(new HttpNotFoundError());\n            }\n        })();\n\n    }\n\n    /**\n     * Handles data object display (e.g. /user/1/edit.html, /user/1/edit.json etc)\n     * @param {*} id\n     * @returns {Promise|*}\n     */\n    @httpGet()\n    @httpAction('edit')\n    editItem(id) {\n        return this.getItem(id);\n    }\n    /**\n     * Handles data object post (e.g. /user/1/edit.html, /user/1/edit.json etc)\n     * @param {*} id\n     * @returns {Promise|*}\n     */\n    @httpPost()\n    @httpAction('edit')\n    postItem(id) {\n        const self = this;\n        return Q.nfbind((callback) => {\n            const target = self.model.convert(data, true);\n            if (target) {\n                self.model.save(target, function(err)\n                {\n                    if (err) {\n                        callback(HttpError.create(err));\n                    }\n                    else {\n                        return callback(null, target);\n                    }\n                });\n            }\n            else {\n                callback(new HttpBadRequestError());\n            }\n        })();\n    }\n\n    /**\n     * Handles data object put (e.g. /user/1/edit.html, /user/1/edit.json etc)\n     * @param {*} id\n     * @returns {Promise|*}\n     */\n    @httpPut()\n    @httpAction('edit')\n    putItem(id) {\n        return this.postItem(id);\n    }\n\n    /**\n     * Handles data object post (e.g. /user/1/edit.html, /user/1/edit.json etc)\n     * @param {*} id\n     * @returns {Promise|*}\n     */\n    @httpDelete()\n    @httpAction('edit')\n    deleteItem(id) {\n        const self = this;\n        return self.model.where(self.model.getPrimaryKey()).equal(id).first()\n            .then((x)=> {\n           if (_.isObject(x)) {\n               return self.model.remove(x);\n           }\n           return Q.reject(HttpNotFoundError());\n        });\n    }\n\n    /**\n     * Handles data object display (e.g. /user/1/show.html, /user/1/show.json etc)\n     * @param {*} id\n     * @returns {Promise|*}\n     */\n    @httpGet()\n    @httpAction('show')\n    getItem(id) {\n        return Q.nfbind(this.model.where(this.model.getPrimaryKey()).equal(id).first)(id);\n    }\n    /**\n     * @param {Function} callback\n     * @private\n     */\n    filter(callback) {\n\n        const self = this, params = self.context.params;\n\n        if (typeof self.model !== 'object' || self.model === null) {\n            callback(new Error('Model is of the wrong type or undefined.'));\n            return;\n        }\n\n        const filter = params.$filter, select = params.$select, search = params.$search, skip = params.$skip || 0, levels = parseInt(params.$levels), orderBy = params.$order || params.$orderby, groupBy = params.$group || params.$groupby, expand = params.$expand;\n\n        self.model.filter(filter,\n            /**\n             * @param {Error} err\n             * @param {DataQueryable} q\n             */\n             function (err, q) {\n                try {\n                    if (err) {\n                        return callback(err);\n                    }\n                    else {\n                        if ((typeof search === 'string') && (search.length>0)) {\n                            q.search(search);\n                        }\n                        //set $groupby\n                        if (groupBy) {\n                            q.groupBy.apply(q, groupBy.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }));\n                        }\n                        //set $select\n                        if (select) {\n                            q.select.apply(q, select.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }));\n                        }\n                        //set $skip\n                        if (!/^\\d+$/.test(skip)) {\n                            return callback(new HttpBadRequestError(\"Skip may be a non-negative integer.\"))\n                        }\n                        //set expandable levels\n                        if (!isNaN(levels)) {\n                            q.levels(levels);\n                        }\n                        q.skip(skip);\n                        //set $orderby\n                        if (orderBy) {\n                            orderBy.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }).forEach(function(x) {\n                                if (/\\s+desc$/i.test(x)) {\n                                    q.orderByDescending(x.replace(/\\s+desc$/i, ''));\n                                }\n                                else if (/\\s+asc/i.test(x)) {\n                                    q.orderBy(x.replace(/\\s+asc/i, ''));\n                                }\n                                else {\n                                    q.orderBy(x);\n                                }\n                            });\n                        }\n                        if (expand) {\n                            const matches = DataExpandResolver.testExpandExpression(expand);\n                            if (matches && matches.length>0) {\n                                q.expand.apply(q, matches);\n                            }\n                        }\n                        //return\n                        callback(null, q);\n                    }\n                }\n                catch (e) {\n                   callback(e);\n                }\n            });\n    }\n\n\n\n    /*jshint ignore:start*/\n    @httpGet()\n    @httpAction('index')\n    /*jshint ignore:end*/\n    getItems() {\n        const self = this, context = self.context;\n        return Q.nfbind(function(callback) {\n            const top = parseInt(context.params.attr('$top')),\n                take = top > 0 ? top : (top === -1 ? top : 25),\n                count = /^true$/ig.test(context.params.attr('$inlinecount')) || false,\n                first = /^true$/ig.test(context.params.attr('$first')) || false,\n                asArray = /^true$/ig.test(context.params.attr('$array')) || false;\n\n            self.filter(\n                /**\n                 * @param {Error} err\n                 * @param {DataQueryable=} q\n                 */\n                function(err, q) {\n                    try {\n                        if (err) {\n                            return callback(HttpError.create(err));\n                        }\n                        //apply as array parameter\n                        q.asArray(asArray);\n                         if (first) {\n                            return q.first().then(function(result) {\n                                return callback(null, result);\n                            }).catch(function(err) {\n                                return callback(HttpError.create(err));\n                            });\n                        }\n\n                        if (take<0) {\n                            return q.all().then(function(result) {\n                                if (count) {\n                                    return callback(null, self.result({\n                                        records:result,\n                                        total:result.length\n                                    }));\n                                }\n                                else {\n                                    return callback(null, result);\n                                }\n                            }).catch(function(err) {\n                                return callback(HttpError.create(err));\n                            });\n                        }\n                        else {\n                            if (count) {\n                                return q.take(take).list().then(function(result) {\n                                    return callback(null, result);\n                                }).catch(function(err) {\n                                    return callback(HttpError.create(err));\n                                });\n                            }\n                            else {\n                                return q.take(take).getItems().then(function(result) {\n                                    return callback(null, result);\n                                }).catch(function(err) {\n                                    return callback(HttpError.create(err));\n                                });\n                            }\n                        }\n                    }\n                    catch (err) {\n                        return callback(err);\n                    }\n                });\n        })();\n    }\n    /**\n     * @param {*} data\n     */\n    @httpPut()\n    @httpAction('index')\n    putItems(data) {\n        return this.postItems(data);\n    }\n\n    /**\n     * @param {*} data\n     */\n    @httpPost()\n    @httpAction('index')\n    postItems(data) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            let target;\n            try {\n                target = self.model.convert(data, true);\n            }\n            catch(err) {\n                TraceUtils.log(err);\n                const err1 = new HttpError(422, \"An error occured while converting data objects.\", err.message);\n                err1.code = 'EDATA';\n                return callback(err1);\n            }\n            if (target) {\n                self.model.save(target, function(err)\n                {\n                    if (err) {\n                        TraceUtils.log(err);\n                        callback(HttpError.create(err));\n                    }\n                    else {\n                        callback(null, self.result(target));\n                    }\n                });\n            }\n            else {\n                return callback(new HttpBadRequestError());\n            }\n        })();\n    }\n\n    @httpDelete()\n    @httpAction('index')\n    deleteItems(data) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            //get data\n            let target;\n            try {\n                target = self.model.convert(data, true);\n            }\n            catch(err) {\n                TraceUtils.log(err);\n                const er = new HttpError(422, \"An error occured while converting data objects.\", err.message);\n                er.code = 'EDATA';\n                return callback(er);\n            }\n            if (target) {\n                self.model.remove(target, function(err)\n                {\n                    if (err) {\n                        callback(HttpError.create(err));\n                    }\n                    else {\n                        callback(null, self.result(target));\n                    }\n                });\n            }\n            else {\n                return callback(new HttpBadRequestError());\n            }\n        })();\n    }\n\n    /**\n     * Returns an instance of HttpResult class which contains a collection of items based on the specified association.\n     * This association should be a one-to-many association or many-many association.\n     * A routing for this action may be:\n     <pre class=\"prettyprint\"><code>\n     { \"url\":\"/:controller/:parent/:model/index.json\", \"mime\":\"application/json\", \"action\":\"association\" }\n     </code></pre>\n     <p>\n     or\n     </p>\n     <pre class=\"prettyprint\"><code>\n     { \"url\":\"/:controller/:parent/:model/index.html\", \"mime\":\"text/html\", \"action\":\"association\" }\n     </code></pre>\n      <pre class=\"prettyprint\"><code>\n     //get orders in JSON format\n     /GET /Party/353/Order/index.json\n     </code></pre>\n     <p>\n     This action supports common query options like $filter, $order, $top, $skip etc.\n     The result will be a result-set with associated items:\n     </p>\n     <pre class=\"prettyprint\"><code>\n        //JSON Results:\n     {\n            \"total\": 8,\n            \"skip\": 0,\n            \"records\": [\n                {\n                \"id\": 37,\n                \"customer\": 353,\n                \"orderDate\": \"2015-05-05 01:19:34.000+03:00\",\n                \"orderedItem\": {\n                    \"id\": 407,\n                    \"additionalType\": \"Product\",\n                    \"category\": \"PC Components\",\n                    \"price\": 1625.49,\n                    \"model\": \"HR5845\",\n                    \"releaseDate\": \"2015-09-20 03:35:33.000+03:00\",\n                    \"name\": \"Nvidia GeForce GTX 650 Ti Boost\",\n                    \"dateCreated\": \"2015-11-23 14:53:04.884+02:00\",\n                    \"dateModified\": \"2015-11-23 14:53:04.887+02:00\"\n                },\n                \"orderNumber\": \"OFV804\",\n                \"orderStatus\": {\n                    \"id\": 1,\n                    \"name\": \"Delivered\",\n                    \"alternateName\": \"OrderDelivered\",\n                    \"description\": \"Representing the successful delivery of an order.\"\n                },\n                \"paymentDue\": \"2015-05-25 01:19:34.000+03:00\",\n                \"paymentMethod\": {\n                    \"id\": 6,\n                    \"name\": \"Direct Debit\",\n                    \"alternateName\": \"DirectDebit\",\n                    \"description\": \"Payment by direct debit\"\n                },\n                \"additionalType\": \"Order\",\n                \"dateCreated\": \"2015-11-23 21:00:18.264+02:00\",\n                \"dateModified\": \"2015-11-23 21:00:18.266+02:00\"\n                }\n            ...]\n       ...\n    }\n    </code></pre>\n     *@returns {Promise}\n     */\n    @httpGet()\n    @httpAction('association')\n    getAssociatedItems(parent, model) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            if (_.isNil(parent) || _.isNil(model)) {\n                return callback(new HttpBadRequestError());\n            }\n            self.model.where(self.model.primaryKey).equal(parent).select([self.model.primaryKey]).first(function(err, result) {\n                if (err) {\n                    TraceUtils.log(err);\n                    callback(new HttpServerError());\n                    return;\n                }\n                if (_.isNil(result)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                //get parent object (DataObject)\n                const obj = self.model.convert(result);\n                const associatedModel = self.context.model(model);\n                if (_.isNil(associatedModel)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                /**\n                 * Search for object junction\n                 */\n                let field = self.model.attributes.filter(function(x) { return x.type === associatedModel.name; })[0], mapping;\n                if (field) {\n                    /**\n                     * Get association mapping fo this field\n                     * @type {DataAssociationMapping}\n                     */\n                    mapping = self.model.inferMapping(field.name);\n                    if (mapping) {\n                        if ((mapping.parentModel===self.model.name) && (mapping.associationType==='junction')) {\n                            /**\n                             * @type {DataQueryable}\n                             */\n                            const junction = obj.property(field.name);\n                            junction.model.filter(self.context.params, function(err, q) {\n                                if (err) {\n                                    callback(err);\n                                }\n                                else {\n                                    //merge properties\n                                    if (q.query.$select) { junction.query.$select = q.query.$select; }\n                                    if (q.query.$group) { junction.query.$group = q.query.$group; }\n                                    if (q.query.$order) { junction.query.$order = q.query.$order; }\n                                    if (q.query.$prepared) { junction.query.$where = q.query.$prepared; }\n                                    if (q.query.$skip) { junction.query.$skip = q.query.$skip; }\n                                    if (q.query.$take) { junction.query.$take = q.query.$take; }\n                                    junction.list(function(err, result) {\n                                        callback(err, self.result(result));\n                                    });\n                                }\n                            });\n                            return;\n                        }\n                    }\n                }\n                field = associatedModel.attributes.filter(function(x) { return x.type === self.model.name; })[0];\n                if (_.isNil(field)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                //get field mapping\n                mapping = associatedModel.inferMapping(field.name);\n                associatedModel.filter(self.context.params, function(err, q) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        q.where(mapping.childField).equal(parent).list(function(err, result) {\n                            callback(err, self.result(result));\n                        });\n                    }\n                });\n            });\n        })();\n    }\n}\n\n//noinspection JSUnusedGlobalSymbols\nexport default HttpDataController;"]}