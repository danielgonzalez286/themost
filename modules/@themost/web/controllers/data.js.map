{"version":3,"sources":["data.es6"],"names":["HttpDataController","context","model_","self","Object","defineProperty","get","model","name","set","value","configurable","enumerable","callback","handle","result","target","convert","params","data","save","err","create","attr","unhandle","e","remove","request","route","static","filter","id","format","primaryKey","q","take","length","clone","JSON","parse","stringify","m","_extend","keys","i","key","indexOf","view","source","fields","privileges","constraints","eventListeners","attributes","forEach","x","mapping","inferMapping","calculation","views","field","test","mField","y","hasOwnProperty","Error","$filter","select","$select","search","$search","skip","$skip","levels","parseInt","$levels","orderBy","$order","$orderby","groupBy","$group","$groupby","expand","$expand","apply","split","map","replace","isNaN","orderByDescending","resolver","require","matches","testExpandExpression","top","count","first","asArray","debug","url","then","catch","all","records","total","list","getItems","log","er","message","code","parent","isNil","where","equal","obj","associatedModel","type","parentModel","associationType","junction","property","query","$prepared","$where","$take","childField"],"mappings":"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","file":"data.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport util from 'util';\nimport {_} from 'lodash';\nimport xml from 'most-xml';\nimport {HttpController} from './../mvc';\nimport {HttpError,HttpMethodNotAllowedError,HttpBadRequestError,HttpNotFoundError,HttpServerError} from '@themost/common/errors';\nimport {TraceUtils} from '@themost/common/utils';\n\n\n/**\n * @classdesc HttpDataController class describes a common MOST Web Framework data controller.\n * This controller is inherited by default from all data models. It offers a set of basic actions for CRUD operations against data objects\n * and allows filtering, paging, sorting and grouping data objects with options similar to [OData]{@link http://www.odata.org/}.\n <h2>Basic Features</h2>\n <h3>Data Filtering ($filter query option)</h3>\n <p>Logical Operators</p>\n <p>The following table contains the logical operators supported in the query language:</p>\n  <table class=\"table-flat\">\n    <thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead>\n    <tbody>\n        <tr><td>eq</td><td>Equal</td><td>/Order/index.json?$filter=customer eq 353</td></tr>\n        <tr><td>ne</td><td>Not Equal</td><td>/Order/index.json?$filter=orderStatus/alternateName ne 'OrderDelivered'</td></tr>\n        <tr><td>gt</td><td>Greater than</td><td>/Order/index.json?$filter=orderedItem/price gt 1000</td></tr>\n        <tr><td>ge</td><td>Greater than or equal</td><td>/Order/index.json?$filter=orderedItem/price ge 500</td></tr>\n        <tr><td>lt</td><td>Lower than</td><td>/Order/index.json?$filter=orderedItem/price lt 500</td></tr>\n        <tr><td>le</td><td>Lower than or equal</td><td>/Order/index.json?$filter=orderedItem/price le 1000</td></tr>\n        <tr><td>and</td><td>Logical and</td><td>/Order/index.json?$filter=orderedItem/price gt 1000 and orderStatus/alternateName eq 'OrderPickup'</td></tr>\n        <tr><td>or</td><td>Logical or</td><td>/Order/index.json?$filter=orderStatus/alternateName eq 'OrderPickup' or orderStatus/alternateName eq 'OrderProcessing'</td></tr>\n    </tbody>\n </table>\n <p>Arithmetic Operators</p>\n <p>The following table contains the arithmetic operators supported in the query language:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>add</td><td>Addition</td><td>/Order/index.json?$filter=(orderedItem/price add 10) gt 1560</td></tr>\n     <tr><td>sub</td><td>Subtraction</td><td>/Order/index.json?$filter=(orderedItem/price sub 10) gt 1540</td></tr>\n     <tr><td>mul</td><td>Multiplication</td><td>/Order/index.json?$filter=(orderedItem/price mul 1.20) gt 1000</td></tr>\n     <tr><td>div</td><td>Division</td><td>/Order/index.json?$filter=(orderedItem/price div 2) le 500</td></tr>\n     <tr><td>mod</td><td>Modulo</td><td>/Order/index.json?$filter=(orderedItem/price mod 2) eq 0</td></tr>\n     </tbody>\n </table>\n <p>Functions</p>\n <p>A set of functions are also defined for use in $filter query option:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Function</th><th>Example</th></tr></thead>\n     <tbody>\n        <tr><td colspan=\"2\"><b>String Functions</b></td></tr>\n        <tr><td>startswith(field,string)</td><td>/Product/index.json?$filter=startswith(name,'Apple') eq true</td></tr>\n        <tr><td>endswith(field,string)</td><td>/Product/index.json?$filter=endswith(name,'Workstation') eq true</td></tr>\n        <tr><td>contains(field,string)</td><td>/Product/index.json?$filter=contains(name,'MacBook') eq true</td></tr>\n         <tr><td>length(field)</td><td>/Product/index.json?$filter=length(name) gt 40</td></tr>\n         <tr><td>indexof(field,string)</td><td>/Product/index.json?$filter=indexof(name,'Air') gt 1</td></tr>\n         <tr><td>substring(field,number)</td><td>/Product/index.json?$filter=substring(category,1) eq 'aptops'</td></tr>\n         <tr><td>substring(field,number,number)</td><td>/Product/index.json?$filter=substring(category,1,2) eq 'ap'</td></tr>\n         <tr><td>tolower(field)</td><td>/Product/index.json?$filter=tolower(category) eq 'laptops'</td></tr>\n         <tr><td>toupper(field)</td><td>/Product/index.json?$filter=toupper(category) eq 'LAPTOPS'</td></tr>\n         <tr><td>trim(field)</td><td>/Product/index.json?$filter=trim(category) eq 'Laptops'</td></tr>\n <tr><td colspan=\"2\"><b>Date Functions</b></td></tr>\n <tr><td>day(field)</td><td>/Order/index.json?$filter=day(orderDate) eq 4</td></tr>\n <tr><td>month(field)</td><td>/Order/index.json?$filter=month(orderDate) eq 6</td></tr>\n <tr><td>year(field)</td><td>/Order/index.json?$filter=year(orderDate) ge 2014</td></tr>\n <tr><td>hour(field)</td><td>/Order/index.json?$filter=hour(orderDate) ge 12 and hour(orderDate) lt 14</td></tr>\n <tr><td>minute(field)</td><td>/Order/index.json?$filter=minute(orderDate) gt 15 and minute(orderDate) le 30</td></tr>\n <tr><td>second(field)</td><td>/Order/index.json?$filter=second(orderDate) ge 0 and second(orderDate) le 45</td></tr>\n <tr><td>date(field)</td><td>/Order/index.json?$filter=date(orderDate) eq '2015-03-20'</td></tr>\n <tr><td colspan=\"2\"><b>Math Functions</b></td></tr>\n <tr><td>round(field)</td><td>/Product/index.json?$filter=round(price) le 389</td></tr>\n <tr><td>floor(field)</td><td>/Product/index.json?$filter=floor(price) eq 389</td></tr>\n <tr><td>ceiling(field)</td><td>/Product/index.json?$filter=ceiling(price) eq 390</td></tr>\n      </tbody>\n </table>\n <h3>Attribute Selection ($select query option)</h3>\n <p>The following table contains attribute selection expressions supported in the query language:</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>Select attribute</td><td>/Order/index.json?$select=id,customer,orderStatus</td></tr>\n     <tr><td>Select attribute with alias</td><td>/Order/index.json?$select=id,customer/description as customerName,orderStatus/name as orderStatusName</td></tr>\n     <tr><td>Select attribute with aggregation</td><td>/Order/index.json?$select=count(id) as totalCount&$filter=orderStatus/alternateName eq 'OrderProcessing'</td></tr>\n     <tr><td>&nbsp;</td><td>/Product/index.json?$select=max(price) as maxPrice&$filter=category eq 'Laptops'</td></tr>\n     <tr><td>&nbsp;</td><td>/Product/index.json?$select=min(price) as minPrice&$filter=category eq 'Laptops'</td></tr>\n </tbody>\n </table>\n <h3>Data Sorting ($orderby or $order query options)</h3>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n        <tr><td>Ascending order</td><td>/Product/index.json?$orderby=name</td></tr>\n        <tr><td>Descending order</td><td>/Product/index.json?$orderby=category desc,name desc</td></tr>\n     </tbody>\n </table>\n  <h3>Data Paging ($top, $skip and $inlinecount query options)</h3>\n <p>The $top query option allows developers to apply paging in the result-set by giving the max number of records for each page. The default value is 25.\n The $skip query option provides a way to skip a number of records. The default value is 0.\n The $inlinecount query option includes in the result-set the total number of records of the query expression provided:\n <pre class=\"prettyprint\"><code>\n {\n     \"total\": 94,\n     \"records\": [ ... ]\n }\n  </code></pre>\n <p>The default value is false.</p>\n  </p>\n   <table class=\"table-flat\">\n      <thead><tr><th>Description</th><th>Example</th></tr></thead>\n      <tbody>\n      <tr><td>Limit records</td><td>/Product/index.json?$top=5</td></tr>\n      <tr><td>Skip records</td><td>/Product/index.json?$top=5&$skip=5</td></tr>\n      <tr><td>Paged records</td><td>/Product/index.json?$top=5&$skip=5&$inlinecount=true</td></tr>\n      </tbody>\n  </table>\n  <h3>Data Grouping ($groupby or $group query options)</h3>\n  <p>The $groupby query option allows developers to group the result-set by one or more attributes</p>\n  <table class=\"table-flat\">\n  <thead><tr><th>Description</th><th>Example</th></tr></thead>\n  <tbody>\n  <tr><td>group</td><td>/Product/index.json?$select=count(id) as totalCount,category&$groupby=category</td></tr>\n  <tr><td>group and sort</td><td>/Product/index.json?$select=count(id) as totalCount,category&$groupby=category&$orderby=count(id) desc</td></tr>\n  </tbody>\n  </table>\n <h3>Data Expanding ($expand)</h3>\n <p>The $expand query option forces response to include associated objects which are not marked as expandable by default.</p>\n <table class=\"table-flat\">\n     <thead><tr><th>Description</th><th>Example</th></tr></thead>\n     <tbody>\n     <tr><td>expand</td><td>/Order/index.json?$filter=orderStatus/alternateName eq 'OrderProcessing'&$expand=customer</td></tr>\n     </tbody>\n </table>\n <p>The $expand option is optional for a <a href=\"https://docs.themost.io/most-data/DataField.html\">DataField</a> marked as expandable.</p>\n * @class\n * @constructor\n * @augments HttpController\n * @property {DataModel} model - Gets or sets the current data model.\n * @memberOf module:most-web.controllers\n */\nexport default class HttpDataController extends HttpController {\n    /**\n     * @constructor\n     * @param {HttpContext} context\n     */\n    constructor(context) {\n        super(context);\n        let model_;\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get: function() {\n                if (model_)\n                    return model_;\n                model_ = self.context.model(self.name);\n                return model_;\n            },\n            set: function(value) {\n                model_ = value;\n            }, configurable:false, enumerable:false\n        });\n    }\n\n    /**\n     * Handles data object creation (e.g. /user/1/new.html, /user/1/new.json etc)\n     * @param {Function} callback\n     */\n    create(callback) {\n        try {\n            const self = this, context = self.context;\n            context.handle(['GET'],function() {\n                callback(null, self.result());\n            }).handle(['POST', 'PUT'],function() {\n                const target = self.model.convert(context.params[self.model.name] || context.params.data, true);\n                self.model.save(target, function(err)\n                {\n                    if (err) {\n                        callback(HttpError.create(err));\n                    }\n                    else {\n                        if (context.params.attr('returnUrl'))\n                            callback(null, context.params.attr('returnUrl'));\n                        callback(null, self.result(target));\n                    }\n                });\n            }).unhandle(function() {\n                callback(new HttpMethodNotAllowedError());\n            });\n        }\n        catch (e) {\n            callback(HttpError.create(e));\n        }\n    }\n\n    /**\n     * Handles data object edit (e.g. /user/1/edit.html, /user/1/edit.json etc)\n     * @param {Function} callback\n     */\n    edit(callback) {\n        try {\n            const self = this, context = self.context;\n            context.handle(['POST', 'PUT'], function() {\n                //get context param\n                const target = self.model.convert(context.params[self.model.name] || context.params.data, true);\n                if (target) {\n                    self.model.save(target, function(err)\n                    {\n                        if (err) {\n                            callback(HttpError.create(err));\n                        }\n                        else {\n                            if (context.params.attr('returnUrl'))\n                                callback(null, context.params.attr('returnUrl'));\n                            callback(null, self.result(target));\n                        }\n                    });\n                }\n                else {\n                    callback(new HttpBadRequestError());\n                }\n            }).handle('DELETE', function() {\n                //get context param\n                const target = context.params[self.model.name] || context.params.data;\n                if (target) {\n                    self.model.remove(target, function(err)\n                    {\n                        if (err) {\n                            callback(HttpError.create(err));\n                        }\n                        else {\n                            if (context.params.attr('returnUrl'))\n                                callback(null, context.params.attr('returnUrl'));\n                            callback(null, self.result(null));\n                        }\n                    });\n                }\n                else {\n                    callback(new HttpBadRequestError());\n                }\n            }).handle('GET', function() {\n                if (context.request.route) {\n                    if (context.request.route.static) {\n                        callback(null, self.result());\n                        return;\n                    }\n                }\n\n                //get context param (id)\n                let filter = null;\n\n                const id = context.params.attr('id');\n                if (id) {\n                    //create the equivalent open data filter\n                    filter = util.format('%s eq %s',self.model.primaryKey,id);\n                }\n                else {\n                    //get the requested open data filter\n                    filter = context.params.attr('$filter');\n                }\n                if (filter) {\n                    self.model.filter(filter, function(err, q) {\n                        if (err) {\n                            callback(HttpError.create(err));\n                            return;\n                        }\n                        q.take(1, function (err, result) {\n                            try {\n                                if (err) {\n                                    callback(err);\n                                }\n                                else {\n                                    if (result.length>0)\n                                        callback(null, self.result(result));\n                                    else\n                                        callback(null, self.result(null));\n                                }\n                            }\n                            catch (e) {\n                                callback(HttpError.create(e));\n                            }\n                        });\n                    });\n                }\n                else {\n                    callback(new HttpBadRequestError());\n                }\n            }).unhandle(function() {\n                callback(new HttpMethodNotAllowedError());\n            });\n\n        }\n        catch (e) {\n            callback(HttpError.create(e));\n        }\n\n    }\n\n    schema(callback) {\n        const self = this, context = self.context;\n        context.handle('GET', function() {\n            if (self.model) {\n                //prepare client model\n                const clone = JSON.parse(JSON.stringify(self.model));\n                const m = util._extend({}, clone);\n                //delete private properties\n                const keys = Object.keys(m);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                   if (key.indexOf(\"_\")==0)\n                       delete m[key];\n                }\n                //delete other server properties\n                delete m.view;\n                delete m.source;\n                delete m.fields;\n                delete m.privileges;\n                delete m.constraints;\n                delete m.eventListeners;\n                //set fields equal attributes\n                m.attributes = JSON.parse(JSON.stringify(self.model.attributes));\n                m.attributes.forEach(function(x) {\n                    const mapping = self.model.inferMapping(x.name);\n                    if (mapping)\n                        x.mapping = JSON.parse(JSON.stringify(mapping));\n                    //delete private properties\n                    delete x.value;\n                    delete x.calculation;\n                });\n                //prepare views and view fields\n                if (m.views) {\n                    m.views.forEach(function(view) {\n                        if (view.fields) {\n                            view.fields.forEach(function(field) {\n                                if (/\\./.test(field.name)==false) {\n                                    //extend view field\n                                    const name = field.name;\n                                    const mField = m.attributes.filter(function(y) {\n                                        return (y.name==name);\n                                    })[0];\n                                    if (mField) {\n                                        for (const key in mField) {\n                                            if (mField.hasOwnProperty(key) && !field.hasOwnProperty(key)) {\n                                                field[key] = mField[key];\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    });\n                }\n                callback(null, self.result(m));\n            }\n            else {\n                callback(new HttpNotFoundError());\n            }\n\n        }).unhandle(function() {\n            callback(new HttpMethodNotAllowedError());\n        });\n    }\n\n    /**\n     * Handles data object display (e.g. /user/1/show.html, /user/1/show.json etc)\n     * @param {Function} callback\n     */\n    show(callback) {\n        try {\n            const self = this, context = self.context;\n            context.handle('GET', function() {\n                if (context.request.route) {\n                    if (context.request.route.static) {\n                        callback(null, self.result());\n                        return;\n                    }\n                }\n                let filter = null;\n                const id = context.params.attr('id');\n                if (id) {\n                    //create the equivalent open data filter\n                    filter = util.format('%s eq %s',self.model.primaryKey,id);\n                }\n                else {\n                    //get the requested open data filter\n                    filter = context.params.attr('$filter');\n                }\n                self.model.filter(filter, function(err, q) {\n                    if (err) {\n                        callback(HttpError.create(err));\n                        return;\n                    }\n                    q.take(1, function (err, result) {\n                        try {\n                            if (err) {\n                                callback(HttpError.create(e));\n                            }\n                            else {\n                                if (result.length>0)\n                                    callback(null, self.result(result));\n                                else\n                                    callback(new HttpNotFoundError('Item Not Found'));\n                            }\n                        }\n                        catch (e) {\n                            callback(HttpError.create(e));\n                        }\n                    });\n                });\n            }).unhandle(function() {\n                callback(new HttpMethodNotAllowedError());\n            });\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    /**\n     * Handles data object deletion (e.g. /user/1/remove.html, /user/1/remove.json etc)\n     * @param {Function} callback\n     */\n    remove(callback) {\n        try {\n            const self = this, context = self.context;\n            context.handle(['POST','DELETE'], function() {\n                const target = context.params[self.model.name] || context.params.data;\n                if (target) {\n                    self.model.remove(target, function(err)\n                    {\n                        if (err) {\n                            callback(HttpError.create(err));\n                        }\n                        else {\n                            if (context.params.attr('returnUrl'))\n                                callback(null, context.params.attr('returnUrl'));\n                            callback(null, self.result(target));\n                        }\n                    });\n                }\n                else {\n                    callback(new HttpBadRequestError());\n                }\n            }).unhandle(function() {\n                callback(new HttpMethodNotAllowedError());\n            });\n        }\n        catch (e) {\n            callback(HttpError.create(e))\n        }\n    }\n    /**\n     * @param {Function} callback\n     * @private\n     */\n    filter(callback) {\n\n        const self = this, params = self.context.params;\n\n        if (typeof self.model !== 'object' || self.model == null) {\n            callback(new Error('Model is of the wrong type or undefined.'));\n            return;\n        }\n\n        const filter = params.$filter, select = params.$select, search = params.$search, skip = params.$skip || 0, levels = parseInt(params.$levels), orderBy = params.$order || params.$orderby, groupBy = params.$group || params.$groupby, expand = params.$expand;\n\n        self.model.filter(filter,\n            /**\n             * @param {Error} err\n             * @param {DataQueryable} q\n             */\n             function (err, q) {\n                try {\n                    if (err) {\n                        return callback(err);\n                    }\n                    else {\n                        if ((typeof search === 'string') && (search.length>0)) {\n                            q.search(search);\n                        }\n                        //set $groupby\n                        if (groupBy) {\n                            q.groupBy.apply(q, groupBy.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }));\n                        }\n                        //set $select\n                        if (select) {\n                            q.select.apply(q, select.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }));\n                        }\n                        //set $skip\n                        if (!/^\\d+$/.test(skip)) {\n                            return callback(new HttpBadRequestError(\"Skip may be a non-negative integer.\"))\n                        }\n                        //set expandable levels\n                        if (!isNaN(levels)) {\n                            q.levels(levels);\n                        }\n                        q.skip(skip);\n                        //set $orderby\n                        if (orderBy) {\n                            orderBy.split(',').map(function(x) {\n                                return x.replace(/^\\s+|\\s+$/g, '');\n                            }).forEach(function(x) {\n                                if (/\\s+desc$/i.test(x)) {\n                                    q.orderByDescending(x.replace(/\\s+desc$/i, ''));\n                                }\n                                else if (/\\s+asc/i.test(x)) {\n                                    q.orderBy(x.replace(/\\s+asc/i, ''));\n                                }\n                                else {\n                                    q.orderBy(x);\n                                }\n                            });\n                        }\n                        if (expand) {\n                            const resolver = require(\"most-data/data-expand-resolver\");\n                            const matches = resolver.testExpandExpression(expand);\n                            if (matches && matches.length>0) {\n                                q.expand.apply(q, matches);\n                            }\n                        }\n                        //return\n                        callback(null, q);\n                    }\n                }\n                catch (e) {\n                   callback(e);\n                }\n            });\n    }\n    /**\n     *\n     * @param {Function} callback\n     */\n    index(callback) {\n\n        try {\n            const self = this, context = self.context, top = parseInt(context.params.attr('$top')), take = top > 0 ? top : (top == -1 ? top : 25);\n            const count = /^true$/ig.test(context.params.attr('$inlinecount')) || false, first = /^true$/ig.test(context.params.attr('$first')) || false, asArray = /^true$/ig.test(context.params.attr('$array')) || false;\n            TraceUtils.debug(context.request.url);\n            context.handle('GET', function() {\n                if (context.request.route) {\n                    if (context.request.route.static) {\n                        callback(null, self.result([]));\n                        return;\n                    }\n                }\n                self.filter(\n                    /**\n                     * @param {Error} err\n                     * @param {DataQueryable=} q\n                     */\n                    function(err, q) {\n                    try {\n                        if (err) {\n                            return callback(HttpError.create(err));\n                        }\n                        //apply as array parameter\n                        q.asArray(asArray);\n                        if (first) {\n                            return q.first().then(function(result) {\n                                return callback(null, self.result(result));\n                            }).catch(function(err) {\n                                return callback(HttpError.create(err));\n                            });\n                        }\n\n                        if (take<0) {\n                            return q.all().then(function(result) {\n                                if (count) {\n                                    return callback(null, self.result({\n                                        records:result,\n                                        total:result.length\n                                    }));\n                                }\n                                else {\n                                    return callback(null, self.result(result));\n                                }\n                            }).catch(function(err) {\n                                return callback(HttpError.create(err));\n                            });\n                        }\n                        else {\n                            if (count) {\n                                return q.take(take).list().then(function(result) {\n                                    return callback(null, self.result(result));\n                                }).catch(function(err) {\n                                    return callback(HttpError.create(err));\n                                });\n                            }\n                            else {\n                                return q.take(take).getItems().then(function(result) {\n                                    return callback(null, self.result(result));\n                                }).catch(function(err) {\n                                    return callback(HttpError.create(err));\n                                });\n                            }\n                        }\n                    }\n                    catch (e) {\n                        return callback(e);\n                    }\n                });\n            }).handle(['POST', 'PUT'], function() {\n                let target;\n                try {\n                    target = self.model.convert(context.params[self.model.name] || context.params.data, true);\n                }\n                catch(err) {\n                    TraceUtils.log(err);\n                    const er = new HttpError(422, \"An error occured while converting data objects.\", err.message);\n                    er.code = 'EDATA';\n                    return callback(er);\n                }\n                if (target) {\n                    self.model.save(target, function(err)\n                    {\n                        if (err) {\n                            TraceUtils.log(err);\n                            callback(HttpError.create(err));\n                        }\n                        else {\n                            callback(null, self.result(target));\n                        }\n                    });\n                }\n                else {\n                    return callback(new HttpBadRequestError());\n                }\n            }).handle('DELETE', function() {\n                //get data\n                let target;\n                try {\n                    target = self.model.convert(context.params[self.model.name] || context.params.data, true);\n                }\n                catch(err) {\n                    TraceUtils.log(err);\n                    const er = new HttpError(422, \"An error occured while converting data objects.\", err.message);\n                    er.code = 'EDATA';\n                    return callback(er);\n                }\n                if (target) {\n                    self.model.remove(target, function(err)\n                    {\n                        if (err) {\n                            callback(HttpError.create(err));\n                        }\n                        else {\n                            callback(null, self.result(target));\n                        }\n                    });\n                }\n                else {\n                    return callback(new HttpBadRequestError());\n                }\n            }).unhandle(function() {\n                return callback(new HttpMethodNotAllowedError());\n            });\n        }\n        catch (e) {\n            callback(HttpError.create(e));\n        }\n    }\n    /**\n     * Returns an instance of HttpResult class which contains a collection of items based on the specified association.\n     * This association should be a one-to-many association or many-many association.\n     * A routing for this action may be:\n     <pre class=\"prettyprint\"><code>\n     { \"url\":\"/:controller/:parent/:model/index.json\", \"mime\":\"application/json\", \"action\":\"association\" }\n     </code></pre>\n     <p>\n     or\n     </p>\n     <pre class=\"prettyprint\"><code>\n     { \"url\":\"/:controller/:parent/:model/index.html\", \"mime\":\"text/html\", \"action\":\"association\" }\n     </code></pre>\n      <pre class=\"prettyprint\"><code>\n     //get orders in JSON format\n     /GET /Party/353/Order/index.json\n     </code></pre>\n     <p>\n     This action supports common query options like $filter, $order, $top, $skip etc.\n     The result will be a result-set with associated items:\n     </p>\n     <pre class=\"prettyprint\"><code>\n        //JSON Results:\n     {\n            \"total\": 8,\n            \"skip\": 0,\n            \"records\": [\n                {\n                \"id\": 37,\n                \"customer\": 353,\n                \"orderDate\": \"2015-05-05 01:19:34.000+03:00\",\n                \"orderedItem\": {\n                    \"id\": 407,\n                    \"additionalType\": \"Product\",\n                    \"category\": \"PC Components\",\n                    \"price\": 1625.49,\n                    \"model\": \"HR5845\",\n                    \"releaseDate\": \"2015-09-20 03:35:33.000+03:00\",\n                    \"name\": \"Nvidia GeForce GTX 650 Ti Boost\",\n                    \"dateCreated\": \"2015-11-23 14:53:04.884+02:00\",\n                    \"dateModified\": \"2015-11-23 14:53:04.887+02:00\"\n                },\n                \"orderNumber\": \"OFV804\",\n                \"orderStatus\": {\n                    \"id\": 1,\n                    \"name\": \"Delivered\",\n                    \"alternateName\": \"OrderDelivered\",\n                    \"description\": \"Representing the successful delivery of an order.\"\n                },\n                \"paymentDue\": \"2015-05-25 01:19:34.000+03:00\",\n                \"paymentMethod\": {\n                    \"id\": 6,\n                    \"name\": \"Direct Debit\",\n                    \"alternateName\": \"DirectDebit\",\n                    \"description\": \"Payment by direct debit\"\n                },\n                \"additionalType\": \"Order\",\n                \"dateCreated\": \"2015-11-23 21:00:18.264+02:00\",\n                \"dateModified\": \"2015-11-23 21:00:18.266+02:00\"\n                }\n            ...]\n       ...\n    }\n    </code></pre>\n     * @param {Function} callback - A callback function where the first argument will contain the Error object if an error occured, or null otherwise.\n     */\n    association(callback) {\n        try {\n            const self = this, parent = self.context.params.parent, model = self.context.params.model;\n            if (_.isNil(parent) || _.isNil(model)) {\n                callback(new HttpBadRequestError());\n                return;\n            }\n            self.model.where(self.model.primaryKey).equal(parent).select([self.model.primaryKey]).first(function(err, result) {\n                if (err) {\n                    TraceUtils.log(err);\n                    callback(new HttpServerError());\n                    return;\n                }\n                if (_.isNil(result)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                //get parent object (DataObject)\n                const obj = self.model.convert(result);\n                const associatedModel = self.context.model(model);\n                if (_.isNil(associatedModel)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                /**\n                 * Search for object junction\n                 */\n                let field = self.model.attributes.filter(function(x) { return x.type === associatedModel.name; })[0], mapping;\n                if (field) {\n                    /**\n                     * Get association mapping fo this field\n                     * @type {DataAssociationMapping}\n                     */\n                    mapping = self.model.inferMapping(field.name);\n                    if (mapping) {\n                        if ((mapping.parentModel===self.model.name) && (mapping.associationType==='junction')) {\n                            /**\n                             * @type {DataQueryable}\n                             */\n                            const junction = obj.property(field.name);\n                            junction.model.filter(self.context.params, function(err, q) {\n                                if (err) {\n                                    callback(err);\n                                }\n                                else {\n                                    //merge properties\n                                    if (q.query.$select) { junction.query.$select = q.query.$select; }\n                                    if (q.query.$group) { junction.query.$group = q.query.$group; }\n                                    if (q.query.$order) { junction.query.$order = q.query.$order; }\n                                    if (q.query.$prepared) { junction.query.$where = q.query.$prepared; }\n                                    if (q.query.$skip) { junction.query.$skip = q.query.$skip; }\n                                    if (q.query.$take) { junction.query.$take = q.query.$take; }\n                                    junction.list(function(err, result) {\n                                        callback(err, self.result(result));\n                                    });\n                                }\n                            });\n                            return;\n                        }\n                    }\n                }\n                field = associatedModel.attributes.filter(function(x) { return x.type === self.model.name; })[0];\n                if (_.isNil(field)) {\n                    callback(new HttpNotFoundError());\n                    return;\n                }\n                //get field mapping\n                mapping = associatedModel.inferMapping(field.name);\n                associatedModel.filter(self.context.params, function(err, q) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        q.where(mapping.childField).equal(parent).list(function(err, result) {\n                            callback(err, self.result(result));\n                        });\n                    }\n                });\n            });\n        }\n        catch(e) {\n            TraceUtils.log(e);\n            callback(e, new HttpServerError());\n        }\n    }\n}\n"]}