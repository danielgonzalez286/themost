{"version":3,"sources":["index.es6"],"names":["Most","options","runtimeParser","req","res","next","ctx","current","createContext","request","on","finalize","response","finished","end","processRequest","err","status","test","get","config","settings","auth","page","loginPage","set","concat","encodeURIComponent","url","e","log","ejs","require","isNil","_headerSent","readFile","join","__dirname","readErr","data","str","render","error","httpErr","message","stack","writeHead","write"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport {_} from 'lodash';\nimport path from 'path';\nimport {HttpApplication} from './app';\nimport {TraceUtils} from '@themost/common/utils';\nimport {HttpError} from '@themost/common/errors';\nimport fs from 'fs';\n\nexport * from './mvc';\nexport * from './files';\nexport * from './context';\nexport * from './app';\n\nexport class Most {\n    /**\n     * Most Web Framework Express Parser\n     * @param {Object=} options\n     */\n    static runtime(options) {\n        return function runtimeParser(req, res, next) {\n            //create context\n            const ctx = HttpApplication.current.createContext(req,res);\n            ctx.request.on('close', function() {\n                //client was disconnected abnormally\n                //finalize data context\n                if (typeof ctx !== 'undefined' && ctx !=null) {\n                    ctx.finalize(function() {\n                        if (ctx.response) {\n                            //if response is alive\n                            if (ctx.response.finished == false)\n                            //end response\n                                ctx.response.end();\n                        }\n                    });\n                }\n            });\n            //process request\n            HttpApplication.current.processRequest(ctx, function(err) {\n                if (err) {\n                    ctx.finalize(function() {\n                        next(err);\n                    });\n                }\n                else {\n                    ctx.finalize(function() {\n                        ctx.response.end();\n                    });\n                }\n            });\n        }\n    }\n\n    /**\n     * Expression handler for Access Denied HTTP errors (401).\n     */\n    static unauthorized() {\n        return function(err, req, res, next)\n        {\n            try {\n                if (err.status==401)  {\n                    if (/text\\/html/g.test(req.get('accept'))) {\n                        if (HttpApplication.current.config.settings) {\n                            if (HttpApplication.current.config.settings.auth) {\n                                const page = HttpApplication.current.config.settings.auth.loginPage || '/login.html';\n                                res.set('Location', page.concat('?returnUrl=', encodeURIComponent(req.url)));\n                                res.status(302).end();\n                                return;\n                            }\n                        }\n                    }\n                }\n                next(err);\n            }\n            catch(e) {\n                TraceUtils.log(e);\n                next(err);\n            }\n        };\n    }\n\n    static error() {\n        return function(err, request, response, next)\n        {\n            try {\n                const ejs = require('ejs');\n                if (_.isNil(response) || _.isNil(request)) {\n                    next(err);\n                }\n                if (!/text\\/html/g.test(request.get('accept'))) {\n                    next(err);\n                }\n                else {\n                    if (response._headerSent) {\n                        next(err);\n                        return;\n                    }\n                    fs.readFile(path.join(__dirname, './resources/http-error.html.ejs'), 'utf8', function (readErr, data) {\n                        if (readErr) {\n                            //log process error\n                            TraceUtils.log(readErr);\n                            next(err);\n                            return;\n                        }\n                        //compile data\n                        let str;\n                        try {\n                            if (err instanceof HttpError) {\n                                str = ejs.render(data, { error:err });\n                            }\n                            else {\n                                const httpErr = new HttpError(500, null, err.message);\n                                httpErr.stack = err.stack;\n                                str = ejs.render(data, {error: httpErr});\n                            }\n                        }\n                        catch (e) {\n                            TraceUtils.log(e);\n                            next(err);\n                            return;\n                        }\n                        //write status header\n                        response.writeHead(err.status || 500 , { \"Content-Type\": \"text/html\" });\n                        response.write(str);\n                        response.end();\n                    });\n                }\n            }\n            catch(e) {\n                TraceUtils.log(e);\n                next(err);\n            }\n        };\n    }\n}\n\n"]}