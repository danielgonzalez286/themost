{"version":3,"sources":["http_route.es6"],"names":["HttpRoute","route","url","routeData","patterns","int","boolean","decimal","float","guid","urlToMatch","self","Error","length","str1","patternMatch","k","indexOf","substr","re","match","exec","params","push","name","pattern","RegExp","str","replace","matcher","i","param","test","value","forEach","x","hasOwnProperty"],"mappings":"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","file":"http_route.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n/**\n * @classdesc HttpRoute class provides routing functionality to HTTP requests\n * @class\n * */\nexport class HttpRoute {\n    /**\n     * @constructor\n     * @param {string|*=} route - A formatted string or an object which represents an HTTP route response url (e.g. /pages/:name.html, /user/edit.html).\n     */\n    constructor(route) {\n        if (typeof route === 'string') {\n            this.route = { url:route };\n        }\n        else if (typeof route === 'object') {\n            this.route = route;\n        }\n        this.routeData = { };\n\n        this.patterns = {\n            int:function() {\n                return \"^[1-9]([0-9]*)$\";\n            },\n            boolean:function() {\n                return \"^true|false$\"\n            },\n            decimal:function() {\n                return \"^\\d*\\.?\\d*$\";\n            },\n            float:function() {\n                return \"^\\d*\\.?\\d*$\";\n            },\n            guid:function() {\n                return \"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$\";\n            }\n        }\n\n    }\n\n    /**\n     * @param {string} urlToMatch\n     * @return {boolean}\n     */\n    isMatch(urlToMatch) {\n        const self = this;\n        if (typeof self.route === 'undefined' || self.route==null) {\n            throw new Error(\"Route may not be null\");\n        }\n        self.routeData = self.routeData || { };\n        if (typeof urlToMatch !== 'string')\n            return false;\n        if (urlToMatch.length == 0)\n            return false;\n        let str1 = urlToMatch, patternMatch;\n        const k = urlToMatch.indexOf('?');\n        if (k >= 0)\n            str1 = urlToMatch.substr(0, k);\n        const re = /(\\{([\\w\\[\\]]+)(?::\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*})+))?})|((:)([\\w\\[\\]]+))/ig;\n        let match = re.exec(this.route.url);\n        const params = [];\n        while(match) {\n            if (typeof match[2] === 'undefined') {\n                //parameter with colon (e.g. :id)\n                params.push({\n                    name: match[6]\n                });\n            }\n            else if (typeof match[3] !== 'undefined') {\n                //common expressions\n                patternMatch = match[3];\n                if (typeof self.patterns[match[3]] === 'function') {\n                    patternMatch = self.patterns[match[3]]();\n                }\n                params.push({\n                    name: match[2],\n                    pattern: new RegExp(patternMatch, \"ig\")\n                });\n            }\n            else {\n                params.push({\n                    name: match[2]\n                });\n            }\n            match = re.exec(this.route.url);\n        }\n        const str = this.route.url.replace(re, \"([\\\\w-]+)\"), matcher = new RegExp(\"^\" + str + \"$\", \"ig\");\n        match = matcher.exec(str1);\n        if (typeof match === 'undefined' || match == null) {\n            return false;\n        }\n        for (let i = 0; i < params.length; i++) {\n            const param = params[i];\n            if (typeof param.pattern !== 'undefined') {\n                if (!param.pattern.test(match[i+1])) {\n                    return false;\n                }\n            }\n            param.value = match[i+1];\n        }\n        params.forEach(function(x) {\n            self.routeData[x.name] = x.value;\n        });\n        if (self.route.hasOwnProperty(\"controller\")) { self.routeData[\"controller\"] = self.route[\"controller\"]; }\n        if (self.route.hasOwnProperty(\"action\")) { self.routeData[\"action\"] = self.route[\"action\"]; }\n        return true;\n    }\n\n    /**\n     * @param {string|*=} route - A formatted string or an object which represents an HTTP route response url (e.g. /pages/:name.html, /user/edit.html).\n     * @returns {HttpRoute}\n     */\n    static create(route) {\n        return new HttpRoute(route);\n    }\n\n}\n"]}