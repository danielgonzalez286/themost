{"version":3,"sources":["basic_auth.es6"],"names":["BasicAuthHandler","context","callback","authorizationArgs","parseBasicAuthorization","request","headers","application","config","settings","auth","providerPath","provider","svc","test","require","mapPath","createInstance","userName","match","USERNAME_REGEXP","Error","login","userPassword","e","s","re","exec","replace","token","buffer","Buffer","matched","toString","err","log"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;;;AAEA;;;;IAIqBA,gB;;;;;;;4CA8BGC,O,EAASC,Q,EAAU;AACnCA,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAI;AACA;;;AAGA,oBAAMC,oBAAoBH,iBAAiBI,uBAAjB,CAAyCH,QAAQI,OAAR,CAAgBC,OAAhB,CAAwB,eAAxB,CAAzC,CAA1B;AACA,oBAAI,OAAOH,iBAAP,KAA6B,WAAjC,EAA8C;AAC1C;AACAF,4BAAQM,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApC,GAA2CT,QAAQM,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApC,IAA4C,EAAvF;AACA,wBAAMC,eAAeV,QAAQM,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApC,CAAyCE,QAAzC,IAAqD,iBAA1E;AACA;AACA,wBAAIC,YAAJ;AACA,wBAAI,MAAMC,IAAN,CAAWH,YAAX,CAAJ,EAA8B;AAC1BE,8BAAME,QAAQd,QAAQM,WAAR,CAAoBS,OAApB,CAA4BL,YAA5B,CAAR,CAAN;AACH,qBAFD,MAGK;AACDE,8BAAME,QAAQJ,YAAR,CAAN;AACH;AACD,wBAAI,OAAOE,IAAII,cAAX,KAA8B,UAAlC,EAA8C;AAC1C;AACA,4BAAML,WAAWC,IAAII,cAAJ,CAAmBhB,OAAnB,CAAjB;AACA;AACA,4BAAI,CAACE,kBAAkBe,QAAlB,CAA2BC,KAA3B,CAAiCnB,iBAAiBoB,eAAlD,CAAL,EAAyE;AACrElB,qCAAS,IAAImB,KAAJ,CAAU,gEAAV,CAAT;AACA;AACH;AACDT,iCAASU,KAAT,CAAenB,kBAAkBe,QAAjC,EAA2Cf,kBAAkBoB,YAA7D,EAA2ErB,QAA3E;AACH,qBATD,MAWIA,SAAS,IAAT;AACP,iBAxBD,MAyBK;AACDA,6BAAS,IAAT;AACH;AACJ,aAjCD,CAkCA,OAAMsB,CAAN,EAAS;AACLtB,yBAASsB,CAAT;AACH;AACJ;;;;AApED;;;;;gDAK+BC,C,EAAG;AAC9B,gBAAI;AACA,oBAAI,OAAOA,CAAP,KAAa,QAAjB,EACI;AACJ;AACA,oBAAMC,KAAK,wBAAX;AACA,oBAAMP,QAAQO,GAAGC,IAAH,CAAQF,EAAEG,OAAF,CAAU,OAAV,EAAkB,EAAlB,CAAR,CAAd;AACA,oBAAIT,KAAJ,EAAW;AACP;AACA,wBAAMU,QAAQV,MAAM,CAAN,CAAd;AACA;AACA,wBAAMW,SAAS,IAAIC,MAAJ,CAAWF,KAAX,EAAkB,QAAlB,CAAf;AACA;AACA,wBAAMG,UAAU,cAAcL,IAAd,CAAmBG,OAAOG,QAAP,EAAnB,CAAhB;AACA,wBAAID,OAAJ,EAAa;AACT,+BAAO,EAAEd,UAASc,QAAQ,CAAR,CAAX,EAAuBT,cAAaS,QAAQ,CAAR,CAApC,EAAP;AACH;AACJ;AACJ,aAjBD,CAkBA,OAAME,GAAN,EAAW;AACP,kCAAWC,GAAX,CAAeD,GAAf;AACH;AACJ;;;;;;kBA5BgBlC,gB;;;AAwErBA,iBAAiBoB,eAAjB,GAAmC,4BAAnC","file":"basic_auth.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {TraceUtils} from '@themost/common/utils';\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class BasicAuthHandler {\n    /**\n     * @param {string} s\n     * @returns {{userName:string, userPassword:string}|undefined}\n     * @ignore\n     */\n    static parseBasicAuthorization(s) {\n        try {\n            if (typeof s !== 'string')\n                return;\n            //get authorization type (basic)\n            const re = /\\s?(Basic)\\s+(.*)\\s?/ig;\n            const match = re.exec(s.replace(/^\\s+/g,''));\n            if (match) {\n                //get authorization token\n                const token = match[2];\n                //decode token\n                const buffer = new Buffer(token, 'base64');\n                //get args e.g. username:password\n                const matched = /(.*):(.*)/ig.exec(buffer.toString());\n                if (matched) {\n                    return { userName:matched[1], userPassword:matched[2] };\n                }\n            }\n        }\n        catch(err) {\n            TraceUtils.log(err);\n        }\n    }\n\n    authenticateRequest(context, callback) {\n        callback = callback || function() {};\n        try {\n            /**\n             * @type {{userName: string, userPassword: string}|*}\n             */\n            const authorizationArgs = BasicAuthHandler.parseBasicAuthorization(context.request.headers['authorization']);\n            if (typeof authorizationArgs !== 'undefined') {\n                //ensure settings\n                context.application.config.settings.auth = context.application.config.settings.auth || { };\n                const providerPath = context.application.config.settings.auth.provider || './services/auth';\n                //get auth provider\n                let svc;\n                if (/^\\//.test(providerPath)) {\n                    svc = require(context.application.mapPath(providerPath));\n                }\n                else {\n                    svc = require(providerPath);\n                }\n                if (typeof svc.createInstance === 'function') {\n                    //create provider instance\n                    const provider = svc.createInstance(context);\n                    //validate credentials\n                    if (!authorizationArgs.userName.match(BasicAuthHandler.USERNAME_REGEXP)) {\n                        callback(new Error('Wrong username format. Please contact to system administrator.'));\n                        return;\n                    }\n                    provider.login(authorizationArgs.userName, authorizationArgs.userPassword, callback);\n                }\n                else\n                    callback(null);\n            }\n            else {\n                callback(null);\n            }\n        }\n        catch(e) {\n            callback(e);\n        }\n    }\n}\n\nBasicAuthHandler.USERNAME_REGEXP = /^[a-zA-Z0-9\\.\\@_-]{1,255}$/;\n\n"]}