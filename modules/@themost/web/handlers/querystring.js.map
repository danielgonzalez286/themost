{"version":3,"sources":["querystring.es6"],"names":["caseInsensitiveAttribute","name","re","RegExp","p","Object","keys","filter","x","test","QuerystringHandler","context","callback","request","params","attr","url","indexOf","assign","parse","substring","e"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;;;AACA;;AACA;;;;;;;;AACA;;;;;;AAMA,SAASA,wBAAT,CAAkCC,IAAlC,EAAwC;AAAA;;AACpC,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAAA;AAC1B,gBAAI,MAAKA,IAAL,CAAJ,EACI;AAAA,uBAAO,MAAKA,IAAL;AAAP;AACJ;AACA,gBAAMC,KAAK,IAAIC,MAAJ,CAAW,MAAMF,IAAN,GAAa,GAAxB,EAA4B,GAA5B,CAAX;AACA,gBAAMG,IAAIC,OAAOC,IAAP,QAAkBC,MAAlB,CAAyB,UAASC,CAAT,EAAY;AAAE,uBAAON,GAAGO,IAAH,CAAQD,CAAR,CAAP;AAAoB,aAA3D,EAA6D,CAA7D,CAAV;AACA,gBAAIJ,CAAJ,EACI;AAAA,uBAAO,MAAKA,CAAL;AAAP;AAPsB;;AAAA;AAQ7B;AACD,WAAO,IAAP;AACH;AACD;;;;;IAIqBM,kB;;;;;;;;AACjB;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5BD,sBAAUA,WAAW,EAArB;AACAC,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAMC,UAAUF,QAAQE,OAAxB;AACA,gBAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChCD;AACA;AACH;AACD,gBAAI;AACAD,wBAAQG,MAAR,GAAiBH,QAAQG,MAAR,IAAkB,EAAnC;AACA;AACAH,wBAAQG,MAAR,CAAeC,IAAf,GAAsBf,wBAAtB;AACA;AACA,oBAAIa,QAAQG,GAAR,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAA/B,EACI,UAAEC,MAAF,CAASP,QAAQG,MAAjB,EAAyB,sBAAYK,KAAZ,CAAkBN,QAAQG,GAAR,CAAYI,SAAZ,CAAsBP,QAAQG,GAAR,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAAjD,CAAlB,CAAzB;AACJL;AACH,aARD,CASA,OAAMS,CAAN,EAAS;AACLT,yBAASS,CAAT;AACH;AACJ;;;;;;kBA1BgBX,kB","file":"querystring.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {_} from 'lodash';\nimport querystring from 'querystring';\n/**\n * Provides a case insensitive attribute getter\n * @param name\n * @returns {*}\n * @private\n */\nfunction caseInsensitiveAttribute(name) {\n    if (typeof name === 'string') {\n        if (this[name])\n            return this[name];\n        //otherwise make a case insensitive search\n        const re = new RegExp('^' + name + '$','i');\n        const p = Object.keys(this).filter(function(x) { return re.test(x); })[0];\n        if (p)\n            return this[p];\n    }\n    return null;\n}\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class QuerystringHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        context = context || {};\n        callback = callback || function() {};\n        const request = context.request;\n        if (typeof request === 'undefined') {\n            callback();\n            return;\n        }\n        try {\n            context.params = context.params || {};\n            //apply case insensitivity search in params object\n            context.params.attr = caseInsensitiveAttribute;\n            //add query string params\n            if (request.url.indexOf('?') > 0)\n                _.assign(context.params, querystring.parse(request.url.substring(request.url.indexOf('?') + 1)));\n            callback();\n        }\n        catch(e) {\n            callback(e);\n        }\n    }\n}"]}