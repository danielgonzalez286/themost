{"version":3,"sources":["restrict_access.es6"],"names":["LocationSetting","RestrictHandler","context","callback","is","user","name","prototype","isRestricted","err","result","log","er","application","errors","unauthorized","response","end","e","isNil","request","config","settings","auth","loginPage","requestUrl","parse","url","locations","pathname","i","length","location","test","path","indexOf","replace","allow","isNotRestricted"],"mappings":"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","file":"restrict_access.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {HttpUnauthorizedError,HttpBadRequestError} from '@themost/common/errors';\nimport {TraceUtils} from '@themost/common/utils';\nimport {_} from 'lodash';\nimport url from 'url';\n\n/**\n * @class\n * @property {string} description - Gets or sets a string that represents the description of this object\n * @property {*} path - Gets or sets a string that represents the target path associated with access settings.\n * @property {string} allow - Gets or sets a comma delimited string that represents the collection of users or groups where this access setting will be applied. A wildcard (*) may be used.\n * @property {string} deny - Gets or sets a string that represents the collection of users or groups where this access setting will be applied. A wildcard (*) may be used.\n */\nclass LocationSetting {\n    constructor() {\n        //\n    }\n}\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class RestrictHandler {\n    /**\n     * Authenticates an HTTP request and sets user or anonymous identity.\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    authorizeRequest(context, callback) {\n        try {\n            if (context.is('OPTIONS')) { return callback(); }\n            if (context.user.name=='anonymous')\n            {\n                RestrictHandler.prototype.isRestricted(context, function(err, result) {\n                    if (err) {\n                        TraceUtils.log(err);\n                        callback(new HttpUnauthorizedError('Access denied'));\n                    }\n                    else if (result) {\n                        const er = new HttpUnauthorizedError();\n                        context.application.errors.unauthorized(context,er,function(err) {\n                            if (err) {\n                                return callback(err);\n                            }\n                            context.response.end();\n                            return callback(er);\n                        });\n                    }\n                    else {\n                        callback();\n                    }\n                });\n            }\n            else {\n                callback();\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n\n    isNotRestricted(context, callback) {\n        try {\n            if (_.isNil(context)) {\n                return callback(new HttpBadRequestError());\n            }\n            if (_.isNil(context.request)) {\n                return callback(new HttpBadRequestError());\n            }\n            //ensure settings (and auth settings)\n            context.application.config.settings = context.application.config.settings || {};\n            /**\n             * @type {{loginPage:string=,locations:Array}|*}\n             */\n            context.application.config.settings.auth = context.application.config.settings.auth || {};\n            //get login page, request url and locations\n            const loginPage = context.application.config.settings.auth.loginPage || '/login.html', requestUrl = url.parse(context.request.url), locations = context.application.config.settings.auth.locations || [];\n            if (requestUrl.pathname===loginPage) {\n                return callback(null, true);\n            }\n            for (let i = 0; i < locations.length; i++) {\n                /**\n                 * @type {*|LocationSetting}\n                 */\n                const location = locations[i];\n                if (/\\*$/.test(location.path)) {\n                    //wildcard search /something/*\n                    if ((requestUrl.pathname.indexOf(location.path.replace(/\\*$/,''))==0) && (location.allow=='*')) {\n                        return callback(null, true);\n                    }\n                }\n                else {\n                    if ((requestUrl.pathname===location.path) && (location.allow=='*')) {\n                        return callback(null, true);\n                    }\n                }\n            }\n            return callback(null, false);\n        }\n        catch(e) {\n            TraceUtils.log(e);\n            return callback(null, false);\n        }\n\n    }\n\n    isRestricted(context, callback) {\n        RestrictHandler.prototype.isNotRestricted(context, function(err, result) {\n            if (err) { return callback(err); }\n            callback(null, !result);\n        });\n    }\n\n}"]}