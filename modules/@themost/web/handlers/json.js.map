{"version":3,"sources":["json.es6"],"names":["jsonParser","JsonHandler","context","callback","request","response","headers","contentType","test","application","config","settings","json","limit","err","body","Buffer","params","data","JSON","parse","e"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;;;AACA;;;;;;;;AAEA,IAAIA,mBAAJ;AACA;;;;;IAIqBC,W;;;;;;;;AACjB;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5B,gBAAMC,UAAUF,QAAQE,OAAxB;AAAA,gBAAiCC,WAAWH,QAAQG,QAApD;AACAD,oBAAQE,OAAR,GAAkBF,QAAQE,OAAR,IAAmB,EAArC;AACA,gBAAMC,cAAcH,QAAQE,OAAR,CAAgB,cAAhB,CAApB;AACA,gBAAI,sBAAsBE,IAAtB,CAA2BD,WAA3B,CAAJ,EAA6C;AACzC;AACA;AACA,oBAAI,OAAOP,UAAP,KAAsB,WAA1B,EAAuC;AACnC;AACAE,4BAAQO,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,GAAsCT,QAAQO,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,IAAuC,EAA7E;AACA;AACAT,4BAAQO,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApC,GAA2CV,QAAQO,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApC,IAA4C,EAAEC,OAAM,MAAR,EAAvF;AACA;AACAb,iCAAa,qBAAWY,IAAX,CAAgBV,QAAQO,WAAR,CAAoBC,MAApB,CAA2BC,QAA3B,CAAoCC,IAApD,CAAb;AACH;AACD;AACAZ,2BAAWI,OAAX,EAAoBC,QAApB,EAA+B,UAASS,GAAT,EAAc;AACzC,wBAAIA,GAAJ,EAAS;AACLX,iCAASW,GAAT;AACH,qBAFD,MAGK;AACD,4BAAI;AACA,gCAAIV,QAAQW,IAAZ,EAAkB;AACf;AACC,oCAAIX,QAAQW,IAAR,YAAwBC,MAA5B,EAAoC;AAChCd,4CAAQe,MAAR,CAAeC,IAAf,GAAsBC,KAAKC,KAAL,CAAWhB,QAAQW,IAAnB,CAAtB;AACH,iCAFD,MAGK,IAAI,QAAOX,QAAQW,IAAf,MAAwB,QAA5B,EAAsC;AACvCb,4CAAQe,MAAR,CAAeC,IAAf,GAAsBd,QAAQW,IAA9B;AACH;AACFZ;AACF;AACJ,yBAXD,CAYA,OAAMkB,CAAN,EAAS;AACLlB,qCAASkB,CAAT;AACH;AAEJ;AACJ,iBAtBD;AAuBH,aAnCD,MAoCK;AACDlB;AACH;AACJ;;;;;;kBAjDgBF,W","file":"json.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport bodyParser from 'body-parser';\n\nlet jsonParser;\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class JsonHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        const request = context.request, response = context.response;\n        request.headers = request.headers || {};\n        const contentType = request.headers['content-type'];\n        if (/^application\\/json/i.test(contentType)) {\n            //change: 15-Feb 2016\n            //description get json body limit from application configuration (settings#json.limit)\n            if (typeof jsonParser === 'undefined') {\n                //ensure settings\n                context.application.config.settings = context.application.config.settings || { };\n                //ensure json settings (the default limit is 100kb)\n                context.application.config.settings.json = context.application.config.settings.json || { limit:102400 };\n                //get json parser\n                jsonParser = bodyParser.json(context.application.config.settings.json);\n            }\n            //parse request data\n            jsonParser(request, response , function(err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    try {\n                        if (request.body) {\n                           //try parse\n                            if (request.body instanceof Buffer) {\n                                context.params.data = JSON.parse(request.body);\n                            }\n                            else if (typeof request.body === 'object') {\n                                context.params.data = request.body;\n                            }\n                           callback();\n                        }\n                    }\n                    catch(e) {\n                        callback(e);\n                    }\n\n                }\n            });\n        }\n        else {\n            callback();\n        }\n    }\n}\n"]}