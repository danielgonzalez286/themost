{"version":3,"sources":["post.es6"],"names":["PostHandler","context","callback","request","socket","headers","test","f","IncomingForm","parse","err","form","files","assign","params","parseForm","e","log","Error"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AAEA;;;;AACA;;AACA;;AAEA;;;;;;;;AAEA;;;;IAIqBA,W;;;;;;;;AACjB;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5B,gBAAI;AACA,oBAAMC,UAAUF,QAAQE,OAAxB;AACA;AACA,oBAAI,OAAOA,QAAQC,MAAf,KAA0B,WAA9B,EAA2C;AACvCF;AACH,iBAFD,MAGK;AACDC,4BAAQE,OAAR,GAAkBF,QAAQE,OAAR,IAAmB,EAArC;AACA,wBAAI,uCAAuCC,IAAvC,CAA4CH,QAAQE,OAAR,CAAgB,cAAhB,CAA5C,CAAJ,EAAkF;AAC9E;AACA,4BAAME,IAAI,IAAI,qBAAWC,YAAf,EAAV;AACAD,0BAAEE,KAAF,CAAQN,OAAR,EAAiB,UAAUO,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACzC,gCAAIF,GAAJ,EAAS;AACL,uCAAOR,SAASQ,GAAT,CAAP;AACH;AACD,gCAAI;AACA;AACA,oCAAIC,IAAJ,EAAU;AACN,8CAAEE,MAAF,CAASZ,QAAQa,MAAjB,EAAyB,iBAAUC,SAAV,CAAoBJ,IAApB,CAAzB;AACH;AACD;AACA,oCAAIC,KAAJ,EACI,UAAEC,MAAF,CAASZ,QAAQa,MAAjB,EAAyBF,KAAzB;AACJV;AACH,6BATD,CAUA,OAAOQ,GAAP,EAAY;AACRR,yCAASQ,GAAT;AACH;AACJ,yBAjBD;AAkBH,qBArBD,MAsBK;AACDR;AACH;AAEJ;AACJ,aAnCD,CAoCA,OAAQc,CAAR,EAAW;AACP,kCAAWC,GAAX,CAAeD,CAAf;AACAd,yBAAS,IAAIgB,KAAJ,CAAU,8DAAV,CAAT;AACH;AAEJ;;;;;;kBAhDgBlB,W","file":"post.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport formidable from 'formidable';\nimport {_} from 'lodash';\nimport {LangUtils} from '@themost/common/utils';\nimport {TraceUtils} from '@themost/common/utils';\nimport xml from 'most-xml';\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class PostHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        try {\n            const request = context.request;\n            //extend params object (parse form data)\n            if (typeof request.socket === 'undefined') {\n                callback();\n            }\n            else {\n                request.headers = request.headers || {};\n                if (/^application\\/x-www-form-urlencoded/i.test(request.headers['content-type'])) {\n                    //use formidable to parse request data\n                    const f = new formidable.IncomingForm();\n                    f.parse(request, function (err, form, files) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        try {\n                            //add form\n                            if (form) {\n                                _.assign(context.params, LangUtils.parseForm(form));\n                            }\n                            //add files\n                            if (files)\n                                _.assign(context.params, files);\n                            callback();\n                        }\n                        catch (err) {\n                            callback(err);\n                        }\n                    });\n                }\n                else {\n                    callback();\n                }\n\n            }\n        }\n        catch  (e) {\n            TraceUtils.log(e);\n            callback(new Error(\"An internal server error occured while parsing request data.\"));\n        }\n\n    }\n}\n"]}