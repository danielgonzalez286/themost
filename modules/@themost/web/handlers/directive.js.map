{"version":3,"sources":["directive.es6"],"names":["HttpInternalProvider","$context","$qs","$http","requestConfig","config","method","cookie","request","headers","angular","extend","deferred","defer","promise","success","fn","then","response","data","status","error","application","executeRequest","err","reject","message","statusCode","body","resolve","forEach","name","url","DirectiveHandler","args","callback","context","view","target","test","contentType","result","document","parentWindow","app","module","promises","$sceDelegateProvider","resourceUrlWhitelist","service","$q","push","when","all","Object","keys","directives","directive","services","filters","filter","controllers","controller","appElement","element","find","get","injector","bootstrap","innerHTML","reason","Error","e"],"mappings":"AAAA;;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;;;;;AAQA,SAASA,oBAAT,CAA8BC,QAA9B,EAAwCC,GAAxC,EAA6C;;AAEzC,aAASC,KAAT,CAAeC,aAAf,EAA8B;AAC1B,YAAMC,SAAS;AACXC,oBAAQ,KADG;AAEXC,oBAAQN,SAASO,OAAT,CAAiBC,OAAjB,CAAyBF;AAFtB,SAAf;AAIAG,gBAAQC,MAAR,CAAeN,MAAf,EAAuBD,aAAvB;AACA,YAAMQ,WAAWV,IAAIW,KAAJ,EAAjB;AAAA,YAA8BC,UAAUF,SAASE,OAAjD;AACAA,gBAAQC,OAAR,GAAkB,UAASC,EAAT,EAAa;AAC3BF,oBAAQG,IAAR,CAAa,UAASC,QAAT,EAAmB;AAC5BF,mBAAGE,SAASC,IAAZ,EAAkBD,SAASE,MAA3B,EAAmCF,SAAST,OAA5C,EAAqDJ,MAArD;AACH,aAFD;AAGA,mBAAOS,OAAP;AACH,SALD;AAMAA,gBAAQO,KAAR,GAAgB,UAASL,EAAT,EAAa;AACzBF,oBAAQG,IAAR,CAAa,IAAb,EAAmB,UAASC,QAAT,EAAmB;AAClCF,mBAAGE,SAASC,IAAZ,EAAkBD,SAASE,MAA3B,EAAmCF,SAAST,OAA5C,EAAqDJ,MAArD;AACH,aAFD;AAGA,mBAAOS,OAAP;AACH,SALD;;AAOAb,iBAASqB,WAAT,CAAqBC,cAArB,CAAoClB,MAApC,EAA4C,UAASmB,GAAT,EAAcN,QAAd,EAAwB;AAChE,gBAAIM,GAAJ,EAAS;AACLZ,yBAASa,MAAT,CAAgB,EAAEN,MAAMK,IAAIE,OAAZ,EAAqBN,QAAO,GAA5B,EAAiCX,SAAQ,EAAzC,EAAhB;AACH,aAFD,MAGK;AACDS,yBAASE,MAAT,GAAkBF,SAASS,UAA3B;AACAT,yBAASC,IAAT,GAAgBD,SAASU,IAAzB;AACAhB,yBAASiB,OAAT,CAAiBX,QAAjB;AACH;AACJ,SATD;;AAWA,eAAOJ,OAAP;AAEH;;AAED,KAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,EAA0B,OAA1B,EAAmCgB,OAAnC,CAA2C,UAASC,IAAT,EAAe;AACtD5B,cAAM4B,IAAN,IAAc,UAASC,GAAT,EAAc3B,MAAd,EAAsB;AAChC,mBAAOF,MAAMO,QAAQC,MAAR,CAAeN,UAAU,EAAzB,EAA6B;AACtCC,wBAAQyB,IAD8B;AAEtCC,qBAAKA;AAFiC,aAA7B,CAAN,CAAP;AAIH,SALD;AAMH,KAPD;;AASA,KAAC,MAAD,EAAS,KAAT,EAAgBF,OAAhB,CAAwB,UAASC,IAAT,EAAe;AACnC5B,cAAM4B,IAAN,IAAc,UAASC,GAAT,EAAcb,IAAd,EAAoBd,MAApB,EAA4B;AACtC,mBAAOF,MAAMO,QAAQC,MAAR,CAAeN,UAAU,EAAzB,EAA6B;AACtCC,wBAAQyB,IAD8B;AAEtCC,qBAAKA,GAFiC;AAGtCb,sBAAMA;AAHgC,aAA7B,CAAN,CAAP;AAKH,SAND;AAOH,KARD;;AAUA,WAAOhB,KAAP;AACH;;AAED;;;;;IAIqB8B,gB;;;;;;;;AACjB;;;;0CAIkBC,I,EAAMC,Q,EAAU;AAC9B,gBAAI;AAAA;AACAA,+BAAWA,YAAY,YAAW,CAAE,CAApC;AACA;AACA,wBAAMC,UAAUF,KAAKE,OAArB;AAAA,wBAA8BC,OAAOH,KAAKI,MAA1C;AACA;AACA,wBAAI,OAAOF,OAAP,KAAmB,WAAnB,IAAkCA,YAAY,IAAlD,EAAwD;AACpDD;AACA;AAAA;AAAA;AACH;AACD;AACA,wBAAI,OAAOE,IAAP,KAAgB,WAAhB,IAA+BA,SAAS,IAA5C,EAAkD;AAC9CF;AACA;AAAA;AAAA;AACH;AACD;AACA,wBAAI,CAAC,cAAcI,IAAd,CAAmBF,KAAKG,WAAxB,CAAL,EAA2C;AACvCL;AACA;AAAA;AAAA;AACH;AACD;AACA,wBAAI,OAAOE,KAAKI,MAAZ,KAAuB,QAA3B,EAAqC;AACjCN;AACA;AAAA;AAAA;AACH;AACD;AACA,wBAAMO,WAAWN,QAAQd,WAAR,CAAoBoB,QAApB,CAA6BL,KAAKI,MAAlC,CAAjB;AACA;AACA,wBAAM/B,UAAUgC,SAASC,YAAT,CAAsBjC,OAAtC;AACA,wBAAMkC,MAAMlC,QAAQmC,MAAR,CAAe,QAAf,EAAwB,EAAxB,CAAZ;AAAA,wBAAyCC,WAAW,EAApD;;AAEAF,wBAAIvC,MAAJ,CAAW,UAAS0C,oBAAT,EAA+B;AACtCA,6CAAqBC,oBAArB,CAA0C,CACtC,0BADsC,CAA1C;AAGH,qBAJD;;AAMAJ,wBAAIK,OAAJ,CAAY,UAAZ,EAAwB,YAAW;AAC/B,+BAAOb,OAAP;AACH,qBAFD,EAEGa,OAFH,CAEW,KAFX,EAEkB,UAASC,EAAT,EAAa;AAC3B,+BAAO;AACH;;;;;;AAMArC,mCAAO,iBAAW;AACd,oCAAMD,WAAWsC,GAAGrC,KAAH,EAAjB;AACAiC,yCAASK,IAAT,CAAcvC,SAASE,OAAvB;AACA,uCAAOF,QAAP;AACH,6BAXE;AAYH;;;;;;;AAOAwC,kCAAOF,GAAGE,IAnBP;AAoBH;;;;;;;AAOAC,iCAAKH,GAAGG,GA3BL;AA4BH;;;;;;;AAOA5B,oCAAQyB,GAAGzB;AAnCR,yBAAP;AAqCH,qBAxCD,EAwCGwB,OAxCH,CAwCW,UAxCX,EAwCuB,YAAW;AAC9B,+BAAOvC,OAAP;AACH,qBA1CD;;AA4CAkC,wBAAIK,OAAJ,CAAY,OAAZ,EAAqBjD,oBAArB;;AAEA;AACAsD,2BAAOC,IAAP,CAAYnB,QAAQd,WAAR,CAAoBuB,MAApB,CAA2BW,UAAvC,EAAmD1B,OAAnD,CAA2D,UAASC,IAAT,EAAe;AACtEa,4BAAIa,SAAJ,CAAc1B,IAAd,EAAoBK,QAAQd,WAAR,CAAoBuB,MAApB,CAA2BW,UAA3B,CAAsCzB,IAAtC,CAApB;AACH,qBAFD;AAGA;AACAuB,2BAAOC,IAAP,CAAYnB,QAAQd,WAAR,CAAoBuB,MAApB,CAA2Ba,QAAvC,EAAiD5B,OAAjD,CAAyD,UAASC,IAAT,EAAe;AACpEa,4BAAIK,OAAJ,CAAYlB,IAAZ,EAAkBK,QAAQd,WAAR,CAAoBuB,MAApB,CAA2Ba,QAA3B,CAAoC3B,IAApC,CAAlB;AACH,qBAFD;AAGA;AACAuB,2BAAOC,IAAP,CAAYnB,QAAQd,WAAR,CAAoBuB,MAApB,CAA2Bc,OAAvC,EAAgD7B,OAAhD,CAAwD,UAASC,IAAT,EAAe;AACnEa,4BAAIgB,MAAJ,CAAW7B,IAAX,EAAiBK,QAAQd,WAAR,CAAoBuB,MAApB,CAA2Bc,OAA3B,CAAmC5B,IAAnC,CAAjB;AACH,qBAFD;AAGA;AACAuB,2BAAOC,IAAP,CAAYnB,QAAQd,WAAR,CAAoBuB,MAApB,CAA2BgB,WAAvC,EAAoD/B,OAApD,CAA4D,UAASC,IAAT,EAAe;AACvEa,4BAAIkB,UAAJ,CAAe/B,IAAf,EAAqBK,QAAQd,WAAR,CAAoBuB,MAApB,CAA2BgB,WAA3B,CAAuC9B,IAAvC,CAArB;AACH,qBAFD;;AAIA;AACA,wBAAMgC,aAAarD,QAAQsD,OAAR,CAAgBtB,QAAhB,EAA0BuB,IAA1B,CAA+B,uBAA/B,EAAwDC,GAAxD,CAA4D,CAA5D,CAAnB;AACA,wBAAIH,UAAJ,EAAgB;AACZ;AACA,4BAAMb,KAAKxC,QAAQyD,QAAR,CAAiB,CAAC,IAAD,CAAjB,EAAyBD,GAAzB,CAA6B,IAA7B,CAAX;AACA;AACAxD,gCAAQ0D,SAAR,CAAkBL,UAAlB,EAA8B,CAAC,QAAD,CAA9B;AACA;AACAb,2BAAGG,GAAH,CAAOP,QAAP,EAAiB7B,IAAjB,CAAsB,YAAW;AAC7BoB,iCAAKI,MAAL,GAAcC,SAAS2B,SAAvB;AACAlC;AACH,yBAHD,EAGG,UAASmC,MAAT,EAAiB;AAChB;AACAnC,qCAAS,IAAIoC,KAAJ,CAAUD,MAAV,CAAT;AACH,yBAND;AAOH,qBAbD,MAcK;AACDnC;AACH;AArHD;;AAAA;AAsHH,aAtHD,CAuHA,OAAOqC,CAAP,EAAU;AACNrC,yBAASqC,CAAT;AACH;AACJ;;;;;;kBAhIgBvC,gB","file":"directive.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n/**\n * @class\n * @param {*} $context\n * @param {*} $qs\n * @returns {$http}\n * @constructor\n * @private\n */\nfunction HttpInternalProvider($context, $qs) {\n\n    function $http(requestConfig) {\n        const config = {\n            method: 'get',\n            cookie: $context.request.headers.cookie\n        };\n        angular.extend(config, requestConfig);\n        const deferred = $qs.defer(), promise = deferred.promise;\n        promise.success = function(fn) {\n            promise.then(function(response) {\n                fn(response.data, response.status, response.headers, config);\n            });\n            return promise;\n        };\n        promise.error = function(fn) {\n            promise.then(null, function(response) {\n                fn(response.data, response.status, response.headers, config);\n            });\n            return promise;\n        };\n\n        $context.application.executeRequest(config, function(err, response) {\n            if (err) {\n                deferred.reject({ data: err.message, status:500, headers:{} });\n            }\n            else {\n                response.status = response.statusCode;\n                response.data = response.body;\n                deferred.resolve(response);\n            }\n        });\n\n        return promise;\n\n    }\n\n    ['get', 'delete', 'head', 'jsonp'].forEach(function(name) {\n        $http[name] = function(url, config) {\n            return $http(angular.extend(config || {}, {\n                method: name,\n                url: url\n            }));\n        };\n    });\n\n    ['post', 'put'].forEach(function(name) {\n        $http[name] = function(url, data, config) {\n            return $http(angular.extend(config || {}, {\n                method: name,\n                url: url,\n                data: data\n            }));\n        };\n    });\n\n    return $http;\n}\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class DirectiveHandler {\n    /**\n     * @param {{context: HttpContext, target: HttpResult}} args\n     * @param callback\n     */\n    postExecuteResult(args, callback) {\n        try {\n            callback = callback || function() {};\n            //get context and view\n            const context = args.context, view = args.target;\n            //ensure context\n            if (typeof context === 'undefined' || context === null) {\n                callback();\n                return;\n            }\n            //ensure view\n            if (typeof view === 'undefined' || view === null) {\n                callback();\n                return;\n            }\n            //ensure view content type (text/html)\n            if (!/^text\\/html/.test(view.contentType)) {\n                callback();\n                return;\n            }\n            //ensure view result data\n            if (typeof view.result !== 'string') {\n                callback();\n                return;\n            }\n            //process result\n            const document = context.application.document(view.result);\n            //create server module\n            const angular = document.parentWindow.angular;\n            const app = angular.module('server',[]), promises = [];\n\n            app.config(function($sceDelegateProvider) {\n                $sceDelegateProvider.resourceUrlWhitelist([\n                    '/templates/server/*.html'\n                ]);\n            });\n\n            app.service('$context', function() {\n                return context;\n            }).service('$qs', function($q) {\n                return {\n                    /**\n                     * @ngdoc method\n                     * @name $qs#defer\n                     * @kind function\n                     * @returns {Deferred}\n                     */\n                    defer :function() {\n                        const deferred = $q.defer();\n                        promises.push(deferred.promise);\n                        return deferred;\n                    },\n                    /**\n                     * @ngdoc method\n                     * @name $qs#when\n                     * @kind function\n                     * @param {*} value\n                     * @returns {Promise}\n                     */\n                    when:  $q.when,\n                    /**\n                     * @ngdoc method\n                     * @name $qs#all\n                     * @kind function\n                     * @param {Array.<Promise>|Object.<Promise>} promises\n                     * @returns {Promise}\n                     */\n                    all: $q.all,\n                    /**\n                     * @ngdoc method\n                     * @name $q#reject\n                     * @kind function\n                     * @param {*} reason\n                     * @returns {Promise}\n                     */\n                    reject: $q.reject\n                }\n            }).service('$angular', function() {\n                return angular;\n            });\n\n            app.service('$http', HttpInternalProvider);\n\n            //copy application directives\n            Object.keys(context.application.module.directives).forEach(function(name) {\n                app.directive(name, context.application.module.directives[name]);\n            });\n            //copy application services\n            Object.keys(context.application.module.services).forEach(function(name) {\n                app.service(name, context.application.module.services[name]);\n            });\n            //copy application filters\n            Object.keys(context.application.module.filters).forEach(function(name) {\n                app.filter(name, context.application.module.filters[name]);\n            });\n            //copy application controllers\n            Object.keys(context.application.module.controllers).forEach(function(name) {\n                app.controller(name, context.application.module.controllers[name]);\n            });\n\n            //get application element\n            const appElement = angular.element(document).find('*[ejs-app=\\'server\\']').get(0);\n            if (appElement) {\n                //get $q\n                const $q = angular.injector(['ng']).get('$q');\n                //initialize app element\n                angular.bootstrap(appElement, ['server']);\n                //wait for promises\n                $q.all(promises).then(function() {\n                    view.result = document.innerHTML;\n                    callback();\n                }, function(reason) {\n                    //throw exception\n                    callback(new Error(reason));\n                });\n            }\n            else {\n                callback();\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n}\n"]}