/**
 * @license
 * MOST Web Framework 2.0 Codename Blueshift
 * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com
 *                     Anthi Oikonomou anthioikonomou@gmail.com
 *
 * Use of this source code is governed by an BSD-3-Clause license that can be
 * found in the LICENSE file at https://themost.io/license
 */
'use strict';
import StaticHandler from './static';
import fs from 'fs';
import url from 'url';
import path from 'path';
/**
 * @class
 * @augments HttpHandler
 */
export default class NodeModulesHandler extends StaticHandler {

    constructor() {
        super();
    }

    /**
     * @param {HttpContext} context
     * @param {Function} callback
     */
    mapRequest(context, callback) {
        callback = callback || function() {};
        try {
            //get file path
            const uri = url.parse(context.request.url);
            if (!/^\/node_modules\//i.test(uri.pathname)) {
                return callback();
            }
            const p = path.join(process.cwd(), uri.pathname);
            fs.stat(p, function(err, stats) {
                if (err) {
                    //requested file does not exists
                    if (err.code === "ENOENT") { return callback(); }
                    return callback(err);
                }
                else {
                    //if file exists
                    if (stats && stats.isFile()) {
                        //set request current handler
                        context.request.currentHandler = new NodeModulesHandler();
                        //set current execution path
                        context.request.currentExecutionPath = p;
                        //set file stats
                        context.request.currentExecutionFileStats = stats;
                    }
                    callback(null);
                }
            });
        } catch (e) {
            callback(e);
        }
    }
}