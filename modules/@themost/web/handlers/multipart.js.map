{"version":3,"sources":["multipart.es6"],"names":["process","version","multipart_parser","require","MultipartParser","prototype","initWithBoundary","str","boundary","Buffer","length","write","lookbehind","state","START","boundaryChars","i","MultipartHandler","context","callback","request","headers","contentType","test","f","IncomingForm","parse","err","form","files","assign","params","parseForm","e"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAIA,QAAQC,OAAR,IAAiB,QAArB,EAA+B;AAAA;AAC3B,YAAMC,mBAAmBC,QAAQ,iCAAR,CAAzB;AAAA,YAAqEC,kBAAkBF,iBAAiBE,eAAxG;AACAA,wBAAgBC,SAAhB,CAA0BC,gBAA1B,GAA6C,UAASC,GAAT,EAAc;AACvD,iBAAKC,QAAL,GAAgB,IAAIC,MAAJ,CAAWF,IAAIG,MAAJ,GAAW,CAAtB,CAAhB;AACA,iBAAKF,QAAL,CAAcG,KAAd,CAAoB,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,EAAqC,OAArC;AACA,iBAAKH,QAAL,CAAcG,KAAd,CAAoBJ,GAApB,EAAyB,CAAzB,EAA4BA,IAAIG,MAAhC,EAAwC,OAAxC;AACA,iBAAKE,UAAL,GAAkB,IAAIH,MAAJ,CAAW,KAAKD,QAAL,CAAcE,MAAd,GAAqB,CAAhC,CAAlB;AACA,iBAAKG,KAAL,GAAaX,iBAAiBY,KAA9B;AACA,iBAAKC,aAAL,GAAqB,EAArB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKR,QAAL,CAAcE,MAAlC,EAA0CM,GAA1C,EAA+C;AAC3C,qBAAKD,aAAL,CAAmB,KAAKP,QAAL,CAAcQ,CAAd,CAAnB,IAAuC,IAAvC;AACH;AACJ,SAVD;AAF2B;AAa9B;AACD;;;;;IAIqBC,gB;;;;;;;;AACjB;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5B,gBAAMC,UAAUF,QAAQE,OAAxB;AACAA,oBAAQC,OAAR,GAAkBD,QAAQC,OAAR,IAAmB,EAArC;AACA,gBAAMC,cAAcF,QAAQC,OAAR,CAAgB,cAAhB,CAApB;AACA,gBAAI,yBAAyBE,IAAzB,CAA8BD,WAA9B,CAAJ,EAAgD;AAC5C;AACA,oBAAME,IAAI,IAAI,qBAAWC,YAAf,EAAV;AACAD,kBAAEE,KAAF,CAAQN,OAAR,EAAiB,UAAUO,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACzC,wBAAIF,GAAJ,EAAS;AACLR,iCAASQ,GAAT;AACA;AACH;AACD,wBAAI;AACA;AACA,4BAAIC,IAAJ,EAAU;AACN,sCAAEE,MAAF,CAASZ,QAAQa,MAAjB,EAAyB,iBAAUC,SAAV,CAAoBJ,IAApB,CAAzB;AACH;AACD;AACA,4BAAIC,KAAJ,EACI,UAAEC,MAAF,CAASZ,QAAQa,MAAjB,EAAyBF,KAAzB;AACJV;AACH,qBATD,CAUA,OAAOc,CAAP,EAAU;AACNd,iCAASc,CAAT;AACH;AACJ,iBAlBD;AAmBH,aAtBD,MAuBK;AACDd;AACH;AACJ;;;;;;kBApCgBF,gB","file":"multipart.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport formidable from 'formidable';\nimport {_} from 'lodash';\nimport {LangUtils} from '@themost/common/utils';\n\nif (process.version>=\"v6.0.0\") {\n    const multipart_parser = require('formidable/lib/multipart_parser'), MultipartParser = multipart_parser.MultipartParser;\n    MultipartParser.prototype.initWithBoundary = function(str) {\n        this.boundary = new Buffer(str.length+4);\n        this.boundary.write('\\r\\n--', 0, 4 , 'ascii');\n        this.boundary.write(str, 4, str.length, 'ascii');\n        this.lookbehind = new Buffer(this.boundary.length+8);\n        this.state = multipart_parser.START;\n        this.boundaryChars = {};\n        for (let i = 0; i < this.boundary.length; i++) {\n            this.boundaryChars[this.boundary[i]] = true;\n        }\n    };\n}\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class MultipartHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        const request = context.request;\n        request.headers = request.headers || {};\n        const contentType = request.headers['content-type'];\n        if (/^multipart\\/form-data/i.test(contentType)) {\n            //use formidable to parse request data\n            const f = new formidable.IncomingForm();\n            f.parse(request, function (err, form, files) {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                try {\n                    //add form\n                    if (form) {\n                        _.assign(context.params, LangUtils.parseForm(form));\n                    }\n                    //add files\n                    if (files)\n                        _.assign(context.params, files);\n                    callback();\n                }\n                catch (e) {\n                    callback(e);\n                }\n            });\n        }\n        else {\n            callback();\n        }\n    }\n}\n"]}