{"version":3,"sources":["node_modules.es6"],"names":["NodeModulesHandler","context","callback","uri","parse","request","url","test","pathname","p","join","process","cwd","stat","err","stats","code","isFile","currentHandler","currentExecutionPath","currentExecutionFileStats","e"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AACA;;;;IAIqBA,kB;;;AAEjB,kCAAc;AAAA;;AAAA;AAEb;;AAED;;;;;;;;mCAIWC,O,EAASC,Q,EAAU;AAC1BA,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAI;AAAA;AACA;AACA,wBAAMC,MAAM,cAAIC,KAAJ,CAAUH,QAAQI,OAAR,CAAgBC,GAA1B,CAAZ;AACA,wBAAI,CAAC,qBAAqBC,IAArB,CAA0BJ,IAAIK,QAA9B,CAAL,EAA8C;AAC1C;AAAA,+BAAON;AAAP;AACH;AACD,wBAAMO,IAAI,eAAKC,IAAL,CAAUC,QAAQC,GAAR,EAAV,EAAyBT,IAAIK,QAA7B,CAAV;AACA,iCAAGK,IAAH,CAAQJ,CAAR,EAAW,UAASK,GAAT,EAAcC,KAAd,EAAqB;AAC5B,4BAAID,GAAJ,EAAS;AACL;AACA,gCAAIA,IAAIE,IAAJ,KAAa,QAAjB,EAA2B;AAAE,uCAAOd,UAAP;AAAoB;AACjD,mCAAOA,SAASY,GAAT,CAAP;AACH,yBAJD,MAKK;AACD;AACA,gCAAIC,SAASA,MAAME,MAAN,EAAb,EAA6B;AACzB;AACAhB,wCAAQI,OAAR,CAAgBa,cAAhB,GAAiC,IAAIlB,kBAAJ,EAAjC;AACA;AACAC,wCAAQI,OAAR,CAAgBc,oBAAhB,GAAuCV,CAAvC;AACA;AACAR,wCAAQI,OAAR,CAAgBe,yBAAhB,GAA4CL,KAA5C;AACH;AACDb,qCAAS,IAAT;AACH;AACJ,qBAlBD;AAPA;;AAAA;AA0BH,aA1BD,CA0BE,OAAOmB,CAAP,EAAU;AACRnB,yBAASmB,CAAT;AACH;AACJ;;;;;;kBAzCgBrB,kB","file":"node_modules.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport StaticHandler from './static';\nimport fs from 'fs';\nimport url from 'url';\nimport path from 'path';\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class NodeModulesHandler extends StaticHandler {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    mapRequest(context, callback) {\n        callback = callback || function() {};\n        try {\n            //get file path\n            const uri = url.parse(context.request.url);\n            if (!/^\\/node_modules\\//i.test(uri.pathname)) {\n                return callback();\n            }\n            const p = path.join(process.cwd(), uri.pathname);\n            fs.stat(p, function(err, stats) {\n                if (err) {\n                    //requested file does not exists\n                    if (err.code === \"ENOENT\") { return callback(); }\n                    return callback(err);\n                }\n                else {\n                    //if file exists\n                    if (stats && stats.isFile()) {\n                        //set request current handler\n                        context.request.currentHandler = new NodeModulesHandler();\n                        //set current execution path\n                        context.request.currentExecutionPath = p;\n                        //set file stats\n                        context.request.currentExecutionFileStats = stats;\n                    }\n                    callback(null);\n                }\n            });\n        } catch (e) {\n            callback(e);\n        }\n    }\n}"]}