{"version":3,"sources":["view.es6"],"names":["dasherize","s","isString","trim","replace","toLowerCase","ViewHandler","context","callback","uri","parse","request","url","i","RestrictedLocations","length","location","re","RegExp","path","test","pathname","e","currentHandler","requestUri","currentRoute","queryRoute","controllerName","routeData","queryController","queryControllerClass","err","ControllerClass","controller","name","handler","route","_extend","prop","hasOwnProperty","params","prototype","preflightRequest","call","obj","is","format","body","doc","loadXML","deserialize","documentElement","data","JSON","log","Error","allowCredentials","allowOrigin","allowHeaders","allowMethods","allow","headerNames","response","headers","origin","setHeader","indexOf","self","action","fn","camelCase","methodParams","getFunctionParams","k","push","attr","result","execute","apply","controllerPath","application","mapPath","STR_CONTROLLER_RELPATH","controllerModel","model","exists","controllerType","type","STR_CONTROLLER_FILE","join","__dirname","require","default","ControllerCtor","config","controllers","STR_CONTROLLERS_FOLDER","routes","httpRoute","isMatch","undefined","segments","split"],"mappings":"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","file":"view.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {HttpError,HttpNotFoundError} from '@themost/common/errors';\nimport {TraceUtils, LangUtils} from '@themost/common/utils';\nimport {_} from 'lodash';\nimport url from 'url';\nimport util from 'util';\nimport fs from 'fs';\nimport path from 'path';\nimport xml from 'most-xml';\nimport {HttpRoute} from './../http_route';\n\n\nif (typeof _.dasherize != 'function') {\n    /**\n     * @param {string} s\n     * @returns string\n     */\n    _.dasherize = function (s) {\n        if (_.isString(s))\n            return _.trim(s).replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').replace(/^-/,'').toLowerCase();\n        return s;\n    }\n}\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class ViewHandler {\n    static queryControllerClass(controllerName, context, callback) {\n\n        if (typeof controllerName === 'undefined' || controllerName==null) {\n            callback();\n        }\n        else {\n            //get controller class path and model (if any)\n            let controllerPath = context.application.mapPath(util.format(ViewHandler.STR_CONTROLLER_RELPATH, _.dasherize(controllerName)));\n\n            const controllerModel = context.model(controllerName);\n            //if controller does not exists\n            fs.exists(controllerPath, function(exists){\n                try {\n                    //if controller class file does not exist in /controllers/ folder\n                    if (!exists) {\n                        //try to find if current controller has a model defined\n                        if (controllerModel) {\n                            const controllerType = controllerModel.type || 'data';\n                            //try to find controller based on the model's type in controllers folder (e.g. /library-controller.js)\n                            controllerPath = context.application.mapPath(util.format(ViewHandler.STR_CONTROLLER_RELPATH, controllerType));\n                            fs.exists(controllerPath, function(exists) {\n                               if (!exists) {\n                                   //get controller path according to related model's type (e.g ./data-controller)\n                                   controllerPath = util.format(ViewHandler.STR_CONTROLLER_FILE, controllerType);\n                                   //if controller does not exist\n                                   controllerPath = path.join(__dirname, controllerPath);\n                                   fs.exists(controllerPath, function(exists) {\n                                       if (!exists)\n                                           callback(null, require('./../controllers/base').default);\n                                       else\n                                           callback(null, require(controllerPath).default);\n                                   });\n                               }\n                               else {\n                                   callback(null, require(controllerPath).default);\n                               }\n                            });\n                        }\n                        else {\n                            const ControllerCtor = context.application.config.controllers[controllerName] || require('./../controllers/base').default;\n                            callback(null, ControllerCtor);\n                        }\n                    }\n                    else {\n                        //return controller class\n                        callback(null, require(controllerPath).default);\n                    }\n                }\n                catch (e) {\n                    callback(e);\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    authorizeRequest(context, callback) {\n        try {\n            const uri = url.parse(context.request.url);\n            for (let i = 0; i < ViewHandler.RestrictedLocations.length; i++) {\n                /**\n                 * @type {*|LocationSetting}\n                 */\n                const location = ViewHandler.RestrictedLocations[i],\n                      /**\n                       * @type {RegExp}\n                       */\n                      re = new RegExp(location.path,'ig');\n                if (re.test(uri.pathname)) {\n                    callback(new HttpError(403, 'Forbidden'));\n                    return;\n                }\n            }\n            callback();\n        }\n        catch(e) {\n            callback(e);\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    mapRequest(context, callback) {\n        callback = callback || function () { };\n        //try to map request\n        try {\n            //first of all check if a request handler is already defined\n            if (typeof context.request.currentHandler !== 'undefined') {\n                //do nothing (exit mapping)\n                return callback();\n            }\n            const requestUri = url.parse(context.request.url);\n            /**\n             * find route by querying application routes\n             * @type {HttpRoute}\n             */\n            const currentRoute = queryRoute(context, requestUri);\n            if (typeof currentRoute === 'undefined' || currentRoute == null) {\n                return callback();\n            }\n            //query controller\n            const controllerName = currentRoute[\"controller\"] || currentRoute.routeData[\"controller\"] || queryController(requestUri);\n            if (typeof controllerName === 'undefined' || controllerName == null) {\n                return callback();\n            }\n            //try to find controller class\n            ViewHandler.queryControllerClass(controllerName, context, function(err, ControllerClass) {\n                if (err) {\n                    return callback(err);\n                }\n                try {\n                    //initialize controller\n                    const controller = new ControllerClass();\n                    //set controller's name\n                    controller.name = controllerName.toLowerCase();\n                    //set controller's context\n                    controller.context = context;\n                    //set request handler\n                    const handler = new ViewHandler();\n                    handler.controller = controller;\n                    context.request.currentHandler = handler;\n                    //set route data\n                    context.request.route = util._extend({ },currentRoute.route);\n                    context.request.routeData = currentRoute.routeData;\n                    //set route data as params\n                    for(const prop in currentRoute.routeData) {\n                        if (currentRoute.routeData.hasOwnProperty(prop)) {\n                            context.params[prop] = currentRoute.routeData[prop];\n                        }\n                    }\n                    return callback();\n                }\n                catch(e) {\n                    return callback(e);\n                }\n            });\n\n        }\n        catch (e) {\n            callback(e);\n        }\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    postMapRequest(context, callback) {\n        try {\n            ViewHandler.prototype.preflightRequest.call(this, context, function(err) {\n                if (err) { return callback(err); }\n                let obj;\n                if (context.is('POST')) {\n                    if (context.format=='xml') {\n                        //get current model\n                        if (context.request.body) {\n                            //load xml\n                            try {\n                                const doc = xml.loadXML(context.request.body);\n                                obj = xml.deserialize(doc.documentElement);\n                                context.params.data = obj;\n                            }\n                            catch (e) {\n                                return callback(e);\n                            }\n                        }\n                    }\n                    else if (context.format=='json') {\n                        if (typeof context.request.body === 'string') {\n                            //parse json data\n                            try {\n                                obj = JSON.parse(context.request.body);\n                                //set context data\n                                context.params.data = obj;\n                            }\n                            catch(e) {\n                                //otherwise raise error\n                                TraceUtils.log(e);\n                                return callback(new Error('Invalid JSON data.'));\n                            }\n                        }\n                    }\n                }\n                return callback();\n            });\n        }\n        catch(e) {\n            callback(e);\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    preflightRequest(context, callback) {\n        try {\n            if (context && (context.request.currentHandler instanceof ViewHandler)) {\n                //set the default origin (with wildcard)\n                let allowCredentials = true, allowOrigin=\"*\", allowHeaders = \"Origin, X-Requested-With, Content-Type, Content-Language, Accept, Accept-Language, Authorization\", allowMethods = \"GET, OPTIONS, PUT, POST, DELETE\";\n\n                /**\n                 * @private\n                 * @type {{allowOrigin:string,allowHeaders:string,allowCredentials:Boolean,allowMethods:string,allow:string}|*}\n                 */\n                const route = context.request.route;\n                if (route) {\n                    if (typeof route.allowOrigin !== 'undefined')\n                        allowOrigin = route.allowOrigin;\n                    if (typeof route.allowHeaders !== 'undefined')\n                        allowHeaders = route.allowHeaders;\n                    if (typeof route.allowCredentials !== 'undefined')\n                        allowCredentials = route.allowCredentials;\n                    if ((typeof route.allowMethods !== 'undefined') || (typeof route.allow !== 'undefined'))\n                        allowMethods = route.allow || route.allowMethods;\n                }\n                //ensure header names\n                const headerNames = context.response[\"_headerNames\"] || { };\n                //1. Access-Control-Allow-Origin\n                if (typeof headerNames[\"access-control-allow-origin\"] === 'undefined') {\n                    //if request contains origin header\n                    if (context.request.headers.origin) {\n                        if (allowOrigin === \"*\") {\n                            //set access-control-allow-origin header equal to request origin header\n                            context.response.setHeader(\"Access-Control-Allow-Origin\", context.request.headers.origin);\n                        }\n                        else if (allowOrigin.indexOf(context.request.headers.origin)>-1) {\n                            context.response.setHeader(\"Access-Control-Allow-Origin\", context.request.headers.origin);\n                        }\n                    }\n                    else {\n                        //set access-control-allow-origin header equal to the predefined origin header\n                        context.response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    }\n                }\n                //2. Access-Control-Allow-Origin\n                if (typeof headerNames[\"access-control-allow-credentials\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Credentials\", allowCredentials);\n                }\n\n                //3. Access-Control-Allow-Headers\n                if (typeof headerNames[\"access-control-allow-headers\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n                }\n\n                //4. Access-Control-Allow-Methods\n                if (typeof headerNames[\"access-control-allow-methods\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Methods\", allowMethods);\n                }\n            }\n            if (typeof callback === 'undefined') { return; }\n            return callback();\n        }\n        catch(e) {\n            if (typeof callback === 'undefined') { throw e; }\n            callback(e);\n        }\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    processRequest(context, callback) {\n        const self = this;\n        callback = callback || function () { };\n        try {\n            if (context.is('OPTIONS')) {\n                //do nothing\n                return callback();\n            }\n            //validate request controller\n            const controller = self.controller;\n            if (controller) {\n                /**\n                 * try to find action\n                 * @type {String}\n                 */\n                const action = context.request.routeData[\"action\"];\n                if (action) {\n                    //execute action\n                    let fn = controller[action];\n                    if (typeof fn !== 'function') {\n                        fn = controller[_.camelCase(action)];\n                        if (typeof fn !== 'function')\n                            fn = controller.action;\n                    }\n                    if (typeof fn !== 'function') {\n                        return callback(new HttpNotFoundError());\n                    }\n                    //enumerate params\n                    const methodParams = LangUtils.getFunctionParams(fn), params = [];\n                    /*\n                    * so if method has more than one parameter\n                    * enumerate method parameters and check if a parameter with the same name\n                    * exists in request's parameters.\n                    * note: the last parameter (in this version) must be a callback function\n                    * */\n                    if (methodParams.length>1) {\n                        let k=0;\n                        while (k<methodParams.length-1) {\n                            //get context parameter\n                            params.push(context.params.attr(methodParams[k]));\n                            k++;\n                        }\n                    }\n                    //and finally push callback function parameter\n                    /**\n                     * @type HttpResult\n                     * */\n                    params.push(function (err, result) {\n                        if (err) {\n                            //throw error\n                            return callback.call(context, err);\n                        }\n                        else {\n                            //execute http result\n                            result.execute(context, callback);\n                        }\n                    });\n                    //invoke controller method\n                    return fn.apply(controller, params);\n                }\n            }\n            callback.call(context);\n        }\n        catch (e) {\n            callback.call(context, e);\n        }\n    }\n\n}\n\nViewHandler.STR_CONTROLLERS_FOLDER = 'controllers';\nViewHandler.STR_CONTROLLER_FILE = './controllers/%s-controller.js';\nViewHandler.STR_CONTROLLER_RELPATH = '/controllers/%s-controller.js';\n\nViewHandler.RestrictedLocations = [\n    { \"path\":\"^/controllers/\", \"description\":\"Most web framework server controllers\" },\n    { \"path\":\"^/models/\", \"description\":\"Most web framework server models\" },\n    { \"path\":\"^/extensions/\", \"description\":\"Most web framework server extensions\" },\n    { \"path\":\"^/handlers/\", \"description\":\"Most web framework server handlers\" },\n    { \"path\":\"^/views/\", \"description\":\"Most web framework server views\" }\n];\n\n/**\n *\n * @param {HttpContext} context\n * @param {string|*} requestUri\n * @returns {HttpRoute}\n * @private\n */\nfunction queryRoute(context, requestUri) {\n    try {\n        /**\n         * @type Array\n         * */\n        const routes = context.application.config.routes;\n        //enumerate registered routes\n        const httpRoute = new HttpRoute();\n        for (let i = 0; i < routes.length; i++) {\n            httpRoute.route = routes[i];\n            //if uri path is matched\n            if (httpRoute.isMatch(requestUri.pathname)) {\n                return httpRoute;\n            }\n        }\n    }\n    catch (e) {\n        throw e;\n    }\n}\n\n/**\n * Gets the controller of the given url\n * @param {string|*} requestUri - A string that represents the url we want to parse.\n * @private\n * */\nfunction queryController(requestUri) {\n    try {\n        if (requestUri === undefined)\n            return null;\n        //split path\n        const segments = requestUri.pathname.split('/');\n        //put an exception for root controller\n        //maybe this is unnecessary exception but we need to search for root controller e.g. /index.html, /about.html\n        if (segments.length == 2)\n            return 'root';\n        else\n        //e.g /pages/about where segments are ['','pages','about']\n        //and the controller of course is always the second segment.\n            return segments[1];\n\n    }\n    catch (e) {\n        throw e;\n    }\n}\n\n\n"]}