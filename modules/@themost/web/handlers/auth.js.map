{"version":3,"sources":["auth.es6"],"names":["parseCookies","request","list","rc","headers","cookie","split","forEach","parts","shift","trim","unescape","join","ANONYMOUS_IDENTITY","name","authenticationType","AuthHandler","context","callback","cookies","model","settings","application","config","auth","str","decrypt","e","log","userName","authCookie","JSON","parse","user","convert","args","where","equal","expand","silent","first","err","result"],"mappings":"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","file":"auth.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {TraceUtils} from '@themost/common/utils';\n\n/**\n * @param {IncomingMessage|ClientRequest} request\n * @returns {*}\n */\nfunction parseCookies(request) {\n    const list = {}, rc = request.headers.cookie;\n    rc && rc.split(';').forEach(function( cookie ) {\n        const parts = cookie.split('=');\n        list[parts.shift().trim()] = unescape(parts.join('='));\n    });\n    return list;\n}\n\nconst ANONYMOUS_IDENTITY = { name: 'anonymous', authenticationType:'None' };\n\n/**\n * @class\n * @augments HttpHandler\n */\nexport default class AuthHandler {\n\n    /**\n     * Authenticates an HTTP request and sets user or anonymous identity.\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    authenticateRequest(context, callback) {\n        try {\n            callback = callback || function() {};\n            let cookies = {};\n            const model = context.model('User');\n            const settings = context.application.config.settings ? (context.application.config.settings.auth || { }) : { };\n            settings.name = settings.name || '.MAUTH';\n            if (context && context.request)\n                cookies = parseCookies(context.request);\n            if (cookies[settings.name]) {\n                let str = null;\n                try {\n                    str = context.application.decrypt(cookies[settings.name]);\n                }\n                catch (e) {\n                    //log error (on bad cookie)\n                    TraceUtils.log(e);\n                }\n                //and continue\n                let userName = null;\n                if (str) {\n                    const authCookie = JSON.parse(str);\n                    //validate authentication cookie\n                    if (authCookie.user)\n                        userName = authCookie.user;\n                }\n                if (typeof model === 'undefined' || model === null) {\n                    //no authentication provider is defined\n                    context.user = { name: userName || 'anonymous', authenticationType:'Basic' };\n                    callback(null);\n                    return;\n                }\n                //search for user\n                if (userName) {\n                    //set user identity\n                    context.user = model.convert({ name: userName, authenticationType:'Basic' });\n                    callback(null);\n                }\n                else {\n                    //an auth cookie was found but user data or user model does not exist\n                    //set anonymous identity\n                    context.user = model.convert(ANONYMOUS_IDENTITY);\n                    callback(null);\n                }\n            }\n            else {\n                //set anonymous identity\n                if (model)\n                    context.user = model.convert(ANONYMOUS_IDENTITY);\n                else\n                    context.user = ANONYMOUS_IDENTITY;\n                //no auth cookie was found on request\n                callback(null);\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n\n    /**\n     * @param {{context: HttpContext, target: HttpResult}} args\n     * @param callback\n     */\n    preExecuteResult(args, callback) {\n        try {\n            callback = callback || function() {};\n            const context = args.context, model = context.model('User');\n            if (typeof model === 'undefined' || model === null) {\n                callback();\n                return;\n            }\n            const authenticationType = context.user.authenticationType;\n            model.where('name').equal(context.user.name).expand('groups').silent().first(function(err, result) {\n               if (err) { return callback(err); }\n                if (result) {\n                    //replace context.user with data object\n                    context.user = model.convert(result);\n                    context.user.authenticationType = authenticationType;\n                    return callback();\n                }\n                else if (context.user.name!=='anonymous') {\n                    model.where('name').equal('anonymous').expand('groups').silent().first(function(err, result) {\n                        if (err) { return callback(err); }\n                        if (result) {\n                            context.user = model.convert(result);\n                            context.user.authenticationType = authenticationType;\n                            return callback();\n                        }\n                        else {\n                            return callback();\n                        }\n                    });\n                }\n                else {\n                    //do nothing\n                    return callback();\n                }\n            });\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n}"]}