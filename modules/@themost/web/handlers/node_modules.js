/**
 * @license
 * MOST Web Framework 2.0 Codename Blueshift
 * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com
 *                     Anthi Oikonomou anthioikonomou@gmail.com
 *
 * Use of this source code is governed by an BSD-3-Clause license that can be
 * found in the LICENSE file at https://themost.io/license
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _static = require('./static');

var _static2 = _interopRequireDefault(_static);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class
 * @augments HttpHandler
 */
var NodeModulesHandler = function (_StaticHandler) {
    _inherits(NodeModulesHandler, _StaticHandler);

    function NodeModulesHandler() {
        _classCallCheck(this, NodeModulesHandler);

        return _possibleConstructorReturn(this, (NodeModulesHandler.__proto__ || Object.getPrototypeOf(NodeModulesHandler)).call(this));
    }

    /**
     * @param {HttpContext} context
     * @param {Function} callback
     */


    _createClass(NodeModulesHandler, [{
        key: 'mapRequest',
        value: function mapRequest(context, callback) {
            callback = callback || function () {};
            try {
                var _ret = function () {
                    //get file path
                    var uri = _url2.default.parse(context.request.url);
                    if (!/^\/node_modules\//i.test(uri.pathname)) {
                        return {
                            v: callback()
                        };
                    }
                    var p = _path2.default.join(process.cwd(), uri.pathname);
                    _fs2.default.stat(p, function (err, stats) {
                        if (err) {
                            //requested file does not exists
                            if (err.code === "ENOENT") {
                                return callback();
                            }
                            return callback(err);
                        } else {
                            //if file exists
                            if (stats && stats.isFile()) {
                                //set request current handler
                                context.request.currentHandler = new NodeModulesHandler();
                                //set current execution path
                                context.request.currentExecutionPath = p;
                                //set file stats
                                context.request.currentExecutionFileStats = stats;
                            }
                            callback(null);
                        }
                    });
                }();

                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
            } catch (e) {
                callback(e);
            }
        }
    }]);

    return NodeModulesHandler;
}(_static2.default);

exports.default = NodeModulesHandler;
//# sourceMappingURL=node_modules.js.map
