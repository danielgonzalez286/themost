{"version":3,"sources":["context.es6"],"names":["HttpContext","httpRequest","httpResponse","request","response","__application__","Object","defineProperty","get","set","value","configurable","enumerable","getApplication","self","res","application","resolveMime","url","params","mime","config","mimes","find","x","type","headers","accept","arr","split","length","uri","parse","result","extname","pathname","substr","toLowerCase","extension","querystring","data","undefined","routeData","key","hasOwnProperty","list","rc","cookie","forEach","parts","shift","trim","unescape","join","jq","ng","doc","document","parentWindow","jQuery","angular","user","_culture","super_","call","init","name","expires","domain","cookiePath","cookies","parseCookies","cookieValue","toString","Date","toUTCString","setHeader","p","moment","require","locale","culture","cpath","lang","fn","callback","interactiveUser","_unattended","err","e","settings","auth","account","unattendedExecutionAccount","authenticationType","_extend","cultures","defaultCulture","langs","obj","csrfToken","csrfCookieToken","csrfRequestToken","JSON","decrypt","valid","tokenExpiration","timestamp","date","diff","Math","abs","parseInt","status","file","fs","path","app","existsSync","extensionName","contentType","isObject","readFile","stream","writeHead","write","end","method","isArray","filter","toUpperCase","is","handled","process","nextTick","once","ev","error","handle","currentHandler","text","lib","locales","library","mapPath","concat","readFileSync","log","item","engines","engine","createInstance","Error","mvc","HttpViewContext","classes","DefaultDataContext"],"mappings":"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","file":"context.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport path from 'path';\nimport util from 'util';\nimport fs from 'fs';\nimport da from 'most-data';\nimport url from 'url';\nimport {_} from 'lodash';\nimport {LangUtils,TraceUtils} from '@themost/common/utils';\nimport {HttpBadRequestError,HttpForbiddenError,HttpServerError,HttpNotFoundError} from '@themost/common/errors';\n\n\n/**\n * @classdesc Creates an instance of HttpContext class.\n * @class\n * @property {{extension:string,type:string}} mime - Gets an object which represents the mime type associated with this context.\n * @property {string} format - Gets a string which represents the response format of this context (e.g html, json, js etc).\n * @property {HttpApplication} application - Gets the parent HTTP application of the current context.\n * @augments DataContext\n */\nexport class HttpContext extends da.classes.DefaultDataContext {\n    /**\n     *\n     * @constructor\n     * @param {ClientRequest} httpRequest\n     * @param {ServerResponse} httpResponse\n     */\n    constructor(httpRequest, httpResponse) {\n        super();\n        /**\n         * @type {ClientRequest}\n         */\n        this.request = httpRequest;\n        /**\n         *\n         * @type {ServerResponse}\n         */\n        this.response = httpResponse;\n\n        let __application__ = null;\n        Object.defineProperty(this, 'application', {\n            get: function () {\n                return __application__;\n            },\n            set: function (value) {\n                __application__ = value;\n            }, configurable: false, enumerable: false\n        });\n        /**\n         * @returns {HttpApplication}\n         */\n        this.getApplication = function() {\n            return __application__;\n        };\n\n        const self = this;\n        Object.defineProperty(this, 'mime', {\n            get: function () {\n                let res = self.application.resolveMime(self.request.url);\n                //if no extension is defined\n                if (typeof res === 'undefined' || res == null) {\n                    //resolve the defined mime type by filter application mime types\n                    if (self.params && self.params.mime) {\n                        res = self.application.config.mimes.find(function(x) {\n                           return x.type === self.params.mime;\n                        });\n                    }\n                    //or try to get accept header (e.g. text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8)\n                    else if (self.request && self.request.headers) {\n                        //get and split ACCEPT HTTP header\n                        const accept = self.request.headers['accept'], arr = accept.split(';');\n                        if (arr[0]) {\n                            //get acceptable mime types\n                            const mimes = arr[0].split(',');\n                            if (mimes.length>0) {\n                                //try to find the application mime associated with the first acceptable mime type\n                                res = self.application.config.mimes.find(function(x) {\n                                    return x.type === mimes[0];\n                                });\n                            }\n                        }\n                    }\n                }\n                return res;\n            }, configurable: false, enumerable: false\n        });\n\n        Object.defineProperty(this, 'format', {\n            get: function () {\n                const uri = url.parse(self.request.url);\n                const result = path.extname(uri.pathname);\n                if (result) {\n                    return result.substr(1).toLowerCase();\n                }\n                else {\n                    //get mime type\n                    const mime = self.mime;\n                    if (mime) {\n                        //and return the extension associated with this mime\n                        return mime.extension.substr(1).toLowerCase();\n                    }\n                }\n            }, configurable: false, enumerable: false\n        });\n\n        /**\n         * Gets an object that represents HTTP query string variables.\n         * @type {*}\n         */\n        this.querystring = {};\n        /**\n         * Gets an object that represents route data variables\n         * @type {*}\n         */\n        this.data = undefined;\n        /**\n         * Gets an object that represents HTTP context parameters\n         * @type {*}\n         */\n        this.params = {};\n\n        let data = null;\n        Object.defineProperty(this, 'data', {\n            get: function () {\n                if (data)\n                    return data;\n                data = { };\n                if (self.request && self.request.routeData) {\n                    for(const key in self.request.routeData) {\n                        if (self.request.routeData.hasOwnProperty(key)) {\n                            data[key] = self.request.routeData[key];\n                        }\n                    }\n                }\n                return data;\n            }, configurable: false, enumerable: false\n        });\n        /**\n         * @property {*} cookies - Gets a collection of HTTP Request cookies\n         */\n        Object.defineProperty(this, 'cookies', {\n            get: function () {\n                const list = {}, rc = self.request.headers.cookie;\n                rc && rc.split(';').forEach(function( cookie ) {\n                    const parts = cookie.split('=');\n                    list[parts.shift().trim()] = unescape(parts.join('='));\n                });\n                return list;\n            }, configurable: false, enumerable: false\n        });\n\n        let jq = null, ng = null, doc;\n        /**\n         * @property {jQuery|HTMLElement|*} $ - Gets server jQuery module\n         */\n        Object.defineProperty(this, '$', {\n            get: function () {\n                if (jq)\n                    return jq;\n                if (typeof doc === 'undefined')\n                    doc = self.application.document();\n                jq =  doc.parentWindow.jQuery;\n                return jq;\n            }, configurable: false, enumerable: false\n        });\n        /**\n         * @property {angular} angular - Gets server angular module\n         */\n        Object.defineProperty(this, 'angular', {\n            get: function () {\n                if (ng)\n                    return ng;\n                if (typeof doc === 'undefined')\n                    doc = self.application.document();\n                ng =  doc.parentWindow.angular;\n                return ng;\n            }, configurable: false, enumerable: false\n        });\n        /**\n         * Gets or sets the current user identity\n         * @type {*}\n         */\n        this.user = null;\n        /**\n         * @type {string}\n         * @private\n         */\n        this._culture = undefined;\n        //call super class constructor\n        if (HttpContext.super_)\n            HttpContext.super_.call(this);\n\n        //class extension initiators\n        if (typeof this.init === 'function') {\n            //call init() method\n            this.init();\n        }\n        \n\n    }\n\n    init() {\n        //\n    }\n\n    /**\n     * @param {string} name\n     * @param {*=} value\n     * @param {Date=} expires\n     * @param {string=} domain\n     * @param {string=} cookiePath\n     * @returns {string|undefined}\n     */\n    cookie(name, value, expires, domain, cookiePath) {\n\n        if (typeof value==='undefined')\n        {\n            if (this.request) {\n                const cookies = LangUtils.parseCookies(this.request);\n                return cookies[name];\n            }\n            else\n                return null;\n        }\n        else {\n            let cookieValue;\n            if (value!=null) {\n                cookieValue = name + '=' + value.toString();\n                if (expires instanceof Date)\n                    cookieValue += ';expires=' + expires.toUTCString();\n            }\n            else {\n                cookieValue = name + '=;expires=' + new Date('1970-01-01').toUTCString();\n            }\n            //set default cookie path to root\n            cookiePath = cookiePath || '/';\n            //set cookie domain\n            if (typeof domain === 'string')\n                cookieValue += ';domain=' + domain;\n            //set cookie path\n            if (typeof cookiePath === 'string')\n                cookieValue += ';path=' + cookiePath;\n            //set cookie\n            if (this.response) {\n                this.response.setHeader('Set-Cookie',cookieValue);\n            }\n        }\n    }\n\n    /**\n     * @param {*} p\n     */\n    moment(p) {\n        const moment = require(\"moment\"), locale = this.culture();\n        return moment(p).locale(locale);\n    }\n\n    /**\n     * @param {string} name - The name of the cookie to be added\n     * @param {string|*} value - The value of the cookie\n     * @param {Date=} expires - An optional parameter which sets cookie's expiration date. If this parameters is missing or is null a session cookie will be set.\n     * @param {string=} domain - An optional parameter which sets the cookie's domain.\n     * @param {string=} cpath - An optional parameter which sets the cookie's path. The default value is the root path.\n     * @returns {string|undefined}\n     */\n    setCookie(name, value, expires, domain, cpath) {\n        if (typeof name !== 'string')\n            throw 'Invalid argument. Argument [name] must be a string.';\n        if (typeof value !== 'string')\n            throw 'Invalid argument. Argument [value] must be a string.';\n        this.cookie(name, value, expires, domain, cpath);\n    }\n\n    /**\n     * Set a permanent cookie for user preferred language\n     * @param lang - A string which represents the user preferred language e.g. en-US, en-GB etc\n     */\n    setLangCookie(lang) {\n        this.cookie(\".LANG\", lang);\n    }\n\n    /**\n     * @param {string} name - The name of the cookie to be deleted\n     * @param {string=} domain - An optional parameter which indicates cookie's domain.\n     * @param {string=} cpath - An optional parameter which indicates cookie's path. The default value is the root path.\n     * @returns {string|undefined}\n     */\n    removeCookie(name, domain, cpath) {\n        if (typeof name !== 'string')\n            throw 'Invalid argument. Argument [name] must be a string.';\n\n        this.cookie(name, null, null , domain, cpath);\n    }\n\n    /**\n     * Executes the specified code in unattended mode.\n     * @param {function(function(Error=, *=))} fn\n     * @param {function(Error=, *=)} callback\n     */\n    unattended(fn, callback) {\n        const self = this;\n        let interactiveUser;\n        callback = callback || function() {};\n        fn = fn || function() {};\n        if (self._unattended) {\n            try {\n                fn.call(self, function(err, result) {\n                    callback(err, result);\n                });\n            }\n            catch(e) {\n                callback(e);\n            }\n            return;\n        }\n        //get unattended execution account\n        self.application.config.settings.auth = self.application.config.settings.auth || {};\n        const account = self.application.config.settings.auth.unattendedExecutionAccount;\n        //get interactive user\n        if (this.user) {\n            interactiveUser = { name:this.user.name,authenticationType: this.user.authenticationType };\n            //setting interactive user\n            self.interactiveUser = interactiveUser;\n        }\n        if (account) {\n            self.user = { name:account, authenticationType:'Basic' };\n        }\n        try {\n            self._unattended = true;\n            fn.call(self, function(err, result) {\n                //restore user\n                if (interactiveUser) {\n                    self.user = util._extend({ }, interactiveUser);\n                }\n                delete self.interactiveUser;\n                delete self._unattended;\n                callback(err, result);\n            });\n        }\n        catch(e) {\n            //restore user\n            if (interactiveUser) {\n                self.user = util._extend({ }, interactiveUser);\n            }\n            delete self.interactiveUser;\n            delete self._unattended;\n            callback(e);\n        }\n    }\n\n    /**\n     * Gets or sets the current culture\n     * @param {String=} value\n     */\n    culture(value) {\n        const self = this;\n        if (typeof value === 'undefined') {\n            if (this._culture)\n                return this._culture;\n            //get available cultures and default culture\n            let cultures = ['en-us'], defaultCulture = 'en-us';\n            if (this.application.config.settings) {\n                if (this.application.config.settings['localization']) {\n                    cultures = this.application.config.settings['localization']['cultures'] || cultures;\n                    defaultCulture = this.application.config.settings['localization']['default'] || defaultCulture;\n                }\n            }\n            let lang = defaultCulture;\n            //1. Check HTTP cookie .LANG value\n            if (typeof self.cookie(\".LANG\") === \"string\") {\n                lang = self.cookie(\".LANG\");\n            }\n            //2. Check [lang] HTTP request param\n            else if (self.params && self.params.lang) {\n                lang = self.params.lang;\n            }\n            //2. Check request HTTP header [accept-language]\n            else if (self.request && self.request.headers && self.request.headers['accept-language']) {\n                const langs = self.request.headers['accept-language'].split(';');\n                if (langs.length>0) {\n                    lang = langs[0].split(',')[0] || defaultCulture;\n                }\n            }\n            if (lang) {\n                //search application cultures\n                const obj = cultures.find(function(x) {\n                    return (x == lang.toLowerCase()) || (x.substr(0,2) == lang.toLowerCase().substr(0,2));\n                });\n                //if user culture is valid for this application\n                if (obj) {\n                    //set context culture\n                    this._culture=obj;\n                    return this._culture;\n                }\n            }\n            //otherwise use default culture\n            this._culture = defaultCulture;\n            return this._culture;\n        }\n        else {\n            this._culture = value;\n        }\n    }\n\n    /**\n     * Performs cross-site request forgery validation against the specified token\n     * @param {string=} csrfToken\n     */\n    validateAntiForgeryToken(csrfToken) {\n        const self = this;\n        if (typeof csrfToken === 'undefined') {\n            //try to get token from params\n            if (typeof self.params !== 'undefined')\n                csrfToken = self.params['_CSRFToken'];\n        }\n        if (typeof csrfToken !== 'string')\n            throw new HttpBadRequestError('Bad request. Invalid cross-site request forgery token.');\n        if (csrfToken.length==0)\n            throw new HttpBadRequestError('Bad request. Empty cross-site request forgery token.');\n        try {\n            const cookies = self.cookies;\n            let csrfCookieToken;\n            let csrfRequestToken;\n            if (cookies['.CSRF']) {\n                //try to decrypt cookie token\n                try {\n                    csrfCookieToken = JSON.parse(self.application.decrypt(cookies['.CSRF']));\n                }\n                catch(e) {\n                    throw new HttpBadRequestError('Bad request.Invalid cross-site request forgery data.');\n                }\n                //then try to decrypt the token provided\n                try {\n                    csrfRequestToken = JSON.parse(self.application.decrypt(csrfToken));\n                }\n                catch(e) {\n                    throw new HttpBadRequestError('Bad request.Invalid cross-site request forgery data.');\n                }\n                if ((typeof csrfCookieToken === 'object') && (typeof csrfRequestToken === 'object')) {\n\n                    let valid = true, tokenExpiration = 60;\n                    //1. validate token equality\n                    for(const key in csrfCookieToken) {\n                        if (csrfCookieToken.hasOwnProperty(key)) {\n                            if (csrfCookieToken[key]!==csrfRequestToken[key]) {\n                                valid = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (valid==true) {\n                        //2. validate timestamp\n                        const timestamp = new Date(csrfCookieToken.date);\n                        const diff = Math.abs((new Date())-timestamp);\n                        if (diff<0) {\n                            valid=false;\n                        }\n                        if (valid) {\n                            if (self.application.config.settings)\n                                if (self.application.config.settings.auth)\n                                    if (self.application.config.settings.auth['csrfExpiration'])\n                                         tokenExpiration = parseInt(self.application.config.settings.auth['csrfExpiration']);\n                            if (diff>tokenExpiration*60*1000)\n                                valid=false;\n                        }\n                    }\n                    if (valid)\n                        return;\n\n                }\n                throw new HttpBadRequestError('Bad request. A cross-site request forgery was detected.');\n            }\n            else {\n                throw new HttpBadRequestError('Bad request.Missing cross-site request forgery data.');\n            }\n        }\n        catch(e) {\n            if (e.status)\n                throw e;\n            else\n                throw new HttpServerError('Request validation failed.');\n        }\n    }\n\n    writeFile(file) {\n        try {\n            const fs = require(\"fs\");\n            const path = require(\"path\");\n            const app = require('./index');\n            const response = this.response;\n            //check if file exists\n            if (!fs.existsSync(file))\n                throw new HttpNotFoundError();\n            //get file extension\n            const extensionName = path.extname(file);\n            //and try to find this extension to MIME types\n\n            //get MIME collection\n            let contentType = null;\n            const mime = _.find(this.application.config.mimes, function (x) {\n                return (x.extension == extensionName);\n            });\n            if (_.isObject(mime))\n                contentType = mime.type;\n            //throw exception (MIME not found)\n            if (contentType == null)\n                throw new HttpForbiddenError();\n\n            fs.readFile(file, \"binary\", function (err, stream) {\n                if (err) {\n                    //todo:raise application asynchronous error\n                    response.writeHead(500, {'Content-Type': 'text/plain'});\n                    response.write('500 Internal Server Error');\n                    response.end();\n                    return;\n                }\n                response.writeHead(200, {'Content-Type': contentType});\n                response.write(stream, \"binary\");\n                response.end();\n            });\n\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Checks whether the HTTP method of the current request is equal or not to the given parameter.\n     * @param {String|Array} method - The HTTP method (GET, POST, PUT, DELETE)\n     * */\n    is(method) {\n        const self = this;\n        if (self.request == null)\n            return false;\n        if (util.isArray(method)) {\n            return (method.filter(function(x) { return self.request.method.toUpperCase() == x.toUpperCase(); }).length>0);\n        }\n        else {\n            if (typeof method !== 'string')\n                return false;\n            if (method=='*')\n                return true;\n            return (self.request.method.toUpperCase() == method.toUpperCase());\n        }\n\n    }\n\n    isPost() {\n        return this.is('POST');\n    }\n\n    /**\n     * @param {String|Array} method\n     * @param {Function} fn\n     * @returns {HttpContext}\n     */\n    handle(method, fn) {\n        const self = this;\n        if (self.is(method)) {\n            self.handled = true;\n            process.nextTick(function () {\n                fn.call(self);\n            });\n        }\n        return self;\n    }\n\n    /**\n     * Handles context error by executing the given callback\n     * @param {Function} callback\n     */\n    catch(callback) {\n        const self = this;\n        callback = callback || function() {};\n        self.once(\"error\", function(ev) {\n            return callback.call(self, ev.error);\n        });\n        return self;\n    }\n\n    /**\n     * @param {Function} fn\n     * @returns {HttpContext}\n     */\n    unhandle(fn) {\n        if (!this.handled) {\n            fn.call(this);\n        }\n        return this;\n    }\n\n    /**\n     * Invokes the given function if the current HTTP method is equal to POST\n     * @param {Function()} fn\n     * @returns {HttpContext}\n     */\n    handlePost(fn) {\n        return this.handle('POST', fn);\n    }\n\n    /**\n     * Invokes the given function if the current HTTP method is equal to GET\n     * @param {Function()} fn\n     * @returns {HttpContext}\n     */\n    handleGet(fn) {\n        return this.handle('GET', fn);\n    }\n\n    /**\n     * Invokes the given function if the current HTTP method is equal to PUT\n     * @param {Function()} fn\n     * @returns {HttpContext}\n     */\n    handlePut(fn) {\n        return this.handle('PUT', fn);\n    }\n\n    /**\n     * Invokes the given function if the current HTTP method is equal to PUT\n     * @param {Function()} fn\n     */\n    handleDelete(fn) {\n        return this.handle('DELETE', fn);\n    }\n\n    /**\n     * Gets or sets the current HTTP handler\n     * @param {Object=} value\n     * @returns {Function|Object}\n     */\n    currentHandler(value) {\n        if (value === undefined) {\n            return this.request.currentHandler;\n        }\n        else {\n            this.request.currentHandler = value;\n        }\n    }\n\n    /**\n     * Translates the given string to the language specified in this context\n     * @param {string} text - The string to translate\n     * @param {string=} lib - A string that represents the library which contains the source string. This arguments is optional. If this argument is missing, then the operation will use the default (global) library.\n     * @returns {*}\n     */\n    translate(text, lib) {\n        try {\n            const self = this, app = self.application;\n            //ensure locale\n            const locale = this.culture();\n            //ensure localization library\n            lib = lib || 'global';\n            //get cached library object if any\n            app.config.locales = app.config.locales || {};\n            let library = app.config.locales[lib];\n            //if library has not been yet initialized\n            if (!library) {\n                //get library path\n                var file = app.mapPath('/locales/'.concat(lib,'.',locale,'.json'));\n                //if file does not exist\n                if (!fs.existsSync(file))\n                {\n                    //return the give text\n                    return text;\n                }\n                else {\n                    //otherwise create library\n                    library = app.config.locales[lib] = {};\n                }\n            }\n            if (!library[locale]) {\n                var file = app.mapPath('/locales/'.concat(lib,'.',locale,'.json'));\n                if (fs.existsSync(file))\n                    library[locale] = JSON.parse(fs.readFileSync(file,'utf8'));\n            }\n            let result = text;\n            if (library[locale])\n                    result = library[locale][text];\n            return result || text;\n        }\n        catch (e) {\n            TraceUtils.log(e);\n            return text;\n        }\n    }\n\n    /**\n     * Creates an instance of a view engine based on the given extension (e.g. ejs, md etc)\n     * @param {string} extension\n     * @returns {*}\n     */\n    engine(extension) {\n        const item = this.application.config.engines.find(function(x) { return x.extension===extension; });\n        if (item) {\n            const engine = require(item.type);\n            if (typeof engine.createInstance !== 'function') {\n                throw new Error('Invalid view engine module.')\n            }\n            return engine.createInstance(this);\n        }\n    }\n\n    /**\n     * Creates a new instance of HttpViewContext class based on this HttpContext instance.\n     * @returns {HttpViewContext|*}\n     */\n    createViewContext() {\n        const mvc = require(\"./mvc\");\n        return new mvc.HttpViewContext(this);\n    }\n}"]}