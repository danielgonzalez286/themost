{"version":3,"sources":["context.es6"],"names":["_","url","path","HttpViewContext","Args","TraceUtils","HttpBadRequestError","LocalizationStrategy","DefaultDataContext","DataConfigurationStrategy","parseCookies","request","list","headers","cookie","rc","isEmpty","forEach","split","parts","shift","trim","unescape","join","cultureProperty","Symbol","applicationProperty","HttpContextParams","name","hasOwnProperty","re","RegExp","p","find","keys","x","test","getAttribute","HttpContext","app","response","params","getApplication","getConfiguration","getStrategy","uri","parse","result","extname","pathname","substr","toLowerCase","mime","self","extension","notNull","cookies","isNil","value","expires","domain","cookiePath","notEmpty","cookieValue","Date","isString","setHeader","lang","setCookie","method","notString","toUpperCase","localizationStrategy","getService","getDefaultCulture","getCookie","langs","length","obj","getCultures","csrfToken","csrfCookieToken","csrfRequestToken","JSON","decrypt","e","application","valid","tokenExpiration","key","timestamp","date","diff","Math","abs","settings","auth","parseInt","Object","filter","text","lib","warn","getLocaleString","getCulture","fn","callback","interactiveUser","_unattended","call","err","config","account","getSourceAt","user","authenticationType","assign"],"mappings":"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","file":"context.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport _ from 'lodash';\nimport url from 'url';\nimport path from 'path';\nimport {HttpViewContext} from './mvc';\nimport {Args,TraceUtils} from '@themost/common/utils';\nimport {HttpBadRequestError} from '@themost/common/errors';\nimport {LocalizationStrategy} from './localization';\nimport {DefaultDataContext} from '@themost/data/context'\nimport {DataConfigurationStrategy} from \"@themost/data/config\";\n\nfunction parseCookies(request) {\n    let list = {};\n    if (request && request.headers && request.headers.cookie) {\n        let rc = request.headers.cookie;\n        if (!_.isEmpty(rc)) {\n            _.forEach(rc.split(';'), (cookie) => {\n                let parts = cookie.split('=');\n                list[parts.shift().trim()] = unescape(parts.join('='));\n            });\n        }\n    }\n    return list;\n}\n\nconst cultureProperty = Symbol('culture');\nconst applicationProperty = Symbol('application');\n\n/**\n * @class\n */\nexport class HttpContextParams {\n    constructor() {\n        //\n    }\n\n    /**\n     * Gets an HttpContext parameter based on the given name\n     * @param name\n     * @returns {*}\n     */\n    getAttribute(name) {\n        if (typeof name === 'string') {\n            if (this.hasOwnProperty(name))\n                return this[name];\n            //otherwise make a case insensitive search\n            const re = new RegExp('^' + name + '$','i');\n            const p = _.find(_.keys(this), (x) => { return re.test(x); });\n            if (p)\n                return this[p];\n        }\n    }\n    /**\n     * Gets an HttpContext parameter based on the given name\n     * @param name\n     * @deprecated\n     * @returns {*}\n     */\n    attr(name) {\n        return this.getAttribute(name);\n    }\n}\n\n/**\n * @class\n * @property {HttpContextParams} params\n * @property {ClientRequest} request - Gets or sets the HTTP request of the current context\n * @property {ServerResponse} response - Gets or sets the HTTP response of the current context\n * @augments DefaultDataContext\n */\nexport class HttpContext extends DefaultDataContext {\n    /**\n     *\n     * @constructor\n     * @param {HttpApplication} app\n     * @param {ClientRequest} request\n     * @param {ServerResponse} response\n     */\n    constructor(app, request, response) {\n\n        super();\n\n        this[applicationProperty] = app;\n        /**\n         * Gets or sets the HTTP request of the current context\n         * @type {ClientRequest}\n         */\n        this.request = request;\n        /**\n         * Gets or sets the HTTP response of the current context\n         * @type {ServerResponse}\n         */\n        this.response = response;\n\n        /**\n         * @type {HttpContextParams}\n         */\n        this.params = new HttpContextParams();\n\n    }\n\n    /**\n     * @returns {DataConfigurationStrategy}\n     */\n    getConfiguration() {\n        return this.getApplication().getConfiguration().getStrategy(DataConfigurationStrategy);\n    }\n\n    /**\n     * @returns {HttpApplication}\n     */\n    getApplication() {\n        return this[applicationProperty];\n    }\n\n    /**\n     * Gets the MIME extension of the current HTTP request\n     * @returns {*}\n     */\n    getFormat() {\n        let uri = url.parse(this.request.url);\n        let result = path.extname(uri.pathname);\n        if (result) {\n            return result.substr(1).toLowerCase();\n        }\n        else {\n            //get mime type\n            let mime = self.mime;\n            if (mime) {\n                //and return the extension associated with this mime\n                return mime.extension.substr(1).toLowerCase();\n            }\n        }\n    }\n\n    /**\n     * Creates a new instance of HttpViewContext class based on this HttpContext instance.\n     * @returns {HttpViewContext}\n     */\n    createViewContext() {\n        return new HttpViewContext(this);\n    }\n\n    /**\n     * Gets an HTTP request cookie with the specified name\n     * @param {string} name\n     * @returns {*}\n     */\n    getCookie(name) {\n        Args.notNull(this.request,\"HTTP Request\");\n        const cookies = parseCookies(this.request);\n        if (_.isNil(cookies)) { return; }\n        return cookies[name];\n    }\n\n    /**\n     * Sets a cookie with the specified name and value. If the value is missing or is null the cookie will be removed.\n     * @param {string} name\n     * @param {*=} value\n     * @param {Date=} expires\n     * @param {string=} domain\n     * @param {string=} cookiePath\n     */\n    setCookie(name, value, expires, domain, cookiePath) {\n        Args.notEmpty(name,'Name');\n        Args.notNull(this.response,'HTTP Response');\n        let cookieValue;\n        if (!_.isNil(value)) {\n            cookieValue = `{name}={value.toString()}`;\n            if (expires instanceof Date)\n                cookieValue += `;expires={expires.toUTCString()}`;\n        }\n        else {\n            cookieValue = `{name}=;expires={new Date('1970-01-01').toUTCString()}`;\n        }\n        //set default cookie path to root\n        cookiePath = cookiePath || '/';\n        //set cookie domain\n        if (_.isString(domain))\n            cookieValue += `;domain={domain}`;\n        //set cookie path\n        if (_.isString(cookiePath))\n            cookieValue += `;path={cookiePath}`;\n        //set cookie\n        this.response.setHeader('Set-Cookie',cookieValue);\n    }\n\n    /**\n     * Set a permanent cookie for user preferred language\n     * @param lang - A string which represents the user preferred language e.g. en-US, en-GB etc\n     */\n    setLangCookie(lang) {\n        this.setCookie(\".LANG\", lang);\n    }\n\n    /**\n     * Checks whether the HTTP method of the current request is equal or not to the given parameter.\n     * @param {string} method - The HTTP method (GET, POST, PUT, DELETE, OPTIONS, HEAD)\n     * */\n    is(method) {\n        Args.notNull(this.request,'HTTP Request');\n        if (_.isNil(method)) { return false; }\n        Args.notString(this.request.method,'HTTP Method');\n        return (this.request.method.toUpperCase() === method.toUpperCase());\n    }\n    /**\n     * Gets the current culture\n     */\n    getCulture() {\n        if (this[cultureProperty])\n            return this[cultureProperty];\n        /**\n         * @type {LocalizationStrategy}\n         */\n        const localizationStrategy = this.getApplication().getService(LocalizationStrategy);\n        if (_.isNil(localizationStrategy)) {\n            return 'en-us';\n        }\n        let lang = localizationStrategy.getDefaultCulture();\n        //1. Check HTTP cookie .LANG value\n        if (typeof this.getCookie(\".LANG\") === \"string\") {\n            lang = this.getCookie(\".LANG\");\n        }\n        //2. Check [lang] HTTP request param\n        else if (this.params && this.params.lang) {\n            lang = this.params.lang;\n        }\n        //2. Check request HTTP header [accept-language]\n        else if (this.request && this.request.headers && this.request.headers['accept-language']) {\n            const langs = this.request.headers['accept-language'].split(';');\n            if (langs.length>0) {\n                lang = langs[0].split(',')[0] || localizationStrategy.getDefaultCulture();\n            }\n        }\n        if (lang) {\n            //search application cultures\n            const obj = _.find(localizationStrategy.getCultures(), function(x) {\n                return (x === lang.toLowerCase()) || (x.substr(0,2) === lang.toLowerCase().substr(0,2));\n            });\n            //if user culture is valid for this application\n            if (obj) {\n                //set context culture\n                this[cultureProperty]=obj;\n                return this[cultureProperty];\n            }\n        }\n        //otherwise use default culture\n        this[cultureProperty] = localizationStrategy.getDefaultCulture();\n        return this[cultureProperty];\n    }\n\n    /**\n     * Sets the current culture\n     * @param value\n     */\n    setCulture(value) {\n        Args.notEmpty(value,'culture');\n        this[cultureProperty] = value;\n    }\n\n    /**\n     * Performs cross-site request forgery validation against the specified token\n     * @param {string=} csrfToken\n     */\n    validateAntiForgeryToken(csrfToken) {\n        const self = this;\n        if (typeof csrfToken === 'undefined') {\n            //try to get token from params\n            if (typeof self.params !== 'undefined')\n                csrfToken = self.params['_CSRFToken'];\n        }\n        if (typeof csrfToken !== 'string')\n            throw new HttpBadRequestError('Bad request. Invalid cross-site request forgery token.');\n        if (csrfToken.length===0)\n            throw new HttpBadRequestError('Bad request. Empty cross-site request forgery token.');\n        const cookies = self.cookies;\n        let csrfCookieToken;\n        let csrfRequestToken;\n        if (cookies['.CSRF']) {\n            //try to decrypt cookie token\n            try {\n                csrfCookieToken = JSON.parse(self.getApplication().decrypt(cookies['.CSRF']));\n            }\n            catch(e) {\n                throw new HttpBadRequestError('Bad request.Invalid cross-site request forgery data.');\n            }\n            //then try to decrypt the token provided\n            try {\n                csrfRequestToken = JSON.parse(self.application.decrypt(csrfToken));\n            }\n            catch(e) {\n                throw new HttpBadRequestError('Bad request.Invalid cross-site request forgery data.');\n            }\n            if ((typeof csrfCookieToken === 'object') && (typeof csrfRequestToken === 'object')) {\n\n                let valid = true, tokenExpiration = 60;\n                //1. validate token equality\n                for(const key in csrfCookieToken) {\n                    if (csrfCookieToken.hasOwnProperty(key)) {\n                        if (csrfCookieToken[key]!==csrfRequestToken[key]) {\n                            valid = false;\n                            break;\n                        }\n                    }\n                }\n                if (valid===true) {\n                    //2. validate timestamp\n                    const timestamp = new Date(csrfCookieToken.date);\n                    const diff = Math.abs((new Date())-timestamp);\n                    if (diff<0) {\n                        valid=false;\n                    }\n                    if (valid) {\n                        if (self.getApplication().getConfiguration().settings)\n                            if (self.getApplication().getConfiguration().settings.auth)\n                                if (self.getApplication().getConfiguration().settings.auth['csrfExpiration'])\n                                    tokenExpiration = parseInt(self.getApplication().getConfiguration().auth['csrfExpiration']);\n                        if (diff>tokenExpiration*60*1000)\n                            valid=false;\n                    }\n                }\n                if (valid)\n                    return;\n\n            }\n            throw new HttpBadRequestError('Bad request. A cross-site request forgery was detected.');\n        }\n        else {\n            throw new HttpBadRequestError('Bad request.Missing cross-site request forgery data.');\n        }\n    }\n\n    getParam (name) {\n        if (typeof name === 'string') {\n            if (this.hasOwnProperty('params')) {\n                const params = this['params'];\n                if (typeof params !== 'object') {\n                    return;\n                }\n                if (params.hasOwnProperty(name))\n                    return params[name];\n                //otherwise make a case insensitive search\n                const re = new RegExp('^' + name + '$','i');\n                const p = Object.keys(params).filter(function(x) { return re.test(x); })[0];\n                if (p)\n                    return params[p];\n            }\n        }\n    }\n\n    /**\n     * Translates the given string to the language specified in this context\n     * @param {string} text - The string to translate\n     * @param {string=} lib - A string that represents the library which contains the source string. This arguments is optional. If this argument is missing, then the operation will use the default (global) library.\n     * @returns {*}\n     */\n    getLocaleString(text, lib) {\n        /**\n         * @type {LocalizationStrategy}\n         */\n        const localizationStrategy = this.getApplication().getService(LocalizationStrategy);\n        if (_.isNil(localizationStrategy)) {\n            TraceUtils.warn('The current application does not have a valid localization strategy. Define one in order to properly use localization methods.');\n            return text;\n        }\n        localizationStrategy.getLocaleString(this.getCulture(),text,lib);\n    }\n    /**\n     * Translates the given string to the language specified in this context\n     * @param {string} text - The string to translate\n     * @param {string=} lib - A string that represents the library which contains the source string. This arguments is optional. If this argument is missing, then the operation will use the default (global) library.\n     * @returns {*}\n     */\n    translate(text, lib) {\n        return this.getLocaleString(text,lib);\n    }\n\n    /**\n     * Executes the specified code in unattended mode.\n     * @param {Function} fn\n     * @param {Function} callback\n     */\n    unattended(fn, callback) {\n        const self = this;\n        let interactiveUser;\n        callback = callback || function() {};\n        fn = fn || function() {};\n        if (self._unattended) {\n            try {\n                fn.call(self, function(err, result) {\n                    callback(err, result);\n                });\n            }\n            catch(e) {\n                callback(e);\n            }\n            return;\n        }\n        //get unattended execution account\n        const config = self.getApplication().getConfiguration();\n        const account = config.getSourceAt('settings/auth/unattendedExecutionAccount');\n        //get interactive user\n        if (this.user) {\n            interactiveUser = { name:this.user.name,authenticationType: this.user.authenticationType };\n            //setting interactive user\n            self.interactiveUser = interactiveUser;\n        }\n        if (account) {\n            self.user = { name:account, authenticationType:'Basic' };\n        }\n        try {\n            self._unattended = true;\n            fn.call(self, function(err, result) {\n                //restore user\n                if (interactiveUser) {\n                    self.user = _.assign({ }, interactiveUser);\n                }\n                delete self.interactiveUser;\n                delete self._unattended;\n                callback(err, result);\n            });\n        }\n        catch(e) {\n            //restore user\n            if (interactiveUser) {\n                self.user = _.assign({ }, interactiveUser);\n            }\n            delete self.interactiveUser;\n            delete self._unattended;\n            callback(e);\n        }\n    }\n\n}"]}