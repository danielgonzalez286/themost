{"version":3,"sources":["mvc.es6"],"names":["_","Q","fs","util","path","crypto","async","xml","HttpNotFoundError","HttpForbiddenError","HttpError","HtmlWriter","HttpAnyResult","HttpContentResult","content","contentType","contentEncoding","data","context","self","nfcall","callback","response","isNil","writeHead","assign","headers","write","err","HttpEmptyResult","_json_ignore_null_replacer","key","value","undefined","HttpJsonResult","String","JSON","stringify","HttpJavascriptResult","HttpXmlResult","serialize","outerXML","HttpRedirectResult","url","HttpFileResult","physicalPath","fileName","exists","stat","stats","isFile","requestETag","request","md5","createHash","update","mtime","toString","responseETag","digest","end","extensionName","extname","mimes","getApplication","config","mime","filter","x","extension","type","encoding","source","createReadStream","pipe","on","e","queryDefaultViewPath","controller","view","queryAbsoluteViewPath","call","mapExecutionPath","querySharedViewPath","search","result","resolve","format","capitalizedController","charAt","toUpperCase","substring","isAbsolute","p","normalize","HttpViewResult","name","s","routeData","routePath","route","viewName","test","substr","replace","partial","controllerName","viewPath","viewEngine","eachSeries","getConfiguration","engines","engine","cb","searchViewName","join","EngineCtor","require","isFunction","ReferenceError","engineInstance","render","err1","resource","HttpController","toPromise","obj","length","concat","Date","valueOf","prototype","htm","html","HttpViewContext","body","title","layout","writer","Object","defineProperty","get","indent","configurable","enumerable","params","model","HtmlViewHelper","init","requestCookie","getHeader","cookie","executeRequest","then","statusCode","reject","lib","translate","$view","doc","antiforgery","application","encrypt","id","Math","floor","random","date","setHeader","writeAttribute","writeFullBeginTag","element","document","parentWindow","angular","lang","c","getCulture","toLowerCase","parent"],"mappings":"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","file":"mvc.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport _ from 'lodash';\nimport Q from 'q';\nimport fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport crypto from 'crypto';\nimport async from 'async';\nimport xml from 'most-xml';\nimport {HttpNotFoundError,HttpForbiddenError,HttpError} from '@themost/common/errors';\nimport {HtmlWriter} from '@themost/common/html';\nimport {HttpAnyResult} from \"./results\";\n\n/**\n * @classdesc Represents a user-defined HTTP content result, typically an HTML or XML string.\n * @class\n * @augments HttpAnyResult\n * */\nexport class HttpContentResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string} content\n     * @param {string=} contentType\n     * @param {string=} contentEncoding\n     */\n    constructor(content, contentType, contentEncoding) {\n        super();\n        this.data = content;\n        this.contentType = contentType || 'text/html';\n        this.contentEncoding = contentEncoding || 'utf8';\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     */\n    execute(context) {\n        const self = this;\n        return Q.nfcall(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback();\n            }\n            else {\n                response.writeHead(200, _.assign(self.headers, { 'Content-Type': self.contentType }));\n                response.write(self.data,self.contentEncoding, function(err) {\n                    return callback(err);\n                });\n            }\n        });\n    }\n\n}\n\n/**\n * @classdesc Represents an empty HTTP result.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpEmptyResult extends HttpAnyResult {\n    /**\n     * @param context\n     * @returns {Promise}\n     */\n    execute(context) {\n        //do nothing\n        context.response.writeHead(204, self.headers);\n        return Q();\n    }\n}\n\n/**\n * @param {string} key\n * @param {*} value\n * @returns {*}\n * @private\n */\nfunction _json_ignore_null_replacer(key, value) {\n    if (value===null)\n        return undefined;\n    return value;\n}\n\n/**\n * @classdesc Represents an action that is used to send JSON-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJsonResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (data instanceof String)\n            this.data = data;\n        else {\n            this.data = JSON.stringify(data, _json_ignore_null_replacer);\n        }\n        this.contentType = 'application/json;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n    /**\n     * @param context\n     * @returns {Promise}\n     */\n    execute(context) {\n        const self = this;\n        return Q.nfcall(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback();\n            }\n            response.writeHead(200, _.assign(self.headers, { 'Content-Type': self.contentType }));\n            response.write(self.data,self.contentEncoding, function(err) {\n                return callback(err);\n            });\n        });\n    }\n\n}\n\n/**\n * @classdesc Represents an action that is used to send Javascript-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJavascriptResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (typeof data === 'string')\n            this.data = data;\n        this.contentType = 'text/javascript;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * @param context\n     * @returns {Promise}\n     */\n    execute(context) {\n        const self = this;\n        return Q.nfcall(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback();\n            }\n            response.writeHead(200, _.assign(self.headers, { 'Content-Type': self.contentType }));\n            response.write(self.data,self.contentEncoding, function(err) {\n                return callback(err);\n            });\n        });\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send XML-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpXmlResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        this.contentType = 'text/xml';\n        this.contentEncoding = 'utf8';\n        if (typeof data === 'undefined' || data === null)\n            return;\n        if (typeof data === 'object')\n            this.data= xml.serialize(data).outerXML();\n        else\n            this.data=data;\n    }\n    /**\n     * @param context\n     * @returns {Promise}\n     */\n    execute(context) {\n        const self = this;\n        return Q.nfcall(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback();\n            }\n            response.writeHead(200, _.assign(self.headers, { 'Content-Type': self.contentType }));\n            response.write(self.data,self.contentEncoding, function(err) {\n                return callback(err);\n            });\n        });\n    }\n}\n\n/**\n * @classdesc Represents a redirect action to a specified URI.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpRedirectResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string|*} url\n     */\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @returns {Promise}\n     */\n    execute(context) {\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        response.writeHead(302, { 'Location': this.url });\n        return Q();\n    }\n}\n\n/**\n * @classdesc Represents a static file result\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpFileResult extends HttpAnyResult {\n    /**\n     *\n     * @constructor\n     * @param {string} physicalPath\n     * @param {string=} fileName\n     */\n    constructor(physicalPath, fileName) {\n        super();\n        this.physicalPath = physicalPath;\n        this.fileName = fileName;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @returns {Promise}\n     */\n    execute(context) {\n\n        const self = this;\n        return Q.nfcall(function(callback) {\n            const physicalPath = self.physicalPath,\n                fileName = self.fileName;\n            fs.exists(physicalPath, function(exists) {\n                if (!exists) {\n                    callback(new HttpNotFoundError());\n                }\n                else {\n                    try {\n                        fs.stat(physicalPath, function (err, stats) {\n                            if (err) {\n                                callback(err);\n                            }\n                            else {\n                                if (!stats.isFile()) {\n                                    callback(new HttpNotFoundError());\n                                }\n                                else {\n                                    //get if-none-match header\n                                    const requestETag = context.request.headers['if-none-match'];\n                                    //generate responseETag\n                                    const md5 = crypto.createHash('md5');\n                                    md5.update(stats.mtime.toString());\n                                    const responseETag = md5.digest('base64');\n                                    if (requestETag) {\n                                        if (requestETag === responseETag) {\n                                            context.response.writeHead(304);\n                                            context.response.end();\n                                            callback();\n                                            return;\n                                        }\n                                    }\n                                    let contentType = null;\n                                    //get file extension\n                                    const extensionName = path.extname(fileName || physicalPath);\n                                    //get MIME collection\n                                    const mimes = context.getApplication().config.mimes;\n                                    let contentEncoding = null;\n                                    //find MIME type by extension\n                                    const mime = mimes.filter(function (x) {\n                                        return x.extension === extensionName;\n                                    })[0];\n                                    if (mime) {\n                                        contentType = mime.type;\n                                        if (mime.encoding)\n                                            contentEncoding = mime.encoding;\n                                    }\n\n                                    //throw exception (MIME not found or access denied)\n                                    if (_.isNil(contentType)) {\n                                        callback(new HttpForbiddenError())\n                                    }\n                                    else {\n                                        //create read stream\n                                        const source = fs.createReadStream(physicalPath);\n                                        //add Content-Disposition: attachment; filename=\"<file name.ext>\"\n                                        context.response.writeHead(200, _.assign(self.headers, {\n                                            'Content-Type': contentType + (contentEncoding ? ';charset=' + contentEncoding : ''),\n                                            'ETag': responseETag\n                                        }));\n                                        //copy file\n                                        source.pipe(context.response);\n                                        source.on('end', function() {\n                                            callback();\n                                        });\n                                        source.on('error', function(err) {\n                                            callback(err);\n                                        });\n                                    }\n                                }\n                            }\n                        });\n                    }\n                    catch (e) {\n                        callback(e);\n                    }\n                }\n            });\n        });\n\n\n\n    }\n}\n\n/**\n * @this HttpContext\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction queryDefaultViewPath(controller, view, extension, callback) {\n    return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), controller, view, extension, callback);\n}\n/**\n * @this HttpContext\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction querySharedViewPath(view, extension, callback) {\n    return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), 'shared', view, extension, callback);\n}\n\n/**\n * @param search\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @private\n */\nfunction queryAbsoluteViewPath(search, controller, view, extension, callback) {\n    let result = path.resolve(search, util.format('%s/%s.html.%s', controller, view, extension));\n    fs.exists(result, function(exists) {\n        if (exists)\n            return callback(null, result);\n        //search for capitalized controller name e.g. person as Person\n        const capitalizedController = controller.charAt(0).toUpperCase() + controller.substring(1);\n        result = path.resolve(search, util.format('%s/%s.html.%s', capitalizedController, view, extension));\n        fs.exists(result, function(exists) {\n            if (exists)\n                return callback(null, result);\n            callback();\n        });\n    });\n}\n/**\n * @param {string} p\n * @returns {boolean}\n * @private\n */\nfunction isAbsolute(p) {\n    //var re = new RegExp('^' + p, 'i');\n    //return re.test(path.resolve(process.cwd(), p));\n    return path.normalize(p + '/') === path.normalize(path.resolve(p) + '/');\n}\n\n/**\n * Represents a class that is used to render a view.\n * @class\n * @param {string=} name - The name of the view.\n * @param {Array=} data - The data that are going to be used to render the view.\n * @augments HttpAnyResult\n */\nexport class HttpViewResult extends HttpAnyResult {\n    constructor(name, data) {\n        super();\n        this.name = name;\n        this.data = data || {};\n        this.contentType = 'text/html;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * Sets or changes the name of this HttpViewResult instance.\n     * @param {string} s\n     * @returns {HttpViewResult}\n     */\n    setName(s) {\n        this.name = s;\n        return this;\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @returns {Promise}\n     * */\n    execute(context) {\n        const self = this;\n\n        return Q.nfcall(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            //if the name is not defined get the action name of the current controller\n            if (!self.name)\n            //get action name\n                self.name = context.request.routeData['action'];\n            //validate [path] route param in order to load a view that is located in a views' sub-directory (or in another absolute path)\n            let routePath;\n            if (context.request.route) {\n                routePath =  context.request.route.path;\n            }\n            //get view name\n            let viewName = self.name;\n            if (/^partial/.test(viewName)) {\n                //partial view\n                viewName = viewName.substr(7).replace(/^-/,'');\n                context.request.route.partial = true;\n            }\n\n            //and of course controller's name\n            const controllerName = context.request.routeData['controller'];\n            //enumerate existing view engines e.g /views/controller/index.[html].ejs or /views/controller/index.[html].xform etc.\n            /**\n             * {HttpViewEngineReference|*}\n             */\n            let viewPath, viewEngine;\n            async.eachSeries(context.getApplication().getConfiguration().engines, function(engine, cb) {\n                if (viewPath) { cb(); return; }\n                if (routePath && isAbsolute(routePath)) {\n                    queryAbsoluteViewPath.call(context, routePath, controllerName, viewName, engine.extension, function(err, result) {\n                        if (err) { return cb(err); }\n                        if (result) {\n                            viewPath = result;\n                            viewEngine = engine;\n                            return cb();\n                        }\n                        else {\n                            return cb();\n                        }\n                    });\n                }\n                else {\n                    let searchViewName = viewName;\n                    if (routePath) {\n                        searchViewName = path.join(routePath, viewName);\n                    }\n                    //search by relative path\n                    queryDefaultViewPath.call(context, controllerName, searchViewName, engine.extension, function(err, result) {\n                        if (err) { return cb(err); }\n                        if (result) {\n                            viewPath = result;\n                            viewEngine = engine;\n                            return cb();\n                        }\n                        else {\n                            querySharedViewPath.call(context, searchViewName, engine.extension, function(err, result) {\n                                if (err) { return cb(err); }\n                                if (result) {\n                                    viewPath = result;\n                                    viewEngine = engine;\n                                    return cb();\n                                }\n                                cb();\n                            });\n                        }\n                    });\n                }\n\n            }, function(err) {\n                if (err) { return callback(err); }\n                if (viewEngine) {\n                    try {\n                        let EngineCtor = require(viewEngine.type);\n                        if (!_.isFunction(EngineCtor)) {\n                            return callback(new ReferenceError(util.format('The specified engine %s module does not export default class', viewEngine.type)));\n                        }\n                        /**\n                         * @type {HttpViewEngine|*}\n                         */\n                        const engineInstance = new EngineCtor(context);\n                        return engineInstance.render(viewPath, self.data, function(err, result) {\n                            if (err) {\n                                return callback(err);\n                            }\n                            else {\n                                response.writeHead(200, _.assign(self.headers, {\"Content-Type\": self.contentType}));\n                                response.write(result, self.contentEncoding);\n                                return callback();\n                            }\n                        });\n                    }\n                    catch(err) {\n                        return callback(err);\n                    }\n                }\n                else {\n                    const err1 = new HttpNotFoundError();\n                    if (context.request && context.request.url) {\n                        err1.resource = context.request.url;\n                    }\n                    return callback(err1);\n                }\n            });\n        });\n    }\n}\n\n/**\n * @classdesc Provides methods that respond to HTTP requests that are made to a web application\n * @class\n * @constructor\n * @param {HttpContext} context - The executing HTTP context.\n * @property {HttpContext} context - Gets or sets the HTTP context associated with this controller\n * @property {string} name - Gets or sets the internal name for this controller\n * */\nexport class HttpController {\n    constructor(context) {\n        this.context = context;\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns {Promise}\n     */\n    view(data) {\n        return (new HttpViewResult(null, data)).toPromise();\n    }\n\n    forbidden(callback) {\n        callback(new HttpForbiddenError());\n    }\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    html(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    htm(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {String=} data\n     * @returns HttpJavascriptResult\n     * */\n    js(data) {\n        return new HttpJavascriptResult(data);\n    }\n\n    /**\n     * Creates a view result object that represents a client javascript object.\n     * This result may be used for sharing specific objects stored in memory or server filesystem\n     * e.g. serve a *.json file as a client variable with name window.myVar1 or\n     * serve user settings object ({ culture: 'en-US', notifyMe: false}) as a variable with name window.settings\n     * @param {String} name\n     * @param {String|*} obj\n     * @returns HttpAnyResult\n     * */\n    jsvar(name, obj) {\n        if (typeof name !== 'string')\n            return new HttpEmptyResult();\n        if (name.length===0)\n            return new HttpEmptyResult();\n        if (typeof obj === 'undefined' || obj === null)\n            return new HttpJavascriptResult(name.concat(' = null;'));\n        else if (obj instanceof Date)\n            return new HttpJavascriptResult(name.concat(' = new Date(', obj.valueOf(), ');'));\n        else if (typeof obj === 'string')\n            return new HttpJavascriptResult(name.concat(' = ', obj, ';'));\n        else\n            return new HttpJavascriptResult(name.concat(' = ', JSON.stringify(obj), ';'));\n    }\n\n    /**\n     * Invokes a default action and returns an HttpViewResult instance\n     * @returns {Promise}\n     */\n    action() {\n        return this.view();\n    }\n\n    /**\n     * Creates a content result object by using a string.\n     * @returns HttpContentResult\n     * */\n    content(content) {\n        return new HttpContentResult(content);\n    }\n\n    /**\n     * Creates a JSON result object by using the specified data.\n     * @param {*} data\n     * @returns HttpJsonResult\n     * */\n    json(data) {\n        return new HttpJsonResult(data);\n    }\n\n    /**\n     * Creates a XML result object by using the specified data.\n     * @returns HttpXmlResult\n     * */\n    xml(data) {\n        return new HttpXmlResult(data);\n    }\n\n    /**\n     * Creates a binary file result object by using the specified path.\n     * @param {string}  physicalPath\n     * @param {string=}  fileName\n     * @returns {HttpFileResult|HttpAnyResult}\n     * */\n    file(physicalPath, fileName) {\n        return new HttpFileResult(physicalPath, fileName);\n    }\n\n    /**\n     * Creates a redirect result object that redirects to the specified URL.\n     * @returns HttpRedirectResult\n     * */\n    redirect(url) {\n        return new HttpRedirectResult(url);\n    }\n\n    /**\n     * Creates an empty result object.\n     * @returns HttpEmptyResult\n     * */\n    empty() {\n        return new HttpEmptyResult();\n    }\n}\n\n/**\n * Creates a view result object for the given request.\n * @param {*=} data\n * @returns HttpViewResult\n * */\nHttpController.prototype.htm = HttpController.prototype.html;\n\n/**\n * Encapsulates information that is related to rendering a view.\n * @class\n * @param {HttpContext} context\n * @property {DataModel} model\n * @property {HtmlViewHelper} html\n * @constructor\n * @augments {EventEmitter}\n */\nexport class HttpViewContext {\n    constructor(context) {\n        /**\n         * Gets or sets the body of the current view\n         * @type {String}\n         */\n        this.body='';\n        /**\n         * Gets or sets the title of the page if the view will be fully rendered\n         * @type {String}\n         */\n        this.title='';\n        /**\n         * Gets or sets the view layout page if the view will be fully rendered\n         * @type {String}\n         */\n        this.layout = null;\n        /**\n         * Gets or sets the view data\n         * @type {String}\n         */\n        this.data = null;\n        /**\n         * Represents the current HTTP context\n         * @type {HttpContext}\n         */\n        this.context = context;\n\n        /**\n         * @type {HtmlWriter}\n         */\n        this.writer = undefined;\n\n        let writer = null;\n        Object.defineProperty(this, 'writer', {\n            get:function() {\n                if (writer)\n                    return writer;\n                writer = new HtmlWriter();\n                writer.indent = false;\n                return writer;\n            }, configurable:false, enumerable:false\n        });\n\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get:function() {\n                if (self.context.params)\n                    if (self.context.params.controller)\n                        return self.context.model(self.context.params.controller);\n                return null;\n            }, configurable:false, enumerable:false\n        });\n\n        this.html = new HtmlViewHelper(this);\n        //class extension initiators\n        if (typeof this.init === 'function') {\n            //call init() method\n            this.init();\n        }\n    }\n\n    /**\n     * @param {string} url\n     * @returns {Promise}\n     */\n    render(url) {\n        //get response cookie, if any\n        let requestCookie = this.context.response.getHeader('set-cookie');\n        if (typeof this.context.request.headers.cookie !== 'undefined')\n            requestCookie = this.context.request.headers.cookie;\n        return this.context.getApplication().executeRequest({ url: url, cookie: requestCookie }).then((result)=> {\n            if ((result.statusCode>=200) && (result.statusCode<300))\n                return Q(result.body);\n            else\n                return Q.reject(new HttpError(result.statusCode));\n        });\n    }\n\n    init() {\n        //\n    }\n\n    /**\n     *\n     * @param {String} s\n     * @param {String=} lib\n     * @returns {String}\n     */\n    translate(s, lib) {\n        return this.context.translate(s, lib);\n    }\n\n    /**\n     * @param {HttpViewContext} $view\n     * @returns {*}\n     * @private\n     */\n    static HtmlViewHelper($view) {\n        let doc;\n        return {\n            antiforgery: function() {\n            //create token\n                const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n                //try to set cookie\n                context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n                return $view.writer.writeAttribute('type', 'hidden')\n                    .writeAttribute('id', '_CSRFToken')\n                    .writeAttribute('name', '_CSRFToken')\n                    .writeAttribute('value', value)\n                    .writeFullBeginTag('input')\n                    .toString();\n            },\n            element: function(obj) {\n                if (typeof doc === 'undefined') { doc = $view.context.application.document(); }\n                return doc.parentWindow.angular.element(obj);\n            },\n            lang: function() {\n                const context = $view.context, c= context.getCulture();\n                if (typeof c === 'string') {\n                    if (c.length>=2) {\n                        return c.toLowerCase().substring(0,2);\n                    }\n                }\n                //in all cases return default culture\n                return 'en';\n            }\n        };\n    }\n}\n\n/**\n * @classdesc A helper class for an instance of HttpViewContext class\n * @class\n * @property {HttpViewContext} parent - The parent HTTP View Context\n * @property {HTMLDocument|*} document - The in-process HTML Document\n */\nexport class HtmlViewHelper {\n    /**\n     * @constructor\n     * @param {HttpViewContext} view\n     */\n    constructor(view) {\n        let document;\n        const self = this;\n        Object.defineProperty(this, 'parent', {\n            get: function() {\n                return view;\n            } , configurable:false, enumerable:false\n        });\n        Object.defineProperty(this, 'document', {\n            get: function() {\n                if (typeof document !== 'undefined') { return document; }\n                document = self.view.context.application.document();\n                return document;\n            } , configurable:false, enumerable:false\n        });\n    }\n\n    antiforgery() {\n        const $view = this.parent;\n        //create token\n        const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n        //try to set cookie\n        context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n        return $view.writer.writeAttribute('type', 'hidden')\n            .writeAttribute('id', '_CSRFToken')\n            .writeAttribute('name', '_CSRFToken')\n            .writeAttribute('value', value)\n            .writeFullBeginTag('input')\n            .toString();\n    }\n\n    element(obj) {\n        return this.document.parentWindow.angular.element(obj);\n    }\n\n    lang() {\n        const $view = this.parent;\n        const context = $view.context, c= context.getCulture();\n        if (typeof c === 'string') {\n            if (c.length>=2) {\n                return c.toLowerCase().substring(0,2);\n            }\n        }\n        //in all cases return default culture\n        return 'en';\n    }\n}\n\n\n\n\n"]}