{"version":3,"sources":["mvc.es6"],"names":["HttpResult","contentType","contentEncoding","status","responseStatus","context","callback","self","response","isNil","data","writeHead","call","write","err","HttpContentResult","content","HttpEmptyResult","_json_ignore_null_replacer","key","value","undefined","HttpJsonResult","String","JSON","stringify","HttpJavascriptResult","HttpXmlResult","serialize","item","outerXML","HttpRedirectResult","url","HttpFileResult","physicalPath","fileName","app","require","exists","HttpNotFoundError","stat","stats","isFile","requestETag","request","headers","md5","createHash","update","mtime","toString","responseETag","digest","end","extensionName","extname","mimes","getApplication","config","mime","filter","x","extension","type","encoding","HttpForbiddenError","source","createReadStream","pipe","on","e","queryDefaultViewPath","controller","view","queryAbsoluteViewPath","application","mapPath","querySharedViewPath","search","result","resolve","format","capitalizedController","charAt","toUpperCase","substring","isAbsolute","p","normalize","HttpViewResult","name","s","util","fs","routePath","route","path","viewName","test","substr","replace","partial","controllerName","viewPath","viewEngine","eachSeries","engines","engine","cb","searchViewName","join","EngineCtor","default","ReferenceError","engineInstance","target","emit","render","er","resource","HttpController","fn","Error","obj","length","concat","Date","valueOf","prototype","htm","html","HttpViewEngine","new","TypeError","options","HttpViewEngineReference","HttpViewContext","body","title","layout","writer","Object","defineProperty","get","indent","configurable","enumerable","params","model","HtmlViewHelper","init","requestCookie","getHeader","cookie","executeRequest","lib","translate","$view","doc","antiforgery","encrypt","id","Math","floor","random","date","setHeader","writeAttribute","writeFullBeginTag","element","document","parentWindow","angular","lang","c","culture","toLowerCase","parent"],"mappings":"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","file":"mvc.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport {_} from 'lodash';\nimport fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport crypto from 'crypto';\nimport async from 'async';\nimport xml from 'most-xml';\nimport {HttpNotFoundError,HttpForbiddenError,HttpError} from '@themost/common/errors';\nimport {SequentialEventEmitter} from '@themost/common/emitter';\nimport {HtmlWriter} from '@themost/common/html';\n\n/**\n * @classdesc Represents an HTTP result\n * @class\n * @property {*} data - Gets or sets the data associated with the HTTP result\n */\nexport class HttpResult {\n\n    constructor() {\n        this.contentType = 'text/html';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     *\n     * @param {Number=} status\n     */\n    status(status) {\n        this.responseStatus = status;\n        return this;\n    }\n\n    /**\n     * Executes an HttpResult instance against an existing HttpContext.\n     * @param {HttpContext} context\n     * @param {Function} callback\n     * */\n    execute(context, callback) {\n        const self = this;\n        callback = callback || function() {};\n        try {\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback.call(context);\n            }\n            response.writeHead(this.responseStatus || 200, {\"Content-Type\": this.contentType});\n            response.write(self.data, this.contentEncoding);\n            return callback.call(context);\n        }\n        catch(err) {\n            callback.call(context, err);\n        }\n    }\n}\n\n/**\n * @classdesc Represents a user-defined HTTP content result, typically an HTML or XML string.\n * @class\n * @augments HttpResult\n * */\nexport class HttpContentResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {string} content\n     */\n    constructor(content) {\n        super();\n        this.data = content;\n        this.contentType = 'text/html';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an empty HTTP result.\n * @class\n * @augments HttpResult\n */\nexport class HttpEmptyResult extends HttpResult {\n    execute(context, callback) {\n        //do nothing\n        callback = callback || function() {};\n        callback.call(context);\n    }\n}\n\n/**\n * @param {string} key\n * @param {*} value\n * @returns {*}\n * @private\n */\nfunction _json_ignore_null_replacer(key, value) {\n    if (value==null)\n        return undefined;\n    return value;\n}\n\n/**\n * @classdesc Represents an action that is used to send JSON-formatted content.\n * @class\n * @augments HttpResult\n */\nexport class HttpJsonResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (data instanceof String)\n            this.data = data;\n        else {\n            this.data = JSON.stringify(data, _json_ignore_null_replacer);\n        }\n\n        this.contentType = 'application/json;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send Javascript-formatted content.\n * @class\n * @augments HttpResult\n */\nexport class HttpJavascriptResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (typeof data === 'string')\n            this.data = data;\n        this.contentType = 'text/javascript;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send XML-formatted content.\n * @class\n * @augments HttpResult\n */\nexport class HttpXmlResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        this.contentType = 'text/xml';\n        this.contentEncoding = 'utf8';\n        if (typeof data === 'undefined' || data == null)\n            return;\n        if (typeof data === 'object')\n            this.data= xml.serialize(data, { item:'Item' }).outerXML();\n        else\n            this.data=data;\n    }\n}\n\n/**\n * @classdesc Represents a redirect action to a specified URI.\n * @class\n * @augments HttpResult\n */\nexport class HttpRedirectResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {string|*} url\n     */\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    execute(context, callback) {\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        response.writeHead(302, { 'Location': this.url });\n        //response.end();\n        callback.call(context);\n    }\n}\n\n/**\n * @classdesc Represents a static file result\n * @class\n * @augments HttpResult\n */\nexport class HttpFileResult extends HttpResult {\n    /**\n     *\n     * @constructor\n     * @param {string} physicalPath\n     * @param {string=} fileName\n     */\n    constructor(physicalPath, fileName) {\n        super();\n        this.physicalPath = physicalPath;\n        this.fileName = fileName;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    execute(context, callback) {\n        callback = callback || function() {};\n        const physicalPath = this.physicalPath, fileName = this.fileName, app = require('./index');\n        fs.exists(physicalPath, function(exists) {\n            if (!exists) {\n                callback(new app.HttpNotFoundError());\n            }\n            else {\n                try {\n                    fs.stat(physicalPath, function (err, stats) {\n                        if (err) {\n                            callback(err);\n                        }\n                        else {\n                            if (!stats.isFile()) {\n                                callback(new app.HttpNotFoundError());\n                            }\n                            else {\n                                //get if-none-match header\n                                const requestETag = context.request.headers['if-none-match'];\n                                //generate responseETag\n                                const md5 = crypto.createHash('md5');\n                                md5.update(stats.mtime.toString());\n                                const responseETag = md5.digest('base64');\n                                if (requestETag) {\n                                    if (requestETag == responseETag) {\n                                        context.response.writeHead(304);\n                                        context.response.end();\n                                        callback();\n                                        return;\n                                    }\n                                }\n                                let contentType = null;\n                                //get file extension\n                                const extensionName = path.extname(fileName || physicalPath);\n                                //get MIME collection\n                                const mimes = context.getApplication().config.mimes;\n                                let contentEncoding = null;\n                                //find MIME type by extension\n                                const mime = mimes.filter(function (x) {\n                                    return x.extension == extensionName;\n                                })[0];\n                                if (mime) {\n                                    contentType = mime.type;\n                                    if (mime.encoding)\n                                        contentEncoding = mime.encoding;\n                                }\n\n                                //throw exception (MIME not found or access denied)\n                                if (_.isNil(contentType)) {\n                                    callback(new app.HttpForbiddenError())\n                                }\n                                else {\n                                    /*//finally process request\n                                    fs.readFile(physicalPath, 'binary', function (err, data) {\n                                        if (err) {\n                                            callback(e);\n                                        }\n                                        else {\n                                            //add Content-Disposition: attachment; filename=\"<file name.ext>\"\n                                            context.response.writeHead(200, {\n                                                'Content-Type': contentType + (contentEncoding ? ';charset=' + contentEncoding : ''),\n                                                'ETag': responseETag\n                                            });\n                                            context.response.write(data, \"binary\");\n                                            callback();\n                                        }\n                                    });*/\n                                    //create read stream\n                                    const source = fs.createReadStream(physicalPath);\n                                    //add Content-Disposition: attachment; filename=\"<file name.ext>\"\n                                    context.response.writeHead(200, {\n                                        'Content-Type': contentType + (contentEncoding ? ';charset=' + contentEncoding : ''),\n                                        'ETag': responseETag\n                                    });\n                                    //copy file\n                                    source.pipe(context.response);\n                                    source.on('end', function() {\n                                        callback();\n                                    });\n                                    source.on('error', function(err) {\n                                        callback(err);\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n                catch (e) {\n                    callback(e);\n                }\n            }\n        });\n\n    }\n}\n\n/**\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction queryDefaultViewPath(controller, view, extension, callback) {\n   return queryAbsoluteViewPath.call(this, this.application.mapPath('/views'), controller, view, extension, callback);\n}\n/**\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction querySharedViewPath(view, extension, callback) {\n    return queryAbsoluteViewPath.call(this, this.application.mapPath('/views'), 'shared', view, extension, callback);\n}\n\n/**\n * @param search\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @private\n */\nfunction queryAbsoluteViewPath(search, controller, view, extension, callback) {\n    let result = path.resolve(search, util.format('%s/%s.html.%s', controller, view, extension));\n    fs.exists(result, function(exists) {\n        if (exists)\n            return callback(null, result);\n        //search for capitalized controller name e.g. person as Person\n        const capitalizedController = controller.charAt(0).toUpperCase() + controller.substring(1);\n        result = path.resolve(search, util.format('%s/%s.html.%s', capitalizedController, view, extension));\n        fs.exists(result, function(exists) {\n            if (exists)\n                return callback(null, result);\n            callback();\n        });\n    });\n}\n/**\n * @param {string} p\n * @returns {boolean}\n * @private\n */\nfunction isAbsolute(p) {\n    //var re = new RegExp('^' + p, 'i');\n    //return re.test(path.resolve(process.cwd(), p));\n    return path.normalize(p + '/') === path.normalize(path.resolve(p) + '/');\n}\n\n/**\n * Represents a class that is used to render a view.\n * @class\n * @param {string=} name - The name of the view.\n * @param {Array=} data - The data that are going to be used to render the view.\n * @augments HttpResult\n */\nexport class HttpViewResult extends HttpResult {\n    constructor(name, data) {\n        super();\n        this.name = name;\n        this.data = data==undefined? []: data;\n        this.contentType = 'text/html;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * Sets or changes the name of this HttpViewResult instance.\n     * @param {string} s\n     * @returns {HttpViewResult}\n     */\n    setName(s) {\n        this.name = s;\n        return this;\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     * */\n    execute(context, callback) {\n        const self = this;\n        callback = callback || function() {};\n        const app = require('./index'), util = require('util'), fs = require('fs');\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        //if the name is not defined get the action name of the current controller\n        if (!this.name)\n            //get action name\n            this.name = context.data['action'];\n        //validate [path] route param in order to load a view that is located in a views' sub-directory (or in another absolute path)\n        let routePath;\n        if (context.request.route) {\n            routePath =  context.request.route.path;\n        }\n        //get view name\n        let viewName = this.name;\n        if (/^partial/.test(viewName)) {\n            //partial view\n            viewName = viewName.substr(7).replace(/^-/,'');\n            context.request.route.partial = true;\n        }\n\n        //and of course controller's name\n        const controllerName = context.data['controller'];\n        //enumerate existing view engines e.g /views/controller/index.[html].ejs or /views/controller/index.[html].xform etc.\n        /**\n         * {HttpViewEngineReference|*}\n         */\n        let viewPath, viewEngine;\n        async.eachSeries(context.application.config.engines, function(engine, cb) {\n            if (viewPath) { cb(); return; }\n            if (routePath && isAbsolute(routePath)) {\n                queryAbsoluteViewPath.call(context, routePath, controllerName, viewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        return cb();\n                    }\n                });\n            }\n            else {\n                let searchViewName = viewName;\n                if (routePath) {\n                    searchViewName = path.join(routePath, viewName);\n                }\n                //search by relative path\n                queryDefaultViewPath.call(context, controllerName, searchViewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        querySharedViewPath.call(context, searchViewName, engine.extension, function(err, result) {\n                            if (err) { return cb(err); }\n                            if (result) {\n                                viewPath = result;\n                                viewEngine = engine;\n                                return cb();\n                            }\n                            cb();\n                        });\n                    }\n                });\n            }\n\n        }, function(err) {\n            if (err) { callback(err); return; }\n            if (viewEngine) {\n                const engine = require(viewEngine.type);\n                let EngineCtor = engine.default;\n                if (typeof EngineCtor !== 'function') {\n                    return callback(new ReferenceError(util.format('The specified engine %s module does not export default class', viewEngine.type)));\n                }\n                /**\n                 * @type {HttpViewEngine|*}\n                 */\n                const engineInstance = new EngineCtor(context);\n                //render\n                const e = { context:context, target:self };\n                context.emit('preExecuteResult', e, function(err) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        engineInstance.render(viewPath, self.data, function(err, result) {\n                            if (err) {\n                                callback.call(context, err);\n                            }\n                            else {\n                                //HttpViewResult.result or data (?)\n                                self.result = result;\n                                context.emit('postExecuteResult', e, function(err) {\n                                    if (err) {\n                                        callback.call(context, err);\n                                    }\n                                    else {\n                                        response.writeHead(200, {\"Content-Type\": self.contentType});\n                                        response.write(self.result, self.contentEncoding);\n                                        callback.call(context);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n\n            }\n            else {\n                const er = new HttpNotFoundError();\n                if (context.request && context.request.url) {\n                    er.resource = context.request.url;\n                }\n                callback.call(context, er);\n            }\n        });\n\n\n\n\n    }\n}\n\n/**\n * @classdesc Provides methods that respond to HTTP requests that are made to a web application\n * @class\n * @constructor\n * @param {HttpContext} context - The executing HTTP context.\n * @property {HttpContext} context - Gets or sets the HTTP context associated with this controller\n * @property {string} name - Gets or sets the internal name for this controller\n * */\nexport class HttpController {\n    constructor(context) {\n        this.context = context;\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns {HttpViewResult}\n     */\n    view(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result based on the context content type\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    result(data) {\n        if (this.context) {\n             const fn = this[this.context.format];\n            if (typeof fn !== 'function')\n                throw new HttpError(400,'Not implemented.');\n            return fn.call(this, data);\n        }\n        else\n            throw new Error('Http context cannot be empty at this context.');\n    }\n\n    forbidden(callback) {\n        callback(new HttpForbiddenError());\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    html(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    htm(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {String=} data\n     * @returns HttpJavascriptResult\n     * */\n    js(data) {\n        return new HttpJavascriptResult(data);\n    }\n\n    /**\n     * Creates a view result object that represents a client javascript object.\n     * This result may be used for sharing specific objects stored in memory or server filesystem\n     * e.g. serve a *.json file as a client variable with name window.myVar1 or\n     * serve user settings object ({ culture: 'en-US', notifyMe: false}) as a variable with name window.settings\n     * @param {String} name\n     * @param {String|*} obj\n     * @returns HttpResult\n     * */\n    jsvar(name, obj) {\n        if (typeof name !== 'string')\n            return new HttpEmptyResult();\n        if (name.length==0)\n            return new HttpEmptyResult();\n        if (typeof obj === 'undefined' || obj == null)\n            return new HttpJavascriptResult(name.concat(' = null;'));\n        else if (obj instanceof Date)\n            return new HttpJavascriptResult(name.concat(' = new Date(', obj.valueOf(), ');'));\n        else if (typeof obj === 'string')\n            return new HttpJavascriptResult(name.concat(' = ', obj, ';'));\n        else\n            return new HttpJavascriptResult(name.concat(' = ', JSON.stringify(obj), ';'));\n    }\n\n    /**\n     * Invokes a default action and returns an HttpViewResult instance\n     * @param {Function} callback\n     */\n    action(callback) {\n        callback(null, this.view());\n    }\n\n    /**\n     * Creates a content result object by using a string.\n     * @returns HttpContentResult\n     * */\n    content(content) {\n         return new HttpContentResult(content);\n    }\n\n    /**\n     * Creates a JSON result object by using the specified data.\n     * @returns HttpJsonResult\n     * */\n    json(data) {\n        return new HttpJsonResult(data);\n    }\n\n    /**\n     * Creates a XML result object by using the specified data.\n     * @returns HttpXmlResult\n     * */\n    xml(data) {\n        return new HttpXmlResult(data);\n    }\n\n    /**\n     * Creates a binary file result object by using the specified path.\n     * @param {string}  physicalPath\n     * @param {string=}  fileName\n     * @returns {HttpFileResult|HttpResult}\n     * */\n    file(physicalPath, fileName) {\n        return new HttpFileResult(physicalPath, fileName);\n    }\n\n    /**\n     * Creates a redirect result object that redirects to the specified URL.\n     * @returns HttpRedirectResult\n     * */\n    redirect(url) {\n        return new HttpRedirectResult(url);\n    }\n\n    /**\n     * Creates an empty result object.\n     * @returns HttpEmptyResult\n     * */\n    empty() {\n        return new HttpEmptyResult();\n    }\n}\n\n/**\n * Creates a view result object for the given request.\n * @param {*=} data\n * @returns HttpViewResult\n * */\nHttpController.prototype.htm = HttpController.prototype.html;\n\n/**\n * @classdesc An abstract class which represents a view engine\n * @class\n * @property {HttpContext} context\n * @augments {EventEmitter}\n */\nexport class HttpViewEngine extends SequentialEventEmitter {\n\n    /**\n     * @constructor\n     * @param {HttpContext=} context\n     */\n    constructor(context) {\n        super();\n        if (new.target === HttpViewEngine) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n        this.context = context;\n    }\n\n    /**\n     * Renders the specified view with the options provided\n     * @param {string} url\n     * @param {*} options\n     * @param {Function} callback\n     */\n    render(url, options, callback) {\n        //\n    }\n}\n\n\n/**\n * @classdesc Represents an HTTP view engine in application configuration\n * @abstract\n * @class\n * @property {string} type - Gets or sets the class associated with an HTTP view engine\n * @property {string} name - Gets or sets the name of an HTTP view engine\n * @property {string} extension - Gets or sets the layout extension associated with an HTTP view engine\n */\nexport class HttpViewEngineReference\n{\n    /**\n     * @constructor\n     */\n    constructor() {\n        if (new.target === HttpViewEngineReference) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n    }\n}\n\n/**\n * Encapsulates information that is related to rendering a view.\n * @class\n * @param {HttpContext} context\n * @property {DataModel} model\n * @property {HtmlViewHelper} html\n * @constructor\n * @augments {EventEmitter}\n */\nexport class HttpViewContext extends SequentialEventEmitter {\n    constructor(context) {\n        super();\n        /**\n         * Gets or sets the body of the current view\n         * @type {String}\n         */\n        this.body='';\n        /**\n         * Gets or sets the title of the page if the view will be fully rendered\n         * @type {String}\n         */\n        this.title='';\n        /**\n         * Gets or sets the view layout page if the view will be fully rendered\n         * @type {String}\n         */\n        this.layout = null;\n        /**\n         * Gets or sets the view data\n         * @type {String}\n         */\n        this.data = null;\n        /**\n         * Represents the current HTTP context\n         * @type {HttpContext}\n         */\n        this.context = context;\n\n        /**\n         * @type {HtmlWriter}\n         */\n        this.writer = undefined;\n\n        let writer = null;\n        Object.defineProperty(this, 'writer', {\n            get:function() {\n                if (writer)\n                    return writer;\n                writer = new HtmlWriter();\n                writer.indent = false;\n                return writer;\n            }, configurable:false, enumerable:false\n        });\n\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get:function() {\n                if (self.context.params)\n                    if (self.context.params.controller)\n                        return self.context.model(self.context.params.controller);\n                return null;\n            }, configurable:false, enumerable:false\n        });\n\n        this.html = new HtmlViewHelper(this);\n        //class extension initiators\n        if (typeof this.init === 'function') {\n            //call init() method\n            this.init();\n        }\n    }\n\n    /**\n     * @param {string} url\n     * @param {Function} callback\n     * @returns {string}\n     */\n    render(url, callback) {\n        callback = callback || function() {};\n        const app = require('./index');\n        //get response cookie, if any\n        let requestCookie = this.context.response.getHeader('set-cookie');\n        if (typeof this.context.request.headers.cookie !== 'undefined')\n            requestCookie = this.context.request.headers.cookie;\n        this.context.application.executeRequest( { url: url, cookie: requestCookie }, function(err, result) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                callback(null, result.body);\n            }\n        });\n    }\n\n    init() {\n        //\n    }\n\n    /**\n     *\n     * @param {String} s\n     * @param {String=} lib\n     * @returns {String}\n     */\n    translate(s, lib) {\n        return this.context.translate(s, lib);\n    }\n\n    /**\n     *\n     * @param {String} s\n     * @param {String=} lib\n     * @returns {String}\n     */\n    $T(s, lib) {\n        return this.translate(s, lib);\n    }\n\n    /**\n     * @param {HttpViewContext} $view\n     * @returns {*}\n     * @private\n     */\n    static HtmlViewHelper($view) {\n        let doc;\n        return {\n        antiforgery: function() {\n            //create token\n            const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n            //try to set cookie\n            context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n            return $view.writer.writeAttribute('type', 'hidden')\n                .writeAttribute('id', '_CSRFToken')\n                .writeAttribute('name', '_CSRFToken')\n                .writeAttribute('value', value)\n                .writeFullBeginTag('input')\n                .toString();\n        },\n        element: function(obj) {\n            if (typeof doc === 'undefined') { doc = $view.context.application.document(); }\n            return doc.parentWindow.angular.element(obj);\n        },\n        lang: function() {\n            const context = $view.context, c= context.culture();\n            if (typeof c === 'string') {\n                if (c.length>=2) {\n                    return c.toLowerCase().substring(0,2);\n                }\n            }\n            //in all cases return default culture\n            return 'en';\n        }\n    };\n    }\n}\n\n/**\n * @classdesc A helper class for an instance of HttpViewContext class\n * @class\n * @property {HttpViewContext} parent - The parent HTTP View Context\n * @property {HTMLDocument|*} document - The in-process HTML Document\n */\nexport class HtmlViewHelper {\n    /**\n     * @constructor\n     * @param {HttpViewContext} view\n     */\n    constructor(view) {\n        let document;\n        const self = this;\n        Object.defineProperty(this, 'parent', {\n            get: function() {\n                return view;\n            } , configurable:false, enumerable:false\n        });\n        Object.defineProperty(this, 'document', {\n            get: function() {\n                if (typeof document !== 'undefined') { return document; }\n                document = self.view.context.application.document();\n                return document;\n            } , configurable:false, enumerable:false\n        });\n    }\n\n    antiforgery() {\n        const $view = this.parent;\n        //create token\n        const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n        //try to set cookie\n        context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n        return $view.writer.writeAttribute('type', 'hidden')\n            .writeAttribute('id', '_CSRFToken')\n            .writeAttribute('name', '_CSRFToken')\n            .writeAttribute('value', value)\n            .writeFullBeginTag('input')\n            .toString();\n    }\n\n    element(obj) {\n        return this.document.parentWindow.angular.element(obj);\n    }\n\n    lang() {\n        const $view = this.parent;\n        const context = $view.context, c= context.culture();\n        if (typeof c === 'string') {\n            if (c.length>=2) {\n                return c.toLowerCase().substring(0,2);\n            }\n        }\n        //in all cases return default culture\n        return 'en';\n    }\n}\n\n\n\n\n"]}