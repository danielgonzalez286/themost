{"version":3,"sources":["jade.es6"],"names":["jade","fs","JadeEngine","context","ctx","Object","defineProperty","get","set","value","configurable","enumerable","file","data","callback","self","physicalPath","call","TypeError","readFile","err","source","fn","compile","result"],"mappings":"AAAA;;;;;;;;AAQA;;;;;;;;AACA;;IAAOA,I;;AACP;;IAAOC,E;;;;;;AAGP;;;;;;;IAOMC,U;AACF,wBAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,MAAMD,OAAV;AACAE,eAAOC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnCC,iBAAK,eAAY;AACb,uBAAOH,GAAP;AACH,aAHkC;AAInCI,iBAAK,aAAUC,KAAV,EAAiB;AAClBL,sBAAMK,KAAN;AACH,aANkC;AAOnCC,0BAAc,KAPqB;AAQnCC,wBAAY;AARuB,SAAvC;AAUH;;AAED;;;;;;;;;;+BAMOC,I,EAAMC,I,EAAMC,Q,EAAU;AACzBA,uBAAWA,YAAa,YAAM,CAAE,CAAhC;AACA,gBAAMC,OAAO,IAAb;AACA,gBAAIC,qBAAJ;AACA,gBAAI;AACA;AACA,oBAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;AAC5B;AACAI,mCAAeJ,KAAKK,IAAL,EAAf;AACH,iBAHD,MAIK,IAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;AAC/B;AACAI,mCAAeJ,IAAf;AACH,iBAHI,MAIA;AACD;AACA,2BAAOE,SAAS,IAAII,SAAJ,CAAc,uDAAd,CAAT,CAAP;AACH;AACDjB,mBAAGkB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,EAAkC,UAACI,GAAD,EAAMC,MAAN,EAAiB;AAC/C,wBAAID,GAAJ,EAAS;AACL,+BAAON,SAASM,GAAT,CAAP;AACH;AACD;AACA,wBAAI;AACA,4BAAME,KAAKtB,KAAKuB,OAAL,CAAaF,MAAb,CAAX;AACAR,+BAAOA,QAAQ,EAAf;AACAR,+BAAOC,cAAP,CAAsBO,IAAtB,EAA4B,SAA5B,EAAuC;AAClCN,iCAAK,eAAW;AACZ,uCAAOQ,KAAKZ,OAAZ;AACJ,6BAHkC;AAInCQ,wCAAW,KAJwB,EAIjBD,cAAa;AAJI,yBAAvC;AAMA,4BAAMc,SAASF,GAAGT,IAAH,CAAf;AACA,+BAAOC,SAAS,IAAT,EAAeU,MAAf,CAAP;AACH,qBAXD,CAYA,OAAOJ,GAAP,EAAY;AACR,+BAAON,SAASM,GAAT,CAAP;AACH;AACJ,iBApBD;AAqBH,aAnCD,CAoCA,OAAMA,GAAN,EAAW;AACP,uBAAON,SAASM,GAAT,CAAP;AACH;AACJ;;;;;;AAGL;;;kBACelB,U","file":"jade.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport jade from 'jade';\nimport fs from 'fs';\n\n\n/**\n * @class\n * Represents a view engine that may be used in MOST Web Framework applications.\n * @param {HttpContext|*} context\n * @constructor\n * @property {HttpContext|*} context\n */\nclass JadeEngine {\n    constructor(context) {\n        let ctx = context;\n        Object.defineProperty(this, 'context', {\n            get: function () {\n                return ctx;\n            },\n            set: function (value) {\n                ctx = value;\n            },\n            configurable: false,\n            enumerable: false\n        });\n    }\n\n    /**\n     * Renders the view by attaching the data specified if any\n     * @param {string|Function} file A string that represents the physical path of the view or a function which returns the view path\n     * @param {*} data Any data to be attached in the result\n     * @param {Function} callback A callback function to be called when rendering operation will be completed.\n     */\n    render(file, data, callback) {\n        callback = callback || (() => {});\n        const self = this;\n        let physicalPath;\n        try {\n            //if first argument is a function\n            if (typeof file === 'function') {\n                //invoke this function and return the physical path of the target view\n                physicalPath = file.call();\n            }\n            else if (typeof file === 'string') {\n                //otherwise get physical\n                physicalPath = file;\n            }\n            else {\n                //or raise error for invalid type\n                return callback(new TypeError('The target view path has an invalid type or is empty.'));\n            }\n            fs.readFile(physicalPath, 'utf8', (err, source) => {\n                if (err) {\n                    return callback(err);\n                }\n                //render data\n                try {\n                    const fn = jade.compile(source);\n                    data = data || { };\n                    Object.defineProperty(data, 'context', {\n                         get: function() {\n                             return self.context;\n                        },\n                        enumerable:false, configurable:false\n                    });\n                    const result = fn(data);\n                    return callback(null, result);\n                }\n                catch (err) {\n                    return callback(err);\n                }\n            });\n        }\n        catch(err) {\n            return callback(err);\n        }\n    }\n}\n\n//noinspection JSUnusedGlobalSymbols\nexport default JadeEngine;"]}