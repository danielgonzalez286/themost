{"version":3,"sources":["engines/vash.es6"],"names":["vash","fs","contextProperty","Symbol","helpers","context","model","VashEngine","ctx","Object","defineProperty","get","set","value","configurable","enumerable","file","data","callback","self","physicalPath","call","TypeError","readFile","err","source","fn","compile","result","e"],"mappings":";;;;;;qjBAAA;;;;;;;;;;AAQA;;IAAOA,I;;AACP;;IAAOC,E;;;;;;AACP,IAAMC,kBAAkBC,OAAO,SAAP,CAAxB;;AAEA;;;;;;;;;;AAUAH,KAAKI,OAAL,CAAaC,OAAb,GAAuB;AAAA,WAASC,MAAMJ,eAAN,CAAT;AAAA,CAAvB;;AAGA;;;;;;;;IAOMK,U;AACF,wBAAYF,OAAZ,EAAqB;AAAA;;AACjB,YAAIG,MAAMH,OAAV;AACAI,eAAOC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnCC,iBAAK,eAAY;AACb,uBAAOH,GAAP;AACH,aAHkC;AAInCI,iBAAK,aAAUC,KAAV,EAAiB;AAClBL,sBAAMK,KAAN;AACH,aANkC;AAOnCC,0BAAc,KAPqB;AAQnCC,wBAAY;AARuB,SAAvC;AAUH;;AAED;;;;;;;;;;+BAMOC,I,EAAMC,I,EAAMC,Q,EAAU;AACzBA,uBAAWA,YAAa,YAAM,CAAE,CAAhC;AACA,gBAAMC,OAAO,IAAb;AACA,gBAAIC,qBAAJ;AACA,gBAAI;AACA;AACA,oBAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC;AAC5B;AACAI,mCAAeJ,KAAKK,IAAL,EAAf;AACH,iBAHD,MAIK,IAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B;AAC/B;AACAI,mCAAeJ,IAAf;AACH,iBAHI,MAIA;AACD;AACA,2BAAOE,SAAS,IAAII,SAAJ,CAAc,uDAAd,CAAT,CAAP;AACH;AACDrB,mBAAGsB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,EAAkC,UAACI,GAAD,EAAMC,MAAN,EAAiB;AAC/C,wBAAID,GAAJ,EAAS;AACL,+BAAON,SAASM,GAAT,CAAP;AACH;AACD;;;;AAIA;AACA,wBAAI;AACA,4BAAME,KAAK1B,KAAK2B,OAAL,CAAaF,MAAb,CAAX;AACAR,+BAAOA,QAAQ,EAAf;AACAA,6BAAKf,eAAL,IAAwBiB,KAAKd,OAA7B;AACA,4BAAMuB,SAASF,GAAGT,IAAH,CAAf;AACA,+BAAOC,SAAS,IAAT,EAAeU,MAAf,CAAP;AACH,qBAND,CAOA,OAAOC,CAAP,EAAU;AACN,+BAAOX,SAASW,CAAT,CAAP;AACH;AACJ,iBAnBD;AAoBH,aAlCD,CAmCA,OAAMA,CAAN,EAAS;AACL,uBAAOX,SAASW,CAAT,CAAP;AACH;AACJ;;;;;AAEL;;;kBACetB,U","file":"vash.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport vash from 'vash';\nimport fs from 'fs';\nconst contextProperty = Symbol('context');\n\n/**\n * @name compile\n * @type {Function}\n * @memberOf vash\n *\n * @name helpers\n * @type {*}\n * @memberOf vash\n */\n\nvash.helpers.context = model => model[contextProperty];\n\n\n/**\n * @class\n * Represents a view engine that may be used in MOST Web Framework applications.\n * @param {HttpContext|*} context\n * @constructor\n * @property {HttpContext|*} context\n */\nclass VashEngine {\n    constructor(context) {\n        let ctx = context;\n        Object.defineProperty(this, 'context', {\n            get: function () {\n                return ctx;\n            },\n            set: function (value) {\n                ctx = value;\n            },\n            configurable: false,\n            enumerable: false\n        });\n    }\n\n    /**\n     * Renders the view by attaching the data specified if any\n     * @param {string|Function} file A string that represents the physical path of the view or a function which returns the view path\n     * @param {*} data Any data to be attached in the result\n     * @param {function(Error=,string=)} callback A callback function to be called when rendering operation will be completed.\n     */\n    render(file, data, callback) {\n        callback = callback || (() => {});\n        const self = this;\n        let physicalPath;\n        try {\n            //if first argument is a function\n            if (typeof file === 'function') {\n                //invoke this function and return the physical path of the target view\n                physicalPath = file.call();\n            }\n            else if (typeof file === 'string') {\n                //otherwise get physical\n                physicalPath = file;\n            }\n            else {\n                //or raise error for invalid type\n                return callback(new TypeError('The target view path has an invalid type or is empty.'));\n            }\n            fs.readFile(physicalPath, 'utf8', (err, source) => {\n                if (err) {\n                    return callback(err);\n                }\n                /**\n                 * @name compile\n                 * @memberOf vash\n                 */\n                //render data\n                try {\n                    const fn = vash.compile(source);\n                    data = data || { };\n                    data[contextProperty] = self.context;\n                    const result = fn(data);\n                    return callback(null, result);\n                }\n                catch (e) {\n                    return callback(e);\n                }\n            });\n        }\n        catch(e) {\n            return callback(e);\n        }\n    }\n}\n//noinspection JSUnusedGlobalSymbols\nexport default VashEngine;\n"]}