{"version":3,"sources":["engines/md.es6"],"names":["pagedown","fs","Extra","MarkdownEngine","context","ctx","Object","defineProperty","get","set","value","configurable","enumerable","file","data","callback","physicalPath","call","TypeError","readFile","err","converter","Converter","init","result","makeHtml"],"mappings":";;;;;;;qjBAAA;;;;;;;;;;AAQA;;IAAOA,Q;;AACP;;IAAOC,E;;AACP;;IAAQC,K,kBAAAA,K;;;;;;AAER;;;;;;;IAOqBC,c;AACjB,4BAAYC,OAAZ,EAAqB;AAAA;;AACjB,YAAIC,MAAMD,OAAV;AACAE,eAAOC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACnCC,iBAAK,eAAY;AACb,uBAAOH,GAAP;AACH,aAHkC;AAInCI,iBAAK,aAAUC,KAAV,EAAiB;AAClBL,sBAAMK,KAAN;AACH,aANkC;AAOnCC,0BAAc,KAPqB;AAQnCC,wBAAY;AARuB,SAAvC;AAUH;;AAED;;;;;;;;;;+BAMOC,I,EAAMC,I,EAAMC,Q,EAAU;AACzBA,uBAAWA,YAAa,YAAM,CAAE,CAAhC;AACA,gBAAIC,qBAAJ;AACA,gBAAI;AACA;AACA,oBAAI,OAAOH,IAAP,KAAgB,UAApB,EAAgC;AAC5B;AACAG,mCAAeH,KAAKI,IAAL,EAAf;AACH,iBAHD,MAIK,IAAI,OAAOJ,IAAP,KAAgB,QAApB,EAA8B;AAC/B;AACAG,mCAAeH,IAAf;AACH,iBAHI,MAIA;AACD;AACAE,6BAAS,IAAIG,SAAJ,CAAc,uDAAd,CAAT;AACA;AACH;AACDjB,mBAAGkB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,EAAkC,UAACI,GAAD,EAAMN,IAAN,EAAe;AAC7C,wBAAIM,GAAJ,EAAS;AACL;AACA,+BAAOL,SAASK,GAAT,CAAP;AACH;AACD,wBAAI;AACA;;;AAGA,4BAAMC,YAAY,IAAIrB,SAASsB,SAAb,EAAlB;AACApB,8BAAMqB,IAAN,CAAWF,SAAX;AACA,4BAAMG,SAASH,UAAUI,QAAV,CAAmBX,IAAnB,CAAf;AACA;AACAC,iCAAS,IAAT,EAAeS,MAAf;AACH,qBATD,CAUA,OAAOJ,GAAP,EAAY;AACR,+BAAOL,SAASK,GAAT,CAAP;AACH;AACJ,iBAlBD;AAmBH,aAlCD,CAmCA,OAAMA,GAAN,EAAW;AACP,uBAAOL,SAASK,GAAT,CAAP;AACH;AAEJ;;;;;;kBA/DgBjB,c","file":"md.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2017, THEMOST LP All rights reserved\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport pagedown from 'pagedown';\nimport fs from 'fs';\nimport {Extra} from './pagedown/pagedown-extra';\n\n/**\n * @class MarkdownEngine\n * Represents a view engine that may be used in MOST web framework applications.\n * @param {HttpContext} context\n * @constructor\n * @property {HttpContext} context\n */\nexport default class MarkdownEngine {\n    constructor(context) {\n        let ctx = context;\n        Object.defineProperty(this, 'context', {\n            get: function () {\n                return ctx;\n            },\n            set: function (value) {\n                ctx = value;\n            },\n            configurable: false,\n            enumerable: false\n        });\n    }\n\n    /**\n     * Renders the view by attaching the data specified if any\n     * @param {string|Function} file A string that represents the physical path of the view or a function which returns the view path\n     * @param {*} data Any data to be attached in the result\n     * @param {Function} callback A callback function to be called when rendering operation will be completed.\n     */\n    render(file, data, callback) {\n        callback = callback || (() => {});\n        let physicalPath;\n        try {\n            //if first argument is a function\n            if (typeof file === 'function') {\n                //invoke this function and return the physical path of the target view\n                physicalPath = file.call();\n            }\n            else if (typeof file === 'string') {\n                //otherwise get physical\n                physicalPath = file;\n            }\n            else {\n                //or raise error for invalid type\n                callback(new TypeError('The target view path has an invalid type or is empty.'));\n                return;\n            }\n            fs.readFile(physicalPath, 'utf8', (err, data) => {\n                if (err) {\n                    //throw error\n                    return callback(err);\n                }\n                try {\n                    /**\n                     * @type {Markdown.Converter|*}\n                     */\n                    const converter = new pagedown.Converter();\n                    Extra.init(converter);\n                    const result = converter.makeHtml(data);\n                    //return the converted HTML markup\n                    callback(null, result);\n                }\n                catch (err) {\n                    return callback(err);\n                }\n            });\n        }\n        catch(err) {\n            return callback(err);\n        }\n\n    }\n}\n"]}