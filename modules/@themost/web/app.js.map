{"version":3,"sources":["app.es6"],"names":["url","_","async","crypto","Args","TraceUtils","RandomUtils","HttpError","HttpNotFoundError","HttpMethodNotAllowedError","HttpNextResult","HttpResult","HttpAnyResult","AuthConsumer","BasicAuthConsumer","EncryptionStrategy","DefaultEncyptionStrategy","AuthStrategy","RestrictAccessConsumer","RestrictAccessService","HttpConsumer","HttpRouteConsumer","HttpErrorConsumer","StaticContentConsumer","MapStaticContentConsumer","HttpContext","RoutingStrategy","DefaultRoutingStrategy","RouteConsumer","LocalizationStrategy","DefaultLocalizationStrategy","CacheStrategy","DefaultCacheStrategy","DataConfigurationStrategy","Rx","path","http","https","HttpApplicationService","ViewConsumer","FormatterStrategy","DefaultFormatterStrategy","QuerystringConsumer","ConfigurationBase","ModuleLoaderStrategy","ActiveModuleLoaderStrategy","HttpConfiguration","HTTP_SERVER_DEFAULT_BIND","HTTP_SERVER_DEFAULT_PORT","startInternal","options","self","opts","bind","process","env","IP","port","PORT","assign","server_","createServer","request","response","context","createContext","Observable","bindNodeCallback","processRequestInternal","subscribe","finalize","end","err","processErrorInternal","res","error","statusCode","status","writeHead","write","message","serverProperty","listen","log","callback","consumers","getApplication","consumersProperty","eachSeries","consumer","cb","callable","apply","result","finalRes","isNil","otherWiseConsumer","otherwiseConsumerProperty","isFunction","ReferenceError","execute","intermediateRes","Error","errorConsumers","errorConsumersProperty","length","call","createRequestInternal","opt","IncomingMessage","method","httpVersion","headers","host","accept","connection","cookie","cookies","session","params","query","form","body","files","createResponseInternal","req","ServerResponse","currentProperty","Symbol","configProperty","servicesProperty","executionPathProperty","configPathProperty","HttpApplication","executionPath","cwd","resolve","config","join","useStrategy","NODE_ENV","arg","check","isString","getExecutionPath","getConfiguration","getStrategy","extension","find","getSourceAt","x","push","consumerConstructor","findIndex","uri","serviceCtor","notFunction","name","strategyCtor","hasOwnProperty","any","useService","rootDir","whenDir","hasService","hasConsumer","fn","account","getService","getUnattendedExecutionAccount","isEmpty","user","authenticationType","data","require","parse","httpModule","protocol","setEncoding","on","chunk","encoding","JSON","stringify","toString","requestOptions","indexOf","executeExternalRequest","setHeader","requestContext","_header","arr","split","i","header","k","substr","isArray","output","outputEncodings","runtimeParser","next","isObject","finished"],"mappings":"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","file":"app.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport url from 'url';\nimport {_} from 'lodash';\nimport async from 'async';\nimport crypto from 'crypto';\nimport {Args, TraceUtils, RandomUtils} from '@themost/common/utils';\nimport {HttpError, HttpNotFoundError, HttpMethodNotAllowedError} from '@themost/common/errors';\nimport {HttpNextResult,HttpResult,HttpAnyResult} from './results';\nimport {AuthConsumer, BasicAuthConsumer, EncryptionStrategy, DefaultEncyptionStrategy, AuthStrategy} from './consumers/auth';\nimport {RestrictAccessConsumer,RestrictAccessService} from './consumers/restrict_access';\nimport {HttpConsumer,HttpRouteConsumer,HttpErrorConsumer} from './consumers';\nimport {StaticContentConsumer, MapStaticContentConsumer} from './consumers/static';\nimport {HttpContext} from './context';\nimport {RoutingStrategy,DefaultRoutingStrategy,RouteConsumer} from './consumers/route';\nimport {LocalizationStrategy,DefaultLocalizationStrategy} from './localization';\nimport {CacheStrategy,DefaultCacheStrategy} from './cache';\nimport {DataConfigurationStrategy} from '@themost/data/config';\nimport Rx from 'rxjs';\nimport path from 'path';\nimport http from 'http';\nimport https from 'https';\nimport {HttpApplicationService} from \"./interfaces\";\nimport {ViewConsumer} from \"./consumers/view\";\nimport {FormatterStrategy, DefaultFormatterStrategy} from \"./formatters\";\nimport {QuerystringConsumer} from \"./consumers/querystring\";\nimport {ConfigurationBase, ModuleLoaderStrategy, ActiveModuleLoaderStrategy} from \"@themost/common/config\";\nimport {HttpConfiguration} from \"./config\";\n\nconst HTTP_SERVER_DEFAULT_BIND = '127.0.0.1';\nconst HTTP_SERVER_DEFAULT_PORT = 3000;\n\n/**\n * Starts current application\n * @private\n * @static\n * @param {ApplicationOptions|*} options\n */\nfunction startInternal(options) {\n    /**\n     * @type {HttpApplication|*}\n     */\n    const self = this;\n    try {\n        /**\n         * @memberof process.env\n         * @property {number} PORT\n         * @property {string} IP\n         * @property {string} NODE_ENV\n         */\n        const opts = {\n            bind:(process.env.IP || HTTP_SERVER_DEFAULT_BIND),\n            port:(process.env.PORT ? process.env.PORT: HTTP_SERVER_DEFAULT_PORT)\n        };\n        //extend options\n        _.assign(opts, options);\n\n        const server_ = http.createServer(function (request, response) {\n            const context = self.createContext(request, response);\n            //begin request processing\n            Rx.Observable.bindNodeCallback(processRequestInternal.bind(self))(context)\n                .subscribe(()=> {\n                    context.finalize(function() {\n                        if (context.response) { context.response.end(); }\n                    });\n            }, (err) => {\n                //process error\n                Rx.Observable.bindNodeCallback(processErrorInternal)(context, err)\n                    .subscribe((res) => {\n                        context.finalize(function() {\n                            if (context.response) { context.response.end(); }\n                        });\n                    }, (err) => {\n                        //an error occurred while handling request error\n                        TraceUtils.error(err);\n                        if (context && context.response) {\n                            if (err instanceof HttpError) {\n                                const statusCode = err.status || 500;\n                                //send a text/plain error (and safely end response)\n                                context.response.writeHead(statusCode, {\"Content-Type\": \"text/plain\"});\n                                context.response.write(statusCode + ' ' + err.message + '\\n');\n                            }\n                            else {\n                                //send a text/plain error (and safely end response)\n                                context.response.writeHead(500, {\"Content-Type\": \"text/plain\"});\n                                context.response.write('500 Internal Server Error\\n');\n                            }\n\n                            if (typeof context.finalize === 'function') {\n                                context.finalize(function() {\n                                    if (context.response) { context.response.end(); }\n                                });\n                            }\n                            else {\n                                if (context.response) { context.response.end(); }\n                            }\n\n                        }\n                    });\n            });\n        });\n        self[serverProperty] = server_;\n        //start listening\n        server_.listen(opts.port, opts.bind);\n        TraceUtils.log('Web application is running at http://%s:%s/', opts.bind, opts.port);\n    } catch (err) {\n        TraceUtils.log(err);\n    }\n}\n\n/**\n * Processes an HTTP request under current application\n * @private\n * @static\n * @param {HttpContext} context\n * @param {Function} callback\n */\nfunction processRequestInternal(context, callback) {\n    /**\n     * @type {HttpApplication|*}\n     */\n    const self = this,\n        /**\n         * @type {Array}\n         */\n        consumers = context.getApplication()[consumersProperty];\n\n    return async.eachSeries(consumers,\n        /**\n         * @param {HttpConsumer} consumer\n         * @param {Function} cb\n         */\n        function(consumer, cb) {\n        consumer.callable.apply(context).subscribe((result)=> {\n            //if result is an instance of HttpNextResult\n            if (result instanceof HttpNextResult) {\n                //continue series execution (call series callback with no error)\n                return cb();\n            }\n            else if (result instanceof HttpResult) {\n                //continue series execution (call series callback with no error)\n                return cb(result);\n            }\n            //else break series execution and return result\n            return cb(new HttpAnyResult(result));\n        }, err=> {\n            return cb(err);\n        });\n    }, function(finalRes) {\n            if (_.isNil(finalRes)) {\n                //get otherwise consumer\n                const otherWiseConsumer = self[otherwiseConsumerProperty];\n                if (otherWiseConsumer instanceof HttpConsumer) {\n                    if (!_.isFunction(otherWiseConsumer.callable)) {\n                        return callback(new ReferenceError('HTTP consumer callable must be a function.'));\n                    }\n                    return otherWiseConsumer.callable.apply(context).subscribe(result=> {\n                        if (result instanceof HttpNextResult) {\n                            return callback(new HttpNotFoundError());\n                        }\n                        if (result instanceof HttpResult) {\n                            if (typeof finalRes.execute === 'function') {\n                                //execute result\n                                return finalRes.execute(context).subscribe(() => {\n                                    return callback();\n                                }, (err) => {\n                                    return callback(err);\n                                });\n                            }\n                            return callback(null, result);\n                        }\n                        else {\n                            //create an instance of HttpAnyResult class\n                            const intermediateRes = new HttpAnyResult(result);\n                            return intermediateRes.execute(context).subscribe(() => {\n                                callback();\n                            }, (err) => {\n                                return callback(err);\n                            });\n                        }\n                    }, err => {\n                        return callback(err);\n                    });\n                }\n                else {\n                    return callback(new HttpNotFoundError());\n                }\n            }\n            ///////////////////////\n            //Final Execution\n            ///////////////////////\n            //handle error\n            if (finalRes instanceof Error) {\n                return callback(finalRes);\n            }\n            //handle HttpAnyResult\n            else if (finalRes instanceof HttpResult) {\n                try {\n                    if (typeof finalRes.execute === 'function') {\n                        //execute result\n                        return finalRes.execute(context).subscribe(() => {\n                            return callback();\n                        }, (err) => {\n                            return callback(err);\n                        });\n                    }\n                }\n                catch(err) {\n                    return callback(err);\n                }\n\n                return callback(null, finalRes);\n            }\n            //throw exception\n            return callback(new HttpMethodNotAllowedError());\n\n    });\n}\n\n\n/**\n * Processes HTTP errors under current application\n * @param {HttpContext} context\n * @param {Error|*} error\n * @param {Function} callback\n */\nfunction processErrorInternal(context, error, callback) {\n    /**\n     * @type {HttpApplication|*}\n     */\n    const self = this,\n        /**\n         * @type {Array}\n         */\n        errorConsumers = context.getApplication()[errorConsumersProperty];\n        if (errorConsumers.length===0) {\n            return callback(error);\n        }\n    return async.eachSeries(errorConsumers, function(consumer, cb) {\n        consumer.callable.call(context, error).subscribe(result=> {\n            if (result instanceof HttpNextResult) {\n                return cb();\n            }\n            return cb(result);\n        }, err=> {\n            return cb(err);\n        });\n    }, function(err) {\n        return callback(err);\n    });\n}\n\n/**\n * Creates a mock-up server request\n * @private\n * @param {*} options\n */\nfunction createRequestInternal(options) {\n    const opt = options ? options : {};\n    const request = new http.IncomingMessage();\n    request.method = (opt.method) ? opt.method : 'GET';\n    request.url = (opt.url) ? opt.url : '/';\n    request.httpVersion = '1.1';\n    request.headers = (opt.headers) ? opt.headers : {\n            host: 'localhost',\n            'user-agent': 'Mozilla/5.0 (X11; Linux i686; rv:10.0) Gecko/20100101 Firefox/22.0',\n            accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'accept-language': 'en-US,en;q=0.5',\n            'accept-encoding': 'gzip, deflate',\n            connection: 'keep-alive',\n            'cache-control': 'max-age=0' };\n    if (opt.cookie)\n        request.headers.cookie = opt.cookie;\n    request.cookies = (opt.cookies) ? opt.cookies : {};\n    request.session = (opt.session) ? opt.session : {};\n    request.params = (opt.params) ? opt.params : {};\n    request.query = (opt.query) ? opt.query : {};\n    request.form = (opt.form) ? opt.form : {};\n    request.body = (opt.body) ? opt.body : {};\n    request.files = (opt.files) ? opt.files : {};\n    return request;\n}\n\n/**\n * Creates a mock-up server response\n * @param {ClientRequest} req\n * @returns {ServerResponse|*}\n * @private\n */\nfunction createResponseInternal(req) {\n    return new http.ServerResponse(req);\n}\n\nconst currentProperty = Symbol('current');\nconst consumersProperty = Symbol('consumers');\nconst errorConsumersProperty = Symbol('errorConsumers');\nconst otherwiseConsumerProperty = Symbol('otherwise');\nconst configProperty = Symbol('config');\nconst serverProperty = Symbol('server');\nconst servicesProperty = Symbol('services');\nconst executionPathProperty = Symbol('executionPath');\nconst configPathProperty = Symbol('configPath');\n\n/**\n * @classdesc Represents an HTTP server application\n * @class\n */\nexport class HttpApplication {\n    /**\n     * @param {string=} executionPath\n     * @constructor\n     */\n    constructor(executionPath) {\n        this[consumersProperty] = [];\n        this[errorConsumersProperty] = [];\n        this[servicesProperty] = {};\n        this[executionPathProperty] = _.isNil(executionPath) ? process.cwd() : path.resolve(executionPath);\n        const config = new HttpConfiguration(path.join(this[executionPathProperty],'config'));\n        config.useStrategy(DataConfigurationStrategy, ()=> {\n            return new DataConfigurationStrategy(config);\n        });\n        if (process.env.NODE_ENV==='development') {\n            //load active module watcher strategy\n            config.useStrategy(ModuleLoaderStrategy, ActiveModuleLoaderStrategy);\n        }\n        //change module loader strategy\n        this[configProperty] = config;\n    }\n    /**\n     * @param {string=} executionPath\n     * @returns HttpApplication\n     */\n    static create(executionPath) {\n        return new HttpApplication(executionPath);\n    }\n\n    /**\n     * Gets the execution path of the current HTTP application\n     * @returns {string}\n     */\n    getExecutionPath() {\n        return this[executionPathProperty];\n    }\n\n    /**\n     * Resolves the given path\n     * @param {string} arg\n     */\n    mapExecutionPath(arg) {\n        Args.check(_.isString(arg),'Path must be a string');\n        return path.resolve(this.getExecutionPath(), arg);\n    }\n\n    /**\n     * Gets the configuration path of the current HTTP application\n     * @returns {string}\n     */\n    getConfigurationPath() {\n        return this[configPathProperty];\n    }\n\n    /**\n     * @returns {HttpConfiguration}\n     */\n    getConfiguration() {\n        return this[configProperty];\n    }\n\n    /**\n     *\n     * @returns {HttpConfiguration}\n     */\n    getApplicationConfiguration() {\n        return this.getConfiguration().getStrategy(HttpConfiguration);\n    }\n\n    getMimeType(extension) {\n        return _.find(this.getConfiguration().getSourceAt('mimes'),function(x) {\n            return (x.extension===extension) || (x.extension==='.'+extension);\n        });\n    }\n\n    /**\n     * @returns {Server|*}\n     */\n    getServer() {\n        return this[serverProperty];\n    }\n\n    /**\n     * @param {Function|HttpConsumer} consumer\n     * @param {*=} params\n     * @returns HttpApplication\n     */\n    any(consumer, params) {\n        if (consumer instanceof HttpConsumer) {\n            this[consumersProperty].push(consumer);\n        }\n        else {\n            this[consumersProperty].push(new HttpConsumer(consumer, params));\n        }\n        return this;\n    }\n\n    /**\n     * @param {Function} consumerConstructor\n     * @returns {boolean}\n     */\n    hasConsumer(consumerConstructor) {\n        if (typeof consumerConstructor !== 'function') {\n            return false;\n        }\n       return _.findIndex(this[consumersProperty],(x)=> {\n           return x instanceof consumerConstructor;\n       })>=0;\n    }\n\n    /**\n     * @param {Function|HttpErrorConsumer} consumer\n     * @param {*=} params\n     * @returns HttpApplication\n     */\n    error(consumer, params) {\n        if (consumer instanceof HttpErrorConsumer) {\n            this[errorConsumersProperty].push(consumer);\n        }\n        else {\n            this[errorConsumersProperty].push(new HttpErrorConsumer(consumer, params));\n        }\n        return this;\n    }\n\n    /**\n     * @param {string} uri\n     * @param {Function|HttpConsumer} consumer\n     * @param {*=} params\n     * @returns HttpApplication\n     */\n    when(uri, consumer, params) {\n        if (consumer instanceof HttpRouteConsumer) {\n            this[consumersProperty].push(consumer);\n        }\n        else {\n            this[consumersProperty].push(new HttpRouteConsumer(uri,consumer, params));\n        }\n        return this;\n    }\n\n    /**\n     * @param {Function|HttpConsumer} consumer\n     * @param {*=} params\n     * @returns HttpApplication\n     */\n    otherwise(consumer, params) {\n        if ((consumer instanceof HttpConsumer) || (consumer instanceof HttpErrorConsumer)) {\n            this[otherwiseConsumerProperty] = consumer;\n        }\n        else {\n            this[otherwiseConsumerProperty] = new HttpConsumer(consumer, params);\n        }\n        return this;\n    }\n\n    /**\n     * Register a service type in application services\n     * @param {Function} serviceCtor\n     * @returns HttpApplication\n     */\n    useService(serviceCtor) {\n        Args.notFunction(serviceCtor,\"Service constructor\");\n        this[servicesProperty][`${serviceCtor.name}`] = new serviceCtor(this);\n        return this;\n    }\n\n    /**\n     * Register a service type in application services\n     * @param {Function} serviceCtor\n     * @param {Function} strategyCtor\n     * @returns HttpApplication\n     */\n    useStrategy(serviceCtor, strategyCtor) {\n        Args.notFunction(strategyCtor,\"Service constructor\");\n        Args.notFunction(strategyCtor,\"Strategy constructor\");\n        this[servicesProperty][`${serviceCtor.name}`] = new strategyCtor(this);\n        return this;\n    }\n\n    /**\n     * Register a service type in application services\n     * @param {Function} serviceCtor\n     */\n    getService(serviceCtor) {\n        Args.notFunction(serviceCtor,\"Service constructor\");\n        return this[servicesProperty][`${serviceCtor.name}`];\n    }\n\n    /**\n     * Checks if a service of the given type exists in application services\n     * @param {Function} serviceCtor\n     * @returns boolean\n     */\n    hasService(serviceCtor) {\n        return this[servicesProperty].hasOwnProperty(`${serviceCtor.name}`);\n    }\n\n\n    /**\n     * Enables application default routing strategy\n     * @returns {HttpApplication}\n     */\n    useRoutingStrategy() {\n        return this.useStrategy(RoutingStrategy, DefaultRoutingStrategy);\n    }\n\n    /**\n     * Enables application default routing strategy\n     * @returns {HttpApplication}\n     */\n    useFormatterStrategy() {\n        return this.useStrategy(FormatterStrategy, DefaultFormatterStrategy);\n    }\n\n    /**\n     * Enables application default routing strategy\n     * @returns {HttpApplication}\n     */\n    useCacheStrategy() {\n        return this.useStrategy(CacheStrategy, DefaultCacheStrategy);\n    }\n\n    /**\n     * Enables application default routing strategy\n     * @returns {HttpApplication}\n     */\n    useEncryptionStrategy() {\n        return this.useStrategy(EncryptionStrategy, DefaultEncyptionStrategy);\n    }\n\n    /**\n     * Enables application default localization strategy\n     * @returns {HttpApplication}\n     */\n    useLocalization() {\n        return this.useStrategy(LocalizationStrategy, DefaultLocalizationStrategy);\n    }\n\n    /**\n     * Enables basic authentication\n     * @returns {HttpApplication}\n     */\n    useBasicAuthentication() {\n        return this.any(new BasicAuthConsumer());\n    }\n\n    /**\n     * Enables application authentication\n     * @returns {HttpApplication}\n     */\n    useRestrictAccess() {\n        this.useService(RestrictAccessService);\n        return this.any(new RestrictAccessConsumer());\n    }\n\n    /**\n     * Enables application authentication based on the registered authentication strategy\n     * @returns {HttpApplication}\n     */\n    useAuthentication() {\n        this.useStrategy(EncryptionStrategy, DefaultEncyptionStrategy);\n        return this.any(new AuthConsumer());\n    }\n\n    /**\n     * Enables static content requests\n     * @param {string=} rootDir\n     * @returns {HttpApplication}\n     */\n    useStaticContent(rootDir) {\n        return this.any(new StaticContentConsumer(rootDir));\n    }\n\n    /**\n     * Enables static content requests\n     * @returns {HttpApplication}\n     */\n    useQuerystring() {\n        return this.any(new QuerystringConsumer());\n    }\n\n    /**\n     * Enables static content requests\n     * @param {string=} whenDir\n     * @param {string=} rootDir\n     * @returns {HttpApplication}\n     */\n    mapStaticContent(whenDir, rootDir) {\n        return this.any(new MapStaticContentConsumer(whenDir, rootDir));\n    }\n\n    /**\n     * Enables static content requests\n     * @returns {HttpApplication}\n     */\n    useViewContent() {\n        //check if application does not have a service of type RoutingStrategy\n        if (!this.hasService(RoutingStrategy))  {\n            this.useStrategy(RoutingStrategy, DefaultRoutingStrategy);\n        }\n        //check if application does not have a consumer of type RouteConsumer\n        if (!this.hasConsumer(RouteConsumer))\n            //and add it\n            this.any(new RouteConsumer());\n        //check if application does not have a consumer of type ViewConsumer\n        if (!this.hasConsumer(ViewConsumer))\n            //and add it\n            return this.any(new ViewConsumer());\n    }\n\n    /**\n     * Starts the current HTTP application.\n     * @param {HttpApplicationOptions=} options\n     * @return {HttpApplication}\n     */\n    start(options) {\n        startInternal.bind(this)(options);\n        return this;\n    }\n\n    /**\n     * Creates an instance of HttpContext class.\n     * @param {ClientRequest} request\n     * @param {ServerResponse} response\n     * @returns {HttpContext}\n     */\n    createContext(request, response) {\n       return new HttpContext(this, request, response);\n    }\n\n    /**\n     * @returns {HttpApplication}\n     */\n    static getCurrent() {\n        if (_.isNil(HttpApplication[currentProperty])) {\n            HttpApplication[currentProperty] = new HttpApplication();\n        }\n        return HttpApplication[currentProperty];\n    }\n\n    /**\n     * Creates a new context and executes the given function\n     * @param {Function} fn - A function to execute. The first argument is the current context\n     * @returns {Observable}\n     */\n    execute(fn) {\n        const self = this;\n        return Rx.Observable.bindNodeCallback(function(callback) {\n            //create context\n            const request = createRequestInternal.call(self),\n                response = createResponseInternal.call(self,request);\n            let context = self.createContext(request, response);\n            fn(context).subscribe(()=>{\n                return callback();\n            }, (err) => {\n                return callback(err);\n            });\n        });\n    }\n\n    /**\n     * Creates a new context and executes the given function in unattended mode\n     * @param {Function} fn\n     * @returns {Observable}\n     */\n    executeUnattended(fn) {\n        const self = this;\n        return Rx.Observable.bindNodeCallback(function(callback) {\n            //create context\n            const request = createRequestInternal.call(self),\n                response = createResponseInternal.call(self,request);\n            let context = self.createContext(request, response);\n            //get unattended execution account\n            if (this.hasService(AuthStrategy)) {\n                const account = this.getService(AuthStrategy).getUnattendedExecutionAccount();\n                if (_.isEmpty(account)) {\n                    context.user = { name: account, authenticationType: 'Basic'};\n                }\n            }\n            fn(context).subscribe(()=>{\n                return callback();\n            }, (err) => {\n                return callback(err);\n            });\n        });\n    }\n\n    /**\n     * Executes and external HTTP request\n     * @param {string|*} options\n     * @param {*} data\n     * @returns {Observable}\n     */\n    executeExternalRequest(options, data) {\n\n        return Rx.Observable.bindNodeCallback(function(callback) {\n            //make request\n            const https = require('https'),\n                opts = (typeof options==='string') ? url.parse(options) : options,\n                httpModule = (opts.protocol === 'https:') ? https : http;\n            const req = httpModule.request(opts, (res) => {\n                res.setEncoding('utf8');\n                let data = '';\n                res.on('data', function (chunk) {\n                    data += chunk;\n                });\n                res.on('end', () => {\n                    return callback(null,\n                        { statusCode: res.statusCode,\n                            headers: res.headers,\n                            body:data,\n                            encoding:'utf8'\n                        });\n                });\n            });\n            req.on('error', (err)=> {\n                //return error\n                return callback(err);\n            });\n            if(data)\n            {\n                if (typeof data ===\"object\" )\n                    req.write(JSON.stringify(data));\n                else\n                    req.write(data.toString());\n            }\n            req.end();\n        })();\n\n\n    }\n\n    /**\n     * Executes an external or internal HTTP request\n     * @param {*|string} options\n     * @returns {Observable}\n     */\n    executeRequest(options) {\n        const self = this;\n        return Rx.Observable.bindNodeCallback(function(callback) {\n            const requestOptions = { };\n            if (typeof options === 'string') {\n                _.assign(requestOptions, { url:options });\n            }\n            else {\n                _.assign(requestOptions, options);\n            }\n            if (_.isNil(requestOptions.url)) {\n                return callback(new Error('Internal request url cannot be empty at this context.'));\n            }\n            if (requestOptions.url.indexOf('/')!==0)\n            {\n                _.assign(requestOptions, url.parse(requestOptions.url));\n                //execute external request\n                return this.executeExternalRequest(requestOptions,null).subscribe((res)=> {\n                    return callback(null, res);\n                }, (err)=> {\n                    return callback(err);\n                });\n            }\n            else {\n                //create request and response\n                const request = createRequestInternal.call(this,requestOptions),\n                    response = createResponseInternal.call(this,request);\n                //set content length header to -1 (for backward compatibility issues)\n                response.setHeader('Content-Length',-1);\n                //create context\n                const requestContext = this.createContext(request, response);\n                //and finally process context\n                return processRequestInternal.call(self, requestContext, function(err) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    else {\n                        try {\n                            //get statusCode\n                            const statusCode = response.statusCode;\n                            //get headers\n                            const headers = {};\n                            if (response._header) {\n                                const arr = response._header.split('\\r\\n');\n                                for (let i = 0; i < arr.length; i++) {\n                                    const header = arr[i];\n                                    if (header) {\n                                        const k = header.indexOf(':');\n                                        if (k>0) {\n                                            headers[header.substr(0,k)] = header.substr(k+1);\n                                        }\n                                    }\n                                }\n                            }\n                            //get body\n                            let body = null;\n                            let encoding = null;\n                            if (_.isArray(response.output)) {\n                                if (response.output.length>0) {\n                                    body = response.output[0].substr(response._header.length);\n                                    encoding = response.outputEncodings[0];\n                                }\n                            }\n                            //build result (something like ServerResponse)\n                            const result = {\n                                statusCode: statusCode,\n                                headers: headers,\n                                body:body,\n                                encoding:encoding\n                            };\n                            return callback(null, result);\n                        }\n                        catch (err) {\n                            return callback(err);\n                        }\n                    }\n                });\n            }\n        }, this)();\n\n\n    }\n\n    /**\n     * Returns an express framework middleware.\n     * This method may used when @themost application is going to be used alongside with express\n     * @returns {Function}\n     * @example\n     *\n     const theApp = new HttpApplication(\"./test/express/\");\n     //init application\n     theApp.useQuerystring()\n         .useFormatterStrategy()\n         .useAuthentication()\n         .useViewContent();\n     const app = express();\n     //register application as middleware\n     app.use(theApp.runtime());\n     //start server\n     app.listen(process.env.PORT || 3000);\n     */\n    runtime() {\n        const self = this;\n        return function runtimeParser(req, res, next) {\n            //create context\n            const context = self.createContext(req, res);\n            context.request.on('close', () => {\n                //client was disconnected abnormally\n                if (_.isObject(context)) {\n                    context.finalize(function () {\n                        if (context.response) {\n                            //if response is alive\n                            if (context.response.finished === false)\n                            //end response\n                                context.response.end();\n                        }\n                    });\n                }\n            });\n            processRequestInternal.bind(self)(context, (err)=> {\n                return context.finalize(()=> {\n                    //if error is an instance of HttpNotFoundError continue execution\n                    if (err instanceof HttpNotFoundError) {\n                        return next();\n                    }\n                    //if error is an instance of HttpError and status is 404 NOT FOUND continue execution\n                    else if ((err instanceof HttpError) && err.status === 404) {\n                        return next();\n                    }\n                    //otherwise continue execution with error\n                    else if (err) {\n                        return next(err);\n                    }\n                    if (context.response) {\n                        context.response.end();\n                    }\n                });\n            });\n\n        };\n    }\n\n}"]}