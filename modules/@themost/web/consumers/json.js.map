{"version":3,"sources":["json.es6"],"names":["HttpConsumer","Rx","bodyParser","HttpNextResult","jsonParser","JsonHandler","context","callback","request","response","headers","contentType","test","conf","getApplication","getConfiguration","settings","json","limit","err","body","Buffer","params","data","JSON","parse","JsonContentConsumer","handler","Observable","bindNodeCallback","beginRequest","flatMap","create","toObservable"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;;;AACA;;AACA;;IAAQA,Y,cAAAA,Y;;AACR;;IAAOC,E;;AACP;;IAAOC,U;;AACP;;IAAQC,c,YAAAA,c;;;;;;;;;;AAER,IAAIC,mBAAJ;AACA;;;;;;IAKMC,W;;;;;;;;AACF;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5B,gBAAMC,UAAUF,QAAQE,OAAxB;AAAA,gBACIC,WAAWH,QAAQG,QADvB;AAEAD,oBAAQE,OAAR,GAAkBF,QAAQE,OAAR,IAAmB,EAArC;AACA,gBAAMC,cAAcH,QAAQE,OAAR,CAAgB,cAAhB,CAApB;AACA,gBAAI,sBAAsBE,IAAtB,CAA2BD,WAA3B,CAAJ,EAA6C;AACzC;AACA;AACA,oBAAI,OAAOP,UAAP,KAAsB,WAA1B,EAAuC;AACnC;AACA,wBAAIS,OAAOP,QAAQQ,cAAR,GAAyBC,gBAAzB,EAAX;AACAF,yBAAKG,QAAL,GAAgBH,KAAKG,QAAL,IAAiB,EAAjC;AACA;AACAH,yBAAKG,QAAL,CAAcC,IAAd,GAAqBJ,KAAKG,QAAL,CAAcC,IAAd,IAAsB,EAAEC,OAAM,MAAR,EAA3C;AACA;AACAd,iCAAaF,WAAWe,IAAX,CAAgBJ,KAAKG,QAAL,CAAcC,IAA9B,CAAb;AACH;AACD;AACAb,2BAAWI,OAAX,EAAoBC,QAApB,EAA+B,UAASU,GAAT,EAAc;AACzC,wBAAIA,GAAJ,EAAS;AACLZ,iCAASY,GAAT;AACH,qBAFD,MAGK;AACD,4BAAI;AACA,gCAAIX,QAAQY,IAAZ,EAAkB;AACd;AACA,oCAAIZ,QAAQY,IAAR,YAAwBC,MAA5B,EAAoC;AAChCf,4CAAQgB,MAAR,CAAeC,IAAf,GAAsBC,KAAKC,KAAL,CAAWjB,QAAQY,IAAnB,CAAtB;AACH,iCAFD,MAGK,IAAI,QAAOZ,QAAQY,IAAf,MAAwB,QAA5B,EAAsC;AACvCd,4CAAQgB,MAAR,CAAeC,IAAf,GAAsBf,QAAQY,IAA9B;AACH;AACDb;AACH;AACJ,yBAXD,CAYA,OAAMY,GAAN,EAAW;AACPZ,qCAASY,GAAT;AACH;AAEJ;AACJ,iBAtBD;AAuBH,aApCD,MAqCK;AACDZ;AACH;AACJ;;;;;;AAIL;;;;;IAGamB,mB,WAAAA,mB;;;AACT,mCAAc;AAAA;;AAAA,yIACJ,YAAW;AACb;;;AAGA,gBAAMpB,UAAU,IAAhB;AACA,gBAAI;AACA,oBAAIqB,UAAU,IAAItB,WAAJ,EAAd;AACA,uBAAOJ,GAAG2B,UAAH,CAAcC,gBAAd,CAA+BF,QAAQG,YAAvC,EAAqDxB,OAArD,EACFyB,OADE,CACM,YAAK;AACd,2BAAO5B,eAAe6B,MAAf,GAAwBC,YAAxB,EAAP;AACH,iBAHM,CAAP;AAIH,aAND,CAOA,OAAMd,GAAN,EAAW;AACP,uBAAOlB,GAAG2B,UAAH,CAAc,OAAd,EAAuBT,GAAvB,CAAP;AACH;AACJ,SAhBS;AAiBb;;;EAlBoCnB,Y","file":"json.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {HttpConsumer} from '../consumers';\nimport Rx from 'rxjs';\nimport bodyParser from 'body-parser';\nimport {HttpNextResult} from '../results';\n\nlet jsonParser;\n/**\n * @classdesc Default JSON content handler (as it had been implemented for version 1.x of MOST Web Framework)\n * @class\n * @private\n */\nclass JsonHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        const request = context.request,\n            response = context.response;\n        request.headers = request.headers || {};\n        const contentType = request.headers['content-type'];\n        if (/^application\\/json/i.test(contentType)) {\n            //change: 15-Feb 2016\n            //description get json body limit from application configuration (settings#json.limit)\n            if (typeof jsonParser === 'undefined') {\n                //ensure settings\n                let conf = context.getApplication().getConfiguration();\n                conf.settings = conf.settings || { };\n                //ensure json settings (the default limit is 100kb)\n                conf.settings.json = conf.settings.json || { limit:102400 };\n                //get json parser\n                jsonParser = bodyParser.json(conf.settings.json);\n            }\n            //parse request data\n            jsonParser(request, response , function(err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    try {\n                        if (request.body) {\n                            //try parse\n                            if (request.body instanceof Buffer) {\n                                context.params.data = JSON.parse(request.body);\n                            }\n                            else if (typeof request.body === 'object') {\n                                context.params.data = request.body;\n                            }\n                            callback();\n                        }\n                    }\n                    catch(err) {\n                        callback(err);\n                    }\n\n                }\n            });\n        }\n        else {\n            callback();\n        }\n    }\n}\n\n\n/**\n * @class\n */\nexport class JsonContentConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                let handler = new JsonHandler();\n                return Rx.Observable.bindNodeCallback(handler.beginRequest)(context)\n                    .flatMap(()=> {\n                    return HttpNextResult.create().toObservable();\n                });\n            }\n            catch(err) {\n                return Rx.Observable['throw'](err);\n            }\n        });\n    }\n}"]}