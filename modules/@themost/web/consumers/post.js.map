{"version":3,"sources":["post.es6"],"names":["formidable","_","LangUtils","TraceUtils","HttpConsumer","Q","HttpNextResult","PostHandler","context","callback","request","socket","headers","test","f","IncomingForm","parse","err","form","files","assign","params","parseForm","e","log","Error","PostContentConsumer","handler","nfbind","beginRequest","then","create","toPromise","reject"],"mappings":";;;;;;;qjBAAA;;;;;;;;;;;AASA;;AACA;;IAAOA,U;;AACP;;IAAOC,C;;AACP;;IAAQC,S,UAAAA,S;IAAUC,U,UAAAA,U;;AAClB;;IAAQC,Y,cAAAA,Y;;AACR;;IAAOC,C;;AACP;;IAAQC,c,YAAAA,c;;;;;;;;;;AAER;;;;IAIMC,W;;;;;;;;AACF;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5B,gBAAI;AACA,oBAAMC,UAAUF,QAAQE,OAAxB;AACA;AACA,oBAAI,OAAOA,QAAQC,MAAf,KAA0B,WAA9B,EAA2C;AACvC,2BAAOF,UAAP;AACH,iBAFD,MAGK;AACDC,4BAAQE,OAAR,GAAkBF,QAAQE,OAAR,IAAmB,EAArC;AACA,wBAAI,uCAAuCC,IAAvC,CAA4CH,QAAQE,OAAR,CAAgB,cAAhB,CAA5C,CAAJ,EAAkF;AAC9E;AACA,4BAAME,IAAI,IAAId,WAAWe,YAAf,EAAV;AACAD,0BAAEE,KAAF,CAAQN,OAAR,EAAiB,UAAUO,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACzC,gCAAIF,GAAJ,EAAS;AACL,uCAAOR,SAASQ,GAAT,CAAP;AACH;AACD,gCAAI;AACA;AACA,oCAAIC,IAAJ,EAAU;AACNjB,sCAAEmB,MAAF,CAASZ,QAAQa,MAAjB,EAAyBnB,UAAUoB,SAAV,CAAoBJ,IAApB,CAAzB;AACH;AACD;AACA,oCAAIC,KAAJ,EACIlB,EAAEmB,MAAF,CAASZ,QAAQa,MAAjB,EAAyBF,KAAzB;AACJ,uCAAOV,UAAP;AACH,6BATD,CAUA,OAAOQ,GAAP,EAAY;AACR,uCAAOR,SAASQ,GAAT,CAAP;AACH;AACJ,yBAjBD;AAkBH,qBArBD,MAsBK;AACD,+BAAOR,UAAP;AACH;AAEJ;AACJ,aAnCD,CAoCA,OAAQc,CAAR,EAAW;AACPpB,2BAAWqB,GAAX,CAAeD,CAAf;AACA,uBAAOd,SAAS,IAAIgB,KAAJ,CAAU,8DAAV,CAAT,CAAP;AACH;AAEJ;;;;;;AAGL;;;;;IAGaC,mB,WAAAA,mB;;;AACT,mCAAc;AAAA;;AAAA,yIACJ,YAAW;AACb;;;AAGA,gBAAMlB,UAAU,IAAhB;AACA,gBAAI;AACA,oBAAMmB,UAAU,IAAIpB,WAAJ,EAAhB;AACA,uBAAOF,EAAEuB,MAAF,CAASD,QAAQE,YAAjB,EAA+BrB,OAA/B,EACFsB,IADE,CACG,YAAK;AACP,2BAAOxB,eAAeyB,MAAf,GAAwBC,SAAxB,EAAP;AACH,iBAHE,CAAP;AAIH,aAND,CAOA,OAAMf,GAAN,EAAW;AACP,uBAAOZ,EAAE4B,MAAF,CAAShB,GAAT,CAAP;AACH;AACJ,SAhBS;AAiBb;;;EAlBoCb,Y","file":"post.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport formidable from 'formidable';\nimport _ from 'lodash';\nimport {LangUtils,TraceUtils} from '@themost/common/utils';\nimport {HttpConsumer} from '../consumers';\nimport Q from 'q';\nimport {HttpNextResult} from '../results';\n\n/**\n * @classdesc Default post content handler (as it has been implemented for version 1.x of MOST Web Framework)\n * @class\n */\nclass PostHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        try {\n            const request = context.request;\n            //extend params object (parse form data)\n            if (typeof request.socket === 'undefined') {\n                return callback();\n            }\n            else {\n                request.headers = request.headers || {};\n                if (/^application\\/x-www-form-urlencoded/i.test(request.headers['content-type'])) {\n                    //use formidable to parse request data\n                    const f = new formidable.IncomingForm();\n                    f.parse(request, function (err, form, files) {\n                        if (err) {\n                            return callback(err);\n                        }\n                        try {\n                            //add form\n                            if (form) {\n                                _.assign(context.params, LangUtils.parseForm(form));\n                            }\n                            //add files\n                            if (files)\n                                _.assign(context.params, files);\n                            return callback();\n                        }\n                        catch (err) {\n                            return callback(err);\n                        }\n                    });\n                }\n                else {\n                    return callback();\n                }\n\n            }\n        }\n        catch  (e) {\n            TraceUtils.log(e);\n            return callback(new Error(\"An internal server error occured while parsing request data.\"));\n        }\n\n    }\n}\n\n/**\n * @class\n */\nexport class PostContentConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                const handler = new PostHandler();\n                return Q.nfbind(handler.beginRequest)(context)\n                    .then(()=> {\n                        return HttpNextResult.create().toPromise();\n                    });\n            }\n            catch(err) {\n                return Q.reject(err);\n            }\n        });\n    }\n}\n"]}