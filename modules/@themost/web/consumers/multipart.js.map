{"version":3,"sources":["multipart.es6"],"names":["formidable","_","LangUtils","HttpConsumer","Rx","HttpNextResult","process","version","multipart_parser","require","MultipartParser","prototype","initWithBoundary","str","boundary","Buffer","length","write","lookbehind","state","START","boundaryChars","i","MultipartHandler","context","callback","request","headers","contentType","test","f","IncomingForm","parse","err","form","files","assign","params","parseForm","MultipartContentConsumer","handler","Observable","bindNodeCallback","beginRequest","flatMap","create","toObservable"],"mappings":"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","file":"multipart.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport formidable from 'formidable';\nimport {_} from 'lodash';\nimport {LangUtils} from '@themost/common/utils';\nimport {HttpConsumer} from '../consumers';\nimport Rx from 'rxjs';\nimport {HttpNextResult} from '../results';\n\nif (process.version>=\"v6.0.0\") {\n    const multipart_parser = require('formidable/lib/multipart_parser'), MultipartParser = multipart_parser.MultipartParser;\n    MultipartParser.prototype.initWithBoundary = function(str) {\n        this.boundary = new Buffer(str.length+4);\n        this.boundary.write('\\r\\n--', 0, 4 , 'ascii');\n        this.boundary.write(str, 4, str.length, 'ascii');\n        this.lookbehind = new Buffer(this.boundary.length+8);\n        this.state = multipart_parser.START;\n        this.boundaryChars = {};\n        for (let i = 0; i < this.boundary.length; i++) {\n            this.boundaryChars[this.boundary[i]] = true;\n        }\n    };\n}\n/**\n * @classdesc Default multipart content handler (as it has been implemented for version 1.x of MOST Web Framework)\n * @class\n * @private\n */\nclass MultipartHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        const request = context.request;\n        request.headers = request.headers || {};\n        const contentType = request.headers['content-type'];\n        if (/^multipart\\/form-data/i.test(contentType)) {\n            //use formidable to parse request data\n            const f = new formidable.IncomingForm();\n            f.parse(request, function (err, form, files) {\n                if (err) {\n                    return callback(err);\n                }\n                try {\n                    //add form\n                    if (form) {\n                        _.assign(context.params, LangUtils.parseForm(form));\n                    }\n                    //add files\n                    if (files)\n                        _.assign(context.params, files);\n                    return callback();\n                }\n                catch (err) {\n                    callback(err);\n                }\n            });\n        }\n        else {\n            return callback();\n        }\n    }\n}\n/**\n * @class\n */\nexport class MultipartContentConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                const handler = new MultipartHandler();\n                return Rx.Observable.bindNodeCallback(handler.beginRequest)(context)\n                    .flatMap(()=> {\n                        return HttpNextResult.create().toObservable();\n                    });\n            }\n            catch(err) {\n                return Rx.Observable['throw'](err);\n            }\n        });\n    }\n}\n"]}