{"version":3,"sources":["route.es6"],"names":["TraceUtils","Args","AbstractMethodError","AbstractClassError","_","url","HttpApplicationService","HttpConsumer","Rx","HttpNextResult","HttpRoute","route","routeData","patterns","int","boolean","decimal","float","guid","urlToMatch","self","Error","length","str1","patternMatch","k","indexOf","substr","re","match","exec","params","push","name","pattern","RegExp","str","replace","matcher","i","param","test","value","forEach","x","hasOwnProperty","RouteHandler","context","callback","isNil","request","routeStrategy","getApplication","getService","RoutingStrategy","assign","isObject","app","check","new","target","requestURL","uri","parse","routes","getRoutes","isArray","httpRoute","isMatch","pathname","routesProperty","Symbol","DefaultRoutingStrategy","getConfiguration","RouteConsumer","handler","Observable","bindNodeCallback","mapRequest","flatMap","create","toObservable","err"],"mappings":"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","file":"route.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {TraceUtils,Args} from '@themost/common/utils';\nimport {AbstractMethodError,AbstractClassError} from '@themost/common/errors';\nimport {_} from 'lodash';\nimport url from 'url';\nimport {HttpApplicationService} from '../interfaces';\nimport {HttpConsumer} from '../consumers';\nimport Rx from 'rxjs';\nimport {HttpNextResult} from '../results';\n\n/**\n * @classdesc HttpRoute class provides routing functionality to HTTP requests\n * @class\n * */\nexport class HttpRoute {\n    /**\n     * @constructor\n     * @param {string|*=} route - A formatted string or an object which represents an HTTP route response url (e.g. /pages/:name.html, /user/edit.html).\n     */\n    constructor(route) {\n        if (typeof route === 'string') {\n            this.route = { url:route };\n        }\n        else if (typeof route === 'object') {\n            this.route = route;\n        }\n        this.routeData = { };\n\n        this.patterns = {\n            int:function() {\n                return \"^[1-9]([0-9]*)$\";\n            },\n            boolean:function() {\n                return \"^true|false$\"\n            },\n            decimal:function() {\n                return \"^\\d*\\.?\\d*$\";\n            },\n            float:function() {\n                return \"^\\d*\\.?\\d*$\";\n            },\n            guid:function() {\n                return \"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$\";\n            }\n        }\n\n    }\n\n    /**\n     * @param {string} urlToMatch\n     * @return {boolean}\n     */\n    isMatch(urlToMatch) {\n        const self = this;\n        if (typeof self.route === 'undefined' || self.route===null) {\n            throw new Error(\"Route may not be null\");\n        }\n        self.routeData = self.routeData || { };\n        if (typeof urlToMatch !== 'string')\n            return false;\n        if (urlToMatch.length === 0)\n            return false;\n        let str1 = urlToMatch, patternMatch;\n        const k = urlToMatch.indexOf('?');\n        if (k >= 0)\n            str1 = urlToMatch.substr(0, k);\n        const re = /(\\{([\\w\\[\\]]+)(?::\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*})+))?})|((:)([\\w\\[\\]]+))/ig;\n        let match = re.exec(this.route.url);\n        const params = [];\n        while(match) {\n            if (typeof match[2] === 'undefined') {\n                //parameter with colon (e.g. :id)\n                params.push({\n                    name: match[6]\n                });\n            }\n            else if (typeof match[3] !== 'undefined') {\n                //common expressions\n                patternMatch = match[3];\n                if (typeof self.patterns[match[3]] === 'function') {\n                    patternMatch = self.patterns[match[3]]();\n                }\n                params.push({\n                    name: match[2],\n                    pattern: new RegExp(patternMatch, \"ig\")\n                });\n            }\n            else {\n                params.push({\n                    name: match[2]\n                });\n            }\n            match = re.exec(this.route.url);\n        }\n        const str = this.route.url.replace(re, \"([\\\\w-]+)\"), matcher = new RegExp(\"^\" + str + \"$\", \"ig\");\n        match = matcher.exec(str1);\n        if (typeof match === 'undefined' || match == null) {\n            return false;\n        }\n        for (let i = 0; i < params.length; i++) {\n            const param = params[i];\n            if (typeof param.pattern !== 'undefined') {\n                if (!param.pattern.test(match[i+1])) {\n                    return false;\n                }\n            }\n            param.value = match[i+1];\n        }\n        params.forEach(function(x) {\n            self.routeData[x.name] = x.value;\n        });\n        if (self.route.hasOwnProperty(\"controller\")) { self.routeData[\"controller\"] = self.route[\"controller\"]; }\n        if (self.route.hasOwnProperty(\"action\")) { self.routeData[\"action\"] = self.route[\"action\"]; }\n        return true;\n    }\n\n    /**\n     * @param {string|*=} route - A formatted string or an object which represents an HTTP route response url (e.g. /pages/:name.html, /user/edit.html).\n     * @returns {HttpRoute}\n     */\n    static create(route) {\n        return new HttpRoute(route);\n    }\n\n}\n\n/**\n * @classdesc Extends context parameters by adding the context params that are defined on the current route, if any (implemented on version 1.x of MOST Web Framework)\n * @class\n */\nclass RouteHandler {\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    mapRequest(context, callback) {\n        if (_.isNil(context.request)) {\n            return callback();\n        }\n        /**\n         * @type {RoutingStrategy}\n         */\n        const routeStrategy = context.getApplication().getService(RoutingStrategy);\n        if (_.isNil(routeStrategy)) {\n            return callback();\n        }\n        const route = routeStrategy.exec(context.request.url);\n        if (_.isNil(route)) {\n            return callback();\n        }\n        //extend params\n        context.params = context.params || {};\n        //assign route to current request for further execution\n        context.request.route = route;\n        //assign route data to current request for further execution\n        context.request.routeData = route.routeData || {};\n\n        if (typeof route.params === 'object' && route.params!==null) {\n            //assign route params\n            _.assign(context.params, route.params);\n        }\n        //assign route data to params (override any existed property)\n        if (_.isObject(context.request.routeData)) {\n            _.assign(context.params, context.request.routeData)\n        }\n        return callback();\n    }\n}\n/**\n * @classdesc An abstract class which represents the route strategy of an HTTP application.\n * @class\n */\nexport class RoutingStrategy extends HttpApplicationService {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        Args.check(new.target !== RoutingStrategy, new AbstractClassError());\n        super(app)\n    }\n\n    /**\n     * @abstract\n     * @returns {Array}\n     */\n    getRoutes() {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     *\n     * @param {string} requestURL\n     * @returns {*}\n     */\n    isMatch(requestURL) {\n        return this.exec(requestURL) instanceof HttpRoute;\n    }\n    /**\n     * Returns the HTTP route that matches the given URL\n     * @param {string} requestURL\n     * @returns {*}\n     */\n    exec(requestURL) {\n        if (_.isNil(requestURL)) {\n            return;\n        }\n        let uri = url.parse(requestURL);\n        const routes = this.getRoutes();\n        if (_.isArray(routes) && (routes.length>0)) {\n            //enumerate registered routes\n            const httpRoute = new HttpRoute();\n            for (let i = 0; i < routes.length; i++) {\n                httpRoute.route = routes[i];\n                //if uri path is matched\n                if (httpRoute.isMatch(uri.pathname)) {\n                    return httpRoute;\n                }\n            }\n        }\n    }\n}\n\nconst routesProperty = Symbol('routes');\n\n/**\n * @classdesc Represents the default route strategy of an HTTP application.\n */\nexport class DefaultRoutingStrategy extends RoutingStrategy {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        super(app);\n        this[routesProperty] = this.getApplication().getConfiguration().routes || [];\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getRoutes() {\n        return this[routesProperty];\n    }\n}\n\n\n/**\n * @class\n */\nexport class RouteConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                let handler = new RouteHandler();\n                return Rx.Observable.bindNodeCallback(handler.mapRequest)(context)\n                    .flatMap(()=> {\n                        return HttpNextResult.create().toObservable();\n                    });\n            }\n            catch(err) {\n                return Rx.Observable['throw'](err);\n            }\n        });\n    }\n}"]}