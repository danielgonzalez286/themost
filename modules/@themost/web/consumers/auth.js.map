{"version":3,"sources":["consumers/auth.es6"],"names":["_","crypto","moment","Args","TraceUtils","LangUtils","RandomUtils","HttpConsumer","HttpNextResult","HttpApplicationService","AbstractClassError","AbstractMethodError","HttpForbiddenError","HttpUnauthorizedError","Q","ANONYMOUS_IDENTITY","name","authenticationType","AuthHandler","context","callback","getApplication","hasService","AuthStrategy","authStrategy","getService","authCookieStr","getAuthCookie","isNil","setAuthCookie","user","authCookie","JSON","parse","err","AuthConsumer","handler","nfbind","authenticateRequest","then","create","toPromise","reject","BasicAuthHandler","authorizationArgs","parseBasicAuthorization","request","headers","login","userName","userPassword","catch","s","re","match","exec","replace","token","buffer","Buffer","matched","toString","log","USERNAME_REGEXP","BasicAuthConsumer","app","check","new","target","thisContext","options","optionsProperty","Symbol","DefaultAuthStrategy","randomChars","keys","authSettings","pick","getConfiguration","settings","auth","assign","unattendedExecutionAccount","defaultOptions","dateCreated","Date","value","expires","isObject","stringify","isDate","toUTCString","isNumber","getOptions","expirationTimeout","parseInt","add","toDate","str","concat","encrypt","response","setHeader","cookie","getCookie","decrypt","self","password","model","where","equal","select","silent","first","result","Error","enabled","id","prepare","and","or","createHash","update","digest","count","EncryptionStrategy","data","cryptoProperty","DefaultEncyptionStrategy","algorithm","key","cipher","createCipher","final","decipher","createDecipher"],"mappings":"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","file":"auth.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport crypto from 'crypto';\nimport moment from 'moment';\nimport {Args,TraceUtils,LangUtils,RandomUtils} from '@themost/common/utils';\nimport {HttpConsumer} from '../consumers';\nimport {HttpNextResult} from '../results';\nimport {HttpApplicationService} from \"../interfaces\";\nimport {AbstractClassError, AbstractMethodError, HttpForbiddenError, HttpUnauthorizedError} from \"@themost/common/errors\";\nimport Q from 'q';\n\nconst ANONYMOUS_IDENTITY = { name: 'anonymous', authenticationType:'None' };\n/**\n * @classdesc @classdesc Default authentication handler (as it had been implemented for version 1.x of MOST Web Framework)\n * @class\n * @private\n */\nclass AuthHandler {\n\n    /**\n     * Authenticates an HTTP request and sets user or anonymous identity.\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    authenticateRequest(context, callback) {\n        try {\n            if (!context.getApplication().hasService(AuthStrategy)) {\n                return callback();\n            }\n            const authStrategy = context.getApplication().getService(AuthStrategy);\n            const authCookieStr = authStrategy.getAuthCookie(context);\n            if (_.isNil(authCookieStr)) {\n                authStrategy.setAuthCookie(context,'anonymous');\n                context.user = ANONYMOUS_IDENTITY;\n                return callback();\n            }\n            else {\n                const authCookie = JSON.parse(authCookieStr);\n                if (authCookie.user)\n                {\n                    context.user = { name: authCookie.user, authenticationType:'Basic' };\n                    return callback();\n                }\n                else {\n                    authStrategy.setAuthCookie(context,'anonymous');\n                    return callback();\n                }\n            }\n        }\n        catch (err) {\n            return callback(err);\n        }\n    }\n}\n\nexport class AuthConsumer extends HttpConsumer {\n    constructor() {\n        super(function(context) {\n            try {\n                let handler = new AuthHandler();\n                return Q.nfbind(handler.authenticateRequest)(context)\n                    .then(()=> {\n                        return HttpNextResult.create().toPromise();\n                    });\n            }\n            catch(err) {\n                return Q.reject(err);\n            }\n        });\n    }\n}\n\n/**\n * @classdesc Default basic authentication handler (as it had been implemented for version 1.x of MOST Web Framework)\n * @class\n */\nclass BasicAuthHandler {\n    /**\n     * @param {string} s\n     * @returns {{userName:string, userPassword:string}|undefined}\n     * @ignore\n     */\n    static parseBasicAuthorization(s) {\n        try {\n            if (typeof s !== 'string')\n                return;\n            //get authorization type (basic)\n            const re = /\\s?(Basic)\\s+(.*)\\s?/ig;\n            const match = re.exec(s.replace(/^\\s+/g,''));\n            if (match) {\n                //get authorization token\n                const token = match[2];\n                //decode token\n                const buffer = new Buffer(token, 'base64');\n                //get args e.g. username:password\n                const matched = /(.*):(.*)/ig.exec(buffer.toString());\n                if (matched) {\n                    return { userName:matched[1], userPassword:matched[2] };\n                }\n            }\n        }\n        catch(err) {\n            TraceUtils.log(err);\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     * @returns {*}\n     */\n    authenticateRequest(context, callback) {\n        try {\n            if (!context.getApplication().hasService(AuthStrategy)) {\n                return callback();\n            }\n            /**\n             * @type {{userName: string, userPassword: string}|*}\n             */\n            const authorizationArgs = BasicAuthHandler.parseBasicAuthorization(context.request.headers['authorization']);\n            if (_.isNil(authorizationArgs)) {\n                return callback();\n            }\n            /**\n             * @type {AuthStrategy}\n             */\n            const authStrategy = context.getApplication().getService(AuthStrategy);\n            authStrategy.login(context,authorizationArgs.userName, authorizationArgs.userPassword).then(()=>{\n                return callback(null, true);\n            }).catch((err)=> {\n                return callback(err);\n            });\n        }\n        catch(err) {\n            return callback(err);\n        }\n    }\n}\n\nBasicAuthHandler.USERNAME_REGEXP = /^[a-zA-Z0-9.@_-]{1,255}$/;\n\nexport class BasicAuthConsumer extends HttpConsumer {\n    constructor() {\n        super(function(context) {\n            try {\n                let handler = new BasicAuthHandler();\n                return Q.nfbind(handler.authenticateRequest)(context)\n                    .then(()=> {\n                        return HttpNextResult.create().toPromise();\n                    });\n            }\n            catch(err) {\n                return Q.reject(err);\n            }\n        });\n    }\n}\n\nexport class AuthStrategy extends HttpApplicationService {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        Args.check(new.target !== AuthStrategy, new AbstractClassError());\n        super(app);\n    }\n\n    /**\n     * Sets the authentication cookie for the given context\n     * @param {HttpContext} thisContext\n     * @param {string} userName\n     * @param {*} options\n     */\n    setAuthCookie(thisContext, userName, options) {\n        throw new AbstractMethodError();\n    }\n    /**\n     * Gets the authentication cookie of the given context\n     * @param {HttpContext} thisContext\n     * @returns {*}\n     */\n    getAuthCookie(thisContext) {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Validates the specified credentials and authorizes the given context by setting the authorization cookie\n     * @param thisContext - The current context\n     * @param userName - A string which represents the user name\n     * @param userPassword - A string which represents the user password\n     * @returns {Promise}\n     */\n    login(thisContext, userName, userPassword) {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Removes any authorization assigned to the given context\n     * @param thisContext\n     * @returns {Promise}\n     */\n    logout(thisContext) {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Gets the unattended execution account\n     * @returns {string}\n     */\n    getUnattendedExecutionAccount() {\n        throw new AbstractMethodError();\n    }\n\n}\n\nconst optionsProperty = Symbol('options');\n\nexport class DefaultAuthStrategy extends HttpApplicationService {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        super(app);\n        //get cookie name (from configuration)\n        this[optionsProperty] = {\n            \"name\":\".MAUTH\",\n            \"slidingExpiration\": false,\n            \"expirationTimeout\":420,\n            \"unattendedExecutionAccount\":RandomUtils.randomChars(16)\n        };\n        //get keys\n        const keys = _.keys(this[optionsProperty]);\n        //pick authSetting based on the given keys\n        const authSettings = _.pick(app.getConfiguration().settings.auth, keys);\n        //and assign properties to default\n        _.assign(this[optionsProperty], authSettings);\n    }\n\n    getOptions() {\n        return this[optionsProperty];\n    }\n\n    /**\n     * Gets the unattended execution account\n     * @returns {string}\n     */\n    getUnattendedExecutionAccount() {\n        return this[optionsProperty].unattendedExecutionAccount;\n    }\n\n    /**\n     * Sets the authentication cookie for the given context\n     * @param {HttpContext} thisContext - The current HTTP context\n     * @param {string} userName - The username to authorize\n     * @param {*=} options - Any other option we need to include in authorization cookie\n     */\n    setAuthCookie(thisContext, userName, options) {\n        const defaultOptions = { user:userName, dateCreated:new Date()};\n        let value;\n        let expires;\n        if (_.isObject(options)) {\n            value = JSON.stringify(_.assign(options, defaultOptions));\n            if (_.isDate(options['expires'])) {\n                expires = options['expires'].toUTCString();\n            }\n        }\n        else {\n            value = JSON.stringify(defaultOptions);\n        }\n        //set default expiration as it has been defined in application configuration\n        if (_.isNil(expires) && _.isNumber(this.getOptions().expirationTimeout)) {\n            const expirationTimeout = LangUtils.parseInt(this.getOptions().expirationTimeout);\n            if (expirationTimeout>0) {\n                expires = moment(new Date()).add(expirationTimeout,'minutes').toDate().toUTCString();\n            }\n        }\n        let str = this[optionsProperty].name.concat('=', this.getApplication().encrypt(value)) + ';path=/';\n        if (typeof expires === 'string') {\n            str +=';expires=' + expires;\n        }\n        thisContext.response.setHeader('Set-Cookie',str);\n    }\n\n    /**\n     * Gets the authentication cookie of the given context\n     * @param {HttpContext} thisContext\n     * @returns {*}\n     */\n    getAuthCookie(thisContext) {\n        const name = this.getOptions().name;\n        const cookie = thisContext.getCookie(name);\n        if (cookie) {\n            return this.getApplication().decrypt(cookie);\n        }\n    }\n\n    /**\n     * Validates the specified credentials and authorizes the given context by setting the authorization cookie\n     * @param thisContext - The current context\n     * @param userName - A string which represents the user name\n     * @param userPassword - A string which represents the user password\n     * @returns {Promise}\n     */\n    login(thisContext, userName, userPassword) {\n        const self = this;\n        return Q.nfbind(function(context, userName, password, callback) {\n            try {\n                context.model('user').where('name').equal(userName).select('id','enabled').silent().first(function(err, result) {\n                    if (err) {\n                        return callback(new Error('Login failed due to server error. Please try again or contact your system administrator.'));\n                    }\n                    if (_.isNil(result)) {\n                        return callback(new HttpUnauthorizedError('Unknown username. Please try again.'));\n                    }\n                    if (!result.enabled) {\n                        return callback(new HttpForbiddenError('The account is disabled. Please contact your system administrator.'));\n                    }\n                    //user was found\n                    const model = context.model('UserCredential');\n                    if (typeof model === 'undefined' || model === null) {\n                        TraceUtils.log('UserCredential model is missing.');\n                        return callback(new Error('Login failed due to server error.'));\n                    }\n                    model.where('id').equal(result.id).prepare()\n                        .and('userPassword').equal('{clear}'.concat(userPassword))\n                        .or('userPassword').equal('{md5}'.concat(crypto.createHash('md5').update(userPassword).digest('hex')))\n                        .or('userPassword').equal('{sha1}'.concat(crypto.createHash('sha1').update(userPassword).digest('hex')))\n                        .silent().count().then(function(count) {\n                            if (count===1) {\n                            //set cookie\n                                self.setAuthCookie(context, userName);\n                                context.user = { name: userName, authenticationType:'Basic' };\n                                return callback(null, true);\n                            }\n                            return callback(new HttpUnauthorizedError('Unknown username or bad password.'));\n                        }).catch(function(err) {\n                            TraceUtils.log(err);\n                            return callback(new Error('Login failed due to server error. Please try again or contact your system administrator.'));\n                        });\n                });\n            }\n            catch (err) {\n                TraceUtils.log(err);\n                return callback(new Error('Login failed due to internal server error.'));\n            }\n\n        })(thisContext, userName, userPassword);\n\n    }\n\n    /**\n     * Removes any authorization assigned to the given context\n     * @param thisContext\n     * @returns {Promise}\n     */\n    logout(thisContext) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            //set auth cookie\n            self.setAuthCookie(thisContext,'anonymous');\n            return callback();\n        })();\n    }\n\n}\n\n/**\n * @classdesc Represents the encryption strategy of an HTTP application\n * @class\n */\nexport class EncryptionStrategy extends HttpApplicationService {\n\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        Args.check(new.target !== AuthStrategy, new AbstractClassError());\n        super(app);\n    }\n\n    /**\n     * Encrypts the given data\n     * @param {*} data\n     * */\n    encrypt(data) {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Decrypts the given data\n     * @param {string} data\n     * */\n    decrypt(data) {\n        throw new AbstractMethodError();\n    }\n\n}\n\nconst cryptoProperty = Symbol('crypto');\n\n/**\n * @classdesc Represents the default encryption strategy of an HTTP application\n * @class\n * @augments EncryptionStrategy\n */\nexport class DefaultEncyptionStrategy extends EncryptionStrategy {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        super(app);\n        this[cryptoProperty] = { };\n        //get\n        _.assign(this[cryptoProperty], app.getConfiguration().settings.crypto);\n    }\n\n    getOptions() {\n        return this[cryptoProperty];\n    }\n\n    /**\n     * Encrypts the given data\n     * @param {*} data\n     * */\n    encrypt(data) {\n        if (_.isNil(data))\n            return;\n        Args.check(this.getApplication().hasService(EncryptionStrategy),'Encryption strategy is missing');\n        const options = this.getOptions();\n        //validate settings\n        Args.check(!_.isNil(options.algorithm), 'Data encryption algorithm is missing. The operation cannot be completed');\n        Args.check(!_.isNil(options.key), 'Data encryption key is missing. The operation cannot be completed');\n        //encrypt\n        const cipher = crypto.createCipher(options.algorithm, options.key);\n        return cipher.update(data, 'utf8', 'hex') + cipher.final('hex');\n    }\n\n    /**\n     * Decrypts the given data\n     * @param {string} data\n     * */\n    decrypt(data) {\n        if (_.isNil(data))\n            return;\n        Args.check(this.getApplication().hasService(EncryptionStrategy),'Encryption strategy is missing');\n        //validate settings\n        const options = this.getOptions();\n        //validate settings\n        Args.check(!_.isNil(options.algorithm), 'Data encryption algorithm is missing. The operation cannot be completed');\n        Args.check(!_.isNil(options.key), 'Data encryption key is missing. The operation cannot be completed');\n        //decrypt\n        const decipher = crypto.createDecipher(options.algorithm, options.key);\n        return decipher.update(data, 'hex', 'utf8') + decipher.final('utf8');\n    }\n\n\n}\n"]}