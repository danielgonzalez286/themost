{"version":3,"sources":["view.es6"],"names":["TraceUtils","LangUtils","HttpNextResult","HttpEndResult","HttpConsumer","_","url","xml","Q","async","ModuleLoaderStrategy","_dasherize","s","isString","trim","replace","toLowerCase","_isPromise","f","then","catch","dasherize","mixin","isPromise","ViewHandler","context","callback","self","request","currentHandler","requestUri","parse","currentRoute","route","isNil","controllerName","routeData","controller","queryController","queryControllerClass","err","ControllerClass","name","prototype","preflightRequest","call","obj","is","getFormat","body","doc","loadXML","deserialize","documentElement","params","data","JSON","e","log","Error","allowCredentials","allowOrigin","allowHeaders","allowMethods","allow","headerNames","response","headers","origin","setHeader","indexOf","action","httpMethodDecorator","camelCase","method","controllerPrototype","Object","getPrototypeOf","protoActionMethods","filter","getOwnPropertyNames","x","httpAction","length","isValidControllerAction","actionMethod","queryControllerAction","methodParams","getFunctionParams","actionConsumers","keys","eachSeries","actionConsumer","cb","source","run","k","getParam","push","apply","result","moduleLoader","getApplication","getConfiguration","getStrategy","controllerPath","require","code","controllerModel","model","controllers","type","undefined","segments","pathname","split","ViewConsumer","handler","nfbind","mapRequest","bind","postMapRequest","processRequest","res","toPromise","reject"],"mappings":"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","file":"view.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\nimport 'source-map-support/register';\nimport {TraceUtils, LangUtils} from '@themost/common/utils';\nimport {HttpNextResult, HttpEndResult} from '../results';\nimport {HttpConsumer} from '../consumers';\nimport _ from 'lodash';\nimport url from 'url';\nimport xml from 'most-xml';\nimport Q from 'q';\nimport async from 'async';\nimport {ModuleLoaderStrategy} from \"@themost/common/config\";\n\n/**\n *\n * @param s\n * @returns {*}\n * @private\n */\nfunction _dasherize(s) {\n    if (_.isString(s))\n        return _.trim(s).replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').replace(/^-/,'').toLowerCase();\n    return s;\n}\nfunction _isPromise(f) {\n    if (typeof f !== 'object') {\n        return false;\n    }\n    return (typeof f.then === 'function') && (typeof f.catch === 'function');\n}\n\n/**\n * @method dasherize\n * @memberOf _\n */\n\n/**\n * @method isPromise\n * @memberOf _\n */\n\nif (typeof _.dasherize !== 'function') {\n    _.mixin({'dasherize' : _dasherize});\n}\n\nif (typeof _.isPromise !== 'function') {\n    _.mixin({'isPromise' : _isPromise});\n}\n\n/**\n * @classdesc Default view handler (as it had been implemented for version 1.x of MOST Web Framework)\n * @class\n */\nclass ViewHandler {\n    /**\n     *\n     * @param {string} controllerName\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    static queryControllerClass(controllerName, context, callback) {\n\n        if (_.isNil(controllerName)) {\n            callback();\n        }\n        else {\n            const moduleLoader = context.getApplication().getConfiguration().getStrategy(ModuleLoaderStrategy);\n            //get dasherized controller path e.g. ./controllers/user-controller.js\n            let controllerPath = `./controllers/${_.dasherize(controllerName)}-controller.js`;\n            //try to load controller\n            try {\n                return callback(null, moduleLoader.require(controllerPath));\n            }\n            catch(err) {\n                if (err.code === 'MODULE_NOT_FOUND') {\n                    const controllerModel = context.model(controllerName);\n                    //module not found so try to find it if current controller has a model defined\n                    if (_.isNil(controllerModel)) {\n                        return callback(null,context.getApplication().getConfiguration().controllers[controllerName] || require('../controllers/base'));\n                    }\n                    //get controller path based on controller's type e.g. ./controllers/lookup-controller.js\n                    controllerPath = `./controllers/${_.dasherize(controllerModel.type || 'data')}-controller.js`;\n                    try {\n                        return callback(null, moduleLoader.require(controllerPath));\n                    }\n                    catch (err) {\n                        if (err.code === 'MODULE_NOT_FOUND') {\n                            //get controller relative path based on controller's type e.g. ./controllers/lookup-controller.js\n                            controllerPath = `../controllers/${ _.dasherize(controllerModel.type || 'data')}.js`;\n                            try {\n                                return callback(null, require(controllerPath));\n                            }\n                            catch (err) {\n                                if (err.code === 'MODULE_NOT_FOUND') {\n                                    return callback(null, require('../controllers/base'));\n                                }\n                                return callback(err);\n                            }\n                        }\n                        return callback(err);\n                    }\n                }\n                return callback(err);\n            }\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    mapRequest(context, callback) {\n        const self = this;\n        callback = callback || function () { };\n        //try to map request\n        try {\n            //first of all check if a request handler is already defined\n            if (typeof context.request.currentHandler !== 'undefined') {\n                //do nothing (exit mapping)\n                return callback();\n            }\n            const requestUri = url.parse(context.request.url);\n            /**\n             * find route by querying application routes\n             * @type {HttpRoute}\n             */\n            const currentRoute = context.request.route;\n            if (_.isNil(currentRoute)) {\n                return callback();\n            }\n            //query controller\n            const controllerName = currentRoute[\"controller\"] || currentRoute.routeData.controller || queryController(requestUri);\n            if (typeof controllerName === 'undefined' || controllerName === null) {\n                return callback();\n            }\n            //try to find controller class\n            ViewHandler.queryControllerClass(controllerName, context, function(err, ControllerClass) {\n                if (err) {\n                    return callback(err);\n                }\n                try {\n                    //initialize controller\n                    const controller = new ControllerClass();\n                    //set controller's name\n                    controller.name = controllerName.toLowerCase();\n                    //set controller's context\n                    controller.context = context;\n                    //set request handler\n                    self.controller = controller;\n                    context.request.currentHandler = self;\n                    return callback(null, true);\n                }\n                catch(err) {\n                    return callback(err);\n                }\n            });\n\n        }\n        catch (err) {\n            callback(err);\n        }\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    postMapRequest(context, callback) {\n        try {\n            ViewHandler.prototype.preflightRequest.call(this, context, function(err) {\n                if (err) { return callback(err); }\n                let obj;\n                if (context.is('POST')) {\n                    if (context.getFormat()==='xml') {\n                        //get current model\n                        if (context.request.body) {\n                            //load xml\n                            try {\n                                const doc = xml.loadXML(context.request.body);\n                                obj = xml.deserialize(doc.documentElement);\n                                context.params.data = obj;\n                            }\n                            catch (err) {\n                                return callback(err);\n                            }\n                        }\n                    }\n                    else if (context.getFormat()==='json') {\n                        if (typeof context.request.body === 'string') {\n                            //parse json data\n                            try {\n                                obj = JSON.parse(context.request.body);\n                                //set context data\n                                context.params.data = obj;\n                            }\n                            catch(e) {\n                                //otherwise raise error\n                                TraceUtils.log(e);\n                                return callback(new Error('Invalid JSON data.'));\n                            }\n                        }\n                    }\n                }\n                return callback();\n            });\n        }\n        catch(err) {\n            callback(err);\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    preflightRequest(context, callback) {\n        try {\n            if (context && (context.request.currentHandler instanceof ViewHandler)) {\n                //set the default origin (with wildcard)\n                let allowCredentials = true, allowOrigin=\"*\", allowHeaders = \"Origin, X-Requested-With, Content-Type, Content-Language, Accept, Accept-Language, Authorization\", allowMethods = \"GET, OPTIONS, PUT, POST, DELETE\";\n                /**\n                 * @private\n                 * @type {{allowOrigin:string,allowHeaders:string,allowCredentials:Boolean,allowMethods:string,allow:string}|*}\n                 */\n                const route = context.request.route;\n                if (route) {\n                    if (typeof route.allowOrigin !== 'undefined')\n                        allowOrigin = route.allowOrigin;\n                    if (typeof route.allowHeaders !== 'undefined')\n                        allowHeaders = route.allowHeaders;\n                    if (typeof route.allowCredentials !== 'undefined')\n                        allowCredentials = route.allowCredentials;\n                    if ((typeof route.allowMethods !== 'undefined') || (typeof route.allow !== 'undefined'))\n                        allowMethods = route.allow || route.allowMethods;\n                }\n                //ensure header names\n                const headerNames = context.response[\"_headerNames\"] || { };\n                //1. Access-Control-Allow-Origin\n                if (typeof headerNames[\"access-control-allow-origin\"] === 'undefined') {\n                    //if request contains origin header\n                    if (context.request.headers.origin) {\n                        if (allowOrigin === \"*\") {\n                            //set access-control-allow-origin header equal to request origin header\n                            context.response.setHeader(\"Access-Control-Allow-Origin\", context.request.headers.origin);\n                        }\n                        else if (allowOrigin.indexOf(context.request.headers.origin)>-1) {\n                            context.response.setHeader(\"Access-Control-Allow-Origin\", context.request.headers.origin);\n                        }\n                    }\n                    else {\n                        //set access-control-allow-origin header equal to the predefined origin header\n                        context.response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n                    }\n                }\n                //2. Access-Control-Allow-Origin\n                if (typeof headerNames[\"access-control-allow-credentials\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Credentials\", allowCredentials);\n                }\n\n                //3. Access-Control-Allow-Headers\n                if (typeof headerNames[\"access-control-allow-headers\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Headers\", allowHeaders);\n                }\n\n                //4. Access-Control-Allow-Methods\n                if (typeof headerNames[\"access-control-allow-methods\"] === 'undefined') {\n                    context.response.setHeader(\"Access-Control-Allow-Methods\", allowMethods);\n                }\n            }\n            if (typeof callback === 'undefined') { return; }\n            return callback();\n        }\n        catch(e) {\n            if (typeof callback === 'undefined') { throw e; }\n            callback(e);\n        }\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} controller\n     * @param {string} action\n     * @returns {boolean}\n     */\n    static isValidControllerAction(context, controller, action) {\n        const httpMethodDecorator = _.camelCase('http-' + context.request.method);\n        if (typeof controller[action] === 'function') {\n            //get httpAction decorator\n            if ((typeof controller[action].httpAction === 'undefined') ||\n                (controller[action].httpAction===action)) {\n                //and supports current request method (see http decorators)\n                if (controller[action][httpMethodDecorator]) {\n                    //return this action\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {*} controller\n     * @param {string} action\n     * @returns {*}\n     */\n    queryControllerAction(context, controller, action) {\n        //get current http decorator name (e.g. httpGet, httpPost etc)\n        const httpMethodDecorator = _.camelCase('http-' + context.request.method);\n        //get camel cased action name (e.g. test-action as testAction)\n        const method = _.camelCase(action);\n        //get controller prototype\n        const controllerPrototype = Object.getPrototypeOf(controller);\n        if (controllerPrototype) {\n            //query controller methods that support current http request\n            let protoActionMethods = _.filter(Object.getOwnPropertyNames(controllerPrototype), function(x) {\n                return (typeof controller[x] === 'function') &&\n                    (controller[x].httpAction === action) &&\n                    (controller[x][httpMethodDecorator] === true);\n            });\n            //if an action was found for the given criteria\n            if (protoActionMethods.length===1) {\n                return controller[protoActionMethods[0]];\n            }\n        }\n        //if an action with the given name is a method of current controller\n        if (ViewHandler.isValidControllerAction(context, controller, action)) {\n            return controller[action];\n        }\n        //if an camel cased action with the given name is a method of current controller\n        if (ViewHandler.isValidControllerAction(context, controller, method)) {\n            return controller[method];\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    processRequest(context, callback) {\n        const self = this;\n        callback = callback || function () { };\n        try {\n            if (context.is('OPTIONS')) {\n                //do nothing\n                return callback();\n            }\n            //validate request controller\n            const controller = self.controller;\n            if (controller) {\n                /**\n                 * try to find action\n                 * @type {String}\n                 */\n                const action = context.request.routeData.action;\n                if (action) {\n                    //query controller action\n                    let actionMethod = self.queryControllerAction(context, controller, action);\n                    if (typeof actionMethod !== 'function') {\n                        return callback(null, new HttpNextResult());\n                    }\n                    //enumerate params\n                    const methodParams = LangUtils.getFunctionParams(actionMethod), params = [];\n                    //execute action handler decorators\n                    const actionConsumers = _.filter(_.keys(actionMethod), (x) => {\n                        return (actionMethod[x] instanceof HttpConsumer);\n                    });\n                    return async.eachSeries(actionConsumers, (actionConsumer, cb) => {\n                        try {\n                            const source = actionMethod[actionConsumer].run(context);\n                            if (!_.isPromise(source)) {\n                                return cb(new Error(\"Invalid type. Action consumer result must be a promise.\"));\n                            }\n                            return source.then(()=> {\n                                return cb();\n                            }).catch((err)=> {\n                                return cb(err);\n                            });\n                        }\n                        catch(err) {\n                            return cb(err);\n                        }\n                    }, (err)=> {\n                        if (err) {\n                            return callback(err);\n                        }\n                        try {\n                            if (methodParams.length>0) {\n                                let k = 0;\n                                while (k < methodParams.length) {\n                                    if (typeof context.getParam === 'function') {\n                                        params.push(context.getParam(methodParams[k]));\n                                    }\n                                    else {\n                                        params.push(context.params[methodParams[k]]);\n                                    }\n                                    k+=1;\n                                }\n                            }\n                            //execute method\n                            const source = actionMethod.apply(controller, params);\n                            return source.then((result) => {\n                                return callback(null, result);\n                            }).catch((err) => {\n                                return callback(err);\n                            });\n                        }\n                        catch(err) {\n                            return callback(err);\n                        }\n                    });\n                }\n            }\n            return callback();\n        }\n        catch (err) {\n            return callback(err);\n        }\n    }\n\n}\n\n\n\n\n/**\n * Gets the controller of the given url\n * @param {string|*} requestUri - A string that represents the url we want to parse.\n * @private\n * */\nfunction queryController(requestUri) {\n    try {\n        if (requestUri === undefined)\n            return null;\n        //split path\n        const segments = requestUri.pathname.split('/');\n        //put an exception for root controller\n        //maybe this is unnecessary exception but we need to search for root controller e.g. /index.html, /about.html\n        if (segments.length === 2)\n            return 'root';\n        else\n        //e.g /pages/about where segments are ['','pages','about']\n        //and the controller of course is always the second segment.\n            return segments[1];\n\n    }\n    catch (err) {\n        throw err;\n    }\n}\n\n\nexport class ViewConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                let handler = new ViewHandler();\n                //execute mapRequest\n                return Q.nfbind(handler.mapRequest.bind(handler))(context)\n                    .then(()=> {\n                        //if request has been mapped\n                        if (context.request.currentHandler instanceof ViewHandler) {\n                            //execute post map request\n                            return Q.nfbind(handler.postMapRequest.bind(handler))(context);\n                        }\n                        //otherwise return next result\n                        return Q(new HttpNextResult());\n                    }).then(()=> {\n                        //if current handler is an instance of ViewHandler\n                        if (context.request.currentHandler instanceof ViewHandler) {\n                            //process request\n                            return Q.nfbind(handler.processRequest.bind(handler))(context).then((res)=> {\n                                if (res instanceof HttpEndResult) {\n                                    return res.toPromise();\n                                }\n                                return Q(res);\n                            });\n                        }\n                        return Q(new HttpNextResult());\n                    });\n            }\n            catch(err) {\n                return Q.reject(err);\n            }\n        });\n    }\n}\n\n\n"]}