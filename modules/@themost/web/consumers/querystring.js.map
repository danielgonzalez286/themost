{"version":3,"sources":["querystring.es6"],"names":["_","querystring","HttpConsumer","Rx","HttpNextResult","QuerystringHandler","context","callback","isNil","request","url","indexOf","assign","params","parse","substring","err","QuerystringConsumer","handler","Observable","bindNodeCallback","beginRequest","flatMap","create","toObservable"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;AACA;;IAAQA,C,WAAAA,C;;AACR;;IAAOC,W;;AACP;;IAAQC,Y,cAAAA,Y;;AACR;;IAAOC,E;;AACP;;IAAQC,c,YAAAA,c;;;;;;;;;;AAER;;;;;IAKMC,kB;;;;;;;;AACF;;;;;qCAKaC,O,EAASC,Q,EAAU;AAC5BA,uBAAWA,YAAY,YAAW,CAAE,CAApC;AACA,gBAAIP,EAAEQ,KAAF,CAAQF,OAAR,CAAJ,EAAsB;AAClB,uBAAOC,UAAP;AACH;AACD,gBAAI;AACA,oBAAME,UAAUH,QAAQG,OAAxB;AACA,oBAAIT,EAAEQ,KAAF,CAAQC,OAAR,CAAJ,EAAsB;AAClB,2BAAOF,UAAP;AACH;AACD;AACA,oBAAIE,QAAQC,GAAR,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAA/B,EAAkC;AAC9BX,sBAAEY,MAAF,CAASN,QAAQO,MAAjB,EAAyBZ,YAAYa,KAAZ,CAAkBL,QAAQC,GAAR,CAAYK,SAAZ,CAAsBN,QAAQC,GAAR,CAAYC,OAAZ,CAAoB,GAApB,IAA2B,CAAjD,CAAlB,CAAzB;AACH;AACJ,aATD,CAUA,OAAMK,GAAN,EAAW;AACP,uBAAOT,SAASS,GAAT,CAAP;AACH;AACD,mBAAOT,UAAP;AACH;;;;;;IAIQU,mB,WAAAA,mB;;;AACT,mCAAc;AAAA;;AAAA,yIACJ,YAAW;AACb;;;AAGA,gBAAMX,UAAU,IAAhB;AACA,gBAAI;AACA,oBAAIY,UAAU,IAAIb,kBAAJ,EAAd;AACA,uBAAOF,GAAGgB,UAAH,CAAcC,gBAAd,CAA+BF,QAAQG,YAAvC,EAAqDf,OAArD,EACFgB,OADE,CACM,YAAK;AACV,2BAAOlB,eAAemB,MAAf,GAAwBC,YAAxB,EAAP;AACH,iBAHE,CAAP;AAIH,aAND,CAOA,OAAMR,GAAN,EAAW;AACP,uBAAOb,GAAGgB,UAAH,CAAc,OAAd,EAAuBH,GAAvB,CAAP;AACH;AACJ,SAhBS;AAiBb;;;EAlBoCd,Y","file":"querystring.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport querystring from 'querystring';\nimport {HttpConsumer} from '../consumers';\nimport Rx from 'rxjs';\nimport {HttpNextResult} from '../results';\n\n/**\n * @classdesc @classdesc Default querystring handler (as it had been implemented for version 1.x of MOST Web Framework)\n * @class\n * @private\n */\nclass QuerystringHandler {\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    beginRequest(context, callback) {\n        callback = callback || function() {};\n        if (_.isNil(context)) {\n            return callback();\n        }\n        try {\n            const request = context.request;\n            if (_.isNil(request)) {\n                return callback();\n            }\n            //add query string params\n            if (request.url.indexOf('?') > 0) {\n                _.assign(context.params, querystring.parse(request.url.substring(request.url.indexOf('?') + 1)));\n            }\n        }\n        catch(err) {\n            return callback(err);\n        }\n        return callback();\n    }\n}\n\n\nexport class QuerystringConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                let handler = new QuerystringHandler();\n                return Rx.Observable.bindNodeCallback(handler.beginRequest)(context)\n                    .flatMap(()=> {\n                        return HttpNextResult.create().toObservable();\n                    });\n            }\n            catch(err) {\n                return Rx.Observable['throw'](err);\n            }\n        });\n    }\n}"]}