{"version":3,"sources":["localization.es6"],"names":["_","path","HttpApplicationService","AbstractClassError","AbstractMethodError","Args","TraceUtils","LocalizationStrategy","app","check","new","target","culture","notString","find","getCultures","x","locale","str","library","culturesProperty","Symbol","defaultCultureProperty","librariesProperty","DefaultLocalizationStrategy","config","getApplication","getConfiguration","settings","hasOwnProperty","localization","isArray","cultures","isString","default","text","lib","libraries","locLibrary","libraryFile","resolve","executionPath","concat","require","err","code","error"],"mappings":"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","file":"localization.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {_} from 'lodash';\nimport path from 'path';\nimport {HttpApplicationService} from './interfaces';\nimport {AbstractClassError,AbstractMethodError} from '@themost/common/errors';\nimport {Args,TraceUtils} from '@themost/common/utils';\n/**\n * @classdesc Represents the culture strategy of an HTTP application\n * @class\n * @abstract\n */\nexport class LocalizationStrategy extends HttpApplicationService {\n    /**\n     *\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        Args.check(new.target !== LocalizationStrategy, new AbstractClassError());\n        super(app);\n    }\n\n    /**\n     * Gets a collection of available cultures\n     * @abstract\n     * @public\n     */\n    getCultures() {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Gets the default culture of an HTTP application\n     * @abstract\n     * @public\n     */\n    getDefaultCulture() {\n        throw new AbstractMethodError();\n    }\n\n    /**\n     * Returns true if the given culture exists in available cultures\n     * @param {string} culture\n     */\n    hasCulture(culture) {\n        Args.notString(culture,'Culture');\n        return typeof _.find(this.getCultures(), function(x) {\n            return x==culture;\n        }) === 'string';\n    }\n\n    /**\n     * Returns the localized string of the given string\n     * @param {string} locale - The target locale\n     * @param {string} str - The string or key which is going to be localized\n     * @param {string=} library - The library which contains the given text\n     */\n    getLocaleString(locale, str, library) {\n        throw new AbstractMethodError();\n    }\n}\n\nconst culturesProperty = Symbol('cultures');\nconst defaultCultureProperty = Symbol('cultures');\nconst librariesProperty = Symbol();\n\nexport class DefaultLocalizationStrategy extends LocalizationStrategy {\n    /**\n     *\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        super(app);\n        const config = this.getApplication().getConfiguration();\n        this[culturesProperty] = ['en-us'];\n        this[defaultCultureProperty] = ['en-us'];\n        this[librariesProperty] = {};\n        if (config.settings) {\n            if (config.settings && config.settings.hasOwnProperty('localization')) {\n                /**\n                 * @type {{cultures:Array,default:string}}\n                 */\n                const localization = config.settings['localization'];\n                if (_.isArray(localization.cultures))\n                    this[culturesProperty] = localization.cultures;\n                if (_.isString(localization.default))\n                    this[defaultCultureProperty] = localization.default;\n            }\n        }\n    }\n    /**\n     * Gets a collection of available cultures\n     */\n    getCultures() {\n        return this[culturesProperty];\n    }\n\n    /**\n     * Gets the default culture of an HTTP application\n     */\n    getDefaultCulture() {\n        return this[defaultCultureProperty];\n    }\n\n    /**\n     * Returns the localized string of the given string\n     * @param {string} locale - The target locale\n     * @param {string} text - The string or key which is going to be localized\n     * @param {string=} library - The library which contains the given text\n     */\n    getLocaleString(locale, text, library) {\n        let lib = 'global';\n        if (library)\n            lib = library;\n        const libraries = this[librariesProperty];\n        let locLibrary;\n        if (libraries.hasOwnProperty(lib)) {\n            locLibrary = libraries[lib];\n            if (locLibrary.hasOwnProperty(locale)) {\n                return locLibrary[locale][text];\n            }\n        }\n        let libraryFile = path.resolve(this.getApplication().executionPath,'locales/'.concat(lib,'.',locale,'.json'));\n        try {\n            if (libraries.hasOwnProperty(lib))\n                locLibrary = libraries[lib];\n            else\n                locLibrary = libraries[lib] = { };\n            locLibrary[locale] = require(libraryFile);\n            return locLibrary[locale][text];\n        }\n        catch (err) {\n            if (err.code === 'ENOENT') {\n                TraceUtils.error(err);\n                return text;\n            }\n            throw err;\n        }\n\n    }\n}"]}