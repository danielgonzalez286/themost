{"version":3,"sources":["interfaces.es6"],"names":["_","Args","AbstractMethodError","AbstractClassError","applicationProperty","Symbol","HttpApplicationService","app","check","new","target","notNull","contextProperty","HttpViewEngine","context","url","options","callback"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;IAAQA,C,WAAAA,C;;AACR;;IAAQC,I,UAAAA,I;;AACR;;IAAQC,mB,WAAAA,mB;IAAoBC,kB,WAAAA,kB;;;;AAE5B,IAAMC,sBAAsBC,OAAO,aAAP,CAA5B;AACA;;;;;;IAKaC,sB,WAAAA,sB;AACT;;;AAGA,kCAAYC,GAAZ,EAAiB;AAAA;;AACbN,SAAKO,KAAL,CAAWC,IAAIC,MAAJ,KAAeJ,sBAA1B,EAAkD,IAAIH,kBAAJ,EAAlD;AACAF,SAAKU,OAAL,CAAaJ,GAAb,EAAkB,kBAAlB;AACA,SAAKH,mBAAL,IAA4BG,GAA5B;AACH;AACD;;;;;;;qCAGiB;AACb,aAAO,KAAKH,mBAAL,CAAP;AACH;;;;;;AAGL,IAAMQ,kBAAkBP,OAAO,SAAP,CAAxB;;AAEA;;;;;;IAKaQ,c,WAAAA,c;AACT;;;AAGA,0BAAYC,OAAZ,EAAqB;AAAA;;AACjBb,SAAKO,KAAL,CAAWC,IAAIC,MAAJ,KAAeG,cAA1B,EAA0C,IAAIV,kBAAJ,EAA1C;AACAF,SAAKU,OAAL,CAAaG,OAAb,EAAsB,cAAtB;AACA,SAAKF,eAAL,IAAwBE,OAAxB;AACH;AACD;;;;;;;iCAGa;AACT,aAAO,KAAKF,eAAL,CAAP;AACH;;AAED;;;;;;;;;2BAMOG,G,EAAKC,O,EAASC,Q,EAAU;AAC3B,YAAM,IAAIf,mBAAJ,EAAN;AACH","file":"interfaces.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {_} from 'lodash';\nimport {Args} from '@themost/common/utils';\nimport {AbstractMethodError,AbstractClassError} from '@themost/common/errors';\n\nconst applicationProperty = Symbol('application');\n/**\n * @classdesc An abstract class which represents an HTTP application service\n * @class\n *\n */\nexport class HttpApplicationService {\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n        Args.check(new.target !== HttpApplicationService, new AbstractClassError());\n        Args.notNull(app, 'HTTP Application');\n        this[applicationProperty] = app;\n    }\n    /**\n     * @returns {HttpApplication}\n     */\n    getApplication() {\n        return this[applicationProperty];\n    }\n}\n\nconst contextProperty = Symbol('context');\n\n/**\n * @classdesc An abstract class which represents an HTTP application service\n * @class\n *\n */\nexport class HttpViewEngine {\n    /**\n     * @param {HttpContext} context\n     */\n    constructor(context) {\n        Args.check(new.target !== HttpViewEngine, new AbstractClassError());\n        Args.notNull(context, 'HTTP context');\n        this[contextProperty] = context;\n    }\n    /**\n     * @returns {HttpContext}\n     */\n    getContext() {\n        return this[contextProperty];\n    }\n\n    /**\n     * Renders the specified view with the options provided\n     * @param {string} url\n     * @param {*} options\n     * @param {Function} callback\n     */\n    render(url, options, callback) {\n        throw new AbstractMethodError();\n    }\n\n}"]}