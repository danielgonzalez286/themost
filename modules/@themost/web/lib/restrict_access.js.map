{"version":3,"sources":["restrict_access.es6"],"names":["HttpUnauthorizedError","HttpBadRequestError","TraceUtils","HttpApplicationService","HttpNextResult","HttpConsumer","_","Rx","url","LocationSetting","applicationProperty","Symbol","RestrictAccessService","app","requestURL","isNil","Observable","of","uri","parse","conf","getApplication","getConfiguration","isObject","settings","auth","isArray","locations","i","length","location","test","path","pathname","indexOf","replace","allow","err","isNotRestricted","flatMap","res","RestrictHandler","context","callback","is","user","name","svc","getService","isRestricted","request","subscribe","log","e","RestrictAccessConsumer","handler","bindNodeCallback","authorizeRequest","create","toObservable"],"mappings":"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","file":"restrict_access.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {HttpUnauthorizedError,HttpBadRequestError} from '@themost/common/errors';\nimport {TraceUtils} from '@themost/common/utils';\nimport {HttpApplicationService} from './interfaces';\nimport {HttpNextResult} from './results';\nimport {HttpConsumer} from './consumers';\nimport {_} from 'lodash';\nimport Rx from 'rxjs';\nimport url from 'url';\n/**\n * @class\n * @property {string} description - Gets or sets a string that represents the description of this object\n * @property {*} path - Gets or sets a string that represents the target path associated with access settings.\n * @property {string} allow - Gets or sets a comma delimited string that represents the collection of users or groups where this access setting will be applied. A wildcard (*) may be used.\n * @property {string} deny - Gets or sets a string that represents the collection of users or groups where this access setting will be applied. A wildcard (*) may be used.\n */\nclass LocationSetting {\n    constructor() {\n        //\n    }\n}\n\nconst applicationProperty = Symbol('application');\n\n\n/**\n * @class\n */\nexport class RestrictAccessService extends HttpApplicationService{\n    /**\n     * @param {HttpApplication} app\n     */\n    constructor(app) {\n       super(app);\n    }\n\n    /**\n     * @param {string} requestURL\n     * @returns {Observable}\n     */\n    isNotRestricted(requestURL) {\n       try {\n           if (_.isNil(requestURL)) {\n               return Rx.Observable.of(true);\n           }\n           const uri = url.parse(requestURL);\n           const conf = this.getApplication().getConfiguration();\n           if (_.isObject(conf.settings)\n               && _.isObject(conf.settings.auth)\n               && _.isArray(conf.settings.auth.locations)) {\n               /**\n                * @type {Array}\n                */\n               const locations = conf.settings.auth.locations;\n               for (let i = 0; i < locations.length; i++) {\n                   /**\n                    * @type {*|LocationSetting}\n                    */\n                   const location = locations[i];\n                   if (/\\*$/.test(location.path)) {\n                       //wildcard search /something/*\n                       if ((uri.pathname.indexOf(location.path.replace(/\\*$/,''))==0) && (location.allow=='*')) {\n                           return Rx.Observable.of(true);\n                       }\n                   }\n                   else {\n                       if ((uri.pathname===location.path) && (location.allow=='*')) {\n                           return Rx.Observable.of(true);\n                       }\n                   }\n               }\n               return Rx.Observable.of(false);\n           }\n           return Rx.Observable.of(true);\n       }\n       catch(err) {\n           return Rx.Observable['throw'](err);\n       }\n    }\n    /**\n     * @param {string} requestURL\n     * @returns {Observable}\n     */\n    isRestricted(requestURL) {\n        return this.isNotRestricted(requestURL).flatMap((res)=> {\n           return Rx.Observable.of(!res);\n        });\n    }\n}\n\n/**\n * @class\n * @augments HttpHandler\n */\nclass RestrictHandler {\n    /**\n     * Authenticates an HTTP request and sets user or anonymous identity.\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    authorizeRequest(context, callback) {\n        try {\n            if (context.is('OPTIONS')) { return callback(); }\n            if (context.user.name=='anonymous')\n            {\n                /**\n                 * @type RestrictAccessService;\n                 */\n                const svc = context.getApplication().getService(RestrictAccessService);\n                if (_.isNil(svc)) {\n                    return callback();\n                }\n                svc.isRestricted(context.request.url).subscribe((res)=> {\n                    if (res) {\n                        return callback(new HttpUnauthorizedError());\n                    }\n                    return callback();\n                }, (err)=> {\n                    TraceUtils.log(err);\n                    return callback(new HttpUnauthorizedError());\n                });\n            }\n            else {\n                callback();\n            }\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n}\n\nexport class RestrictAccessConsumer extends HttpConsumer {\n    constructor() {\n        super(function() {\n            /**\n             * @type {HttpContext}\n             */\n            const context = this;\n            try {\n                let handler = new RestrictHandler();\n                return Rx.Observable.bindNodeCallback(handler.authorizeRequest)(context)\n                    .flatMap(()=> {\n                        return HttpNextResult.create().toObservable();\n                    });\n            }\n            catch(err) {\n                return Rx.Observable['throw'](err);\n            }\n        });\n    }\n}"]}