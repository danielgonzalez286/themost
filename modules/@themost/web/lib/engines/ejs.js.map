{"version":3,"sources":["ejs.es6"],"names":["HttpViewContext","HttpNotFoundError","LangUtils","_","ejs","path","fs","HttpViewEngine","contextProperty","Symbol","EjsEngine","context","name","fn","filters","filename","data","callback","self","readFile","err","str","code","matcher","properties","test","matches","exec","JSON","parse","replace","viewContext","getContext","assign","partial","request","route","parseBoolean","layout","getApplication","mapExecutionPath","resolve","body","render","layoutData","result","e","call"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;;;AACA;;AACA;;IAAQA,e,QAAAA,e;;AACR;;IAAQC,iB,WAAAA,iB;;AACR;;IAAQC,S,UAAAA,S;;AACR;;IAAQC,C,WAAAA,C;;AACR;;IAAOC,G;;AACP;;IAAOC,I;;AACP;;IAAOC,E;;AACP;;IAAQC,c,eAAAA,c;;;;;;;;;;AAER,IAAMC,kBAAkBC,OAAO,SAAP,CAAxB;;AAEA;;;;IAGqBC,S;;;AACjB;;;;AAIA,uBAAYC,OAAZ,EAAqB;AAAA;;AAAA,qHACXA,OADW;AAEpB;;AAED;;;;;;;;;+BAKOC,I,EAAMC,E,EAAI;AACbT,gBAAIU,OAAJ,CAAYF,IAAZ,IAAoBC,EAApB;AACH;;AAED;;;;;;;;;+BAMOE,Q,EAAUC,I,EAAMC,Q,EAAU;AAC7B,gBAAMC,OAAO,IAAb;AACA,gBAAI;AACAZ,mBAAGa,QAAH,CAAYJ,QAAZ,EAAqB,OAArB,EAA8B,UAASK,GAAT,EAAcC,GAAd,EAAmB;AAC7C,wBAAI;AACA,4BAAID,GAAJ,EAAS;AACL,gCAAIA,IAAIE,IAAJ,KAAa,QAAjB,EAA2B;AACvB;AACA,uCAAOL,SAAS,IAAIhB,iBAAJ,CAAsB,8BAAtB,CAAT,CAAP;AACH;AACD,mCAAOgB,SAASG,GAAT,CAAP;AACH,yBAND,MAOK;AAAA;AACD;AACA,oCAAMG,UAAU,kBAAhB;AACA;;;;AAIA,oCAAIC,aAAa,EAAjB;AACA,oCAAID,QAAQE,IAAR,CAAaJ,GAAb,CAAJ,EAAuB;AACnB,wCAAMK,UAAUH,QAAQI,IAAR,CAAaN,GAAb,CAAhB;AACAG,iDAAaI,KAAKC,KAAL,CAAWH,QAAQ,CAAR,CAAX,CAAb;AACA;AACAL,0CAAMA,IAAIS,OAAJ,CAAYP,OAAZ,EAAoB,EAApB,CAAN;AACH;AACD;AACA,oCAAMQ,cAAc,IAAI/B,eAAJ,CAAoBkB,KAAKc,UAAL,EAApB,CAApB;AACA;AACA7B,kCAAE8B,MAAF,CAASF,WAAT,EAAsBP,cAAc,EAApC;AACA;AACAO,4CAAYf,IAAZ,GAAmBA,IAAnB;AACA,oCAAIkB,UAAU,KAAd;AACA,oCAAIhB,KAAKc,UAAL,MAAqBd,KAAKc,UAAL,GAAkBG,OAAlB,CAA0BC,KAAnD,EACIF,UAAUhC,UAAUmC,YAAV,CAAuBnB,KAAKc,UAAL,GAAkBG,OAAlB,CAA0BC,KAA1B,CAAgC,SAAhC,CAAvB,CAAV;AACJ,oCAAIZ,WAAWc,MAAX,IAAqB,CAACJ,OAA1B,EAAmC;AAC/B,wCAAII,eAAJ;AACA,wCAAI,MAAMb,IAAN,CAAWD,WAAWc,MAAtB,CAAJ,EAAmC;AAC/B;AACAA,iDAASpB,KAAKc,UAAL,GAAkBO,cAAlB,GAAmCC,gBAAnC,CAAoDhB,WAAWc,MAA/D,CAAT;AACH,qCAHD,MAIK;AACD;AACAA,iDAASjC,KAAKoC,OAAL,CAAa1B,QAAb,EAAuBS,WAAWc,MAAlC,CAAT;AACH;AACD;AACAP,gDAAYW,IAAZ,GAAmBtC,IAAIuC,MAAJ,CAAWtB,GAAX,EAAgBU,WAAhB,CAAnB;AACA;AACAzB,uCAAGa,QAAH,CAAYmB,MAAZ,EAAmB,OAAnB,EAA4B,UAASlB,GAAT,EAAcwB,UAAd,EAA0B;AAClD,4CAAI;AACA,gDAAIxB,GAAJ,EAAS;AACL,oDAAIA,IAAIE,IAAJ,KAAa,QAAjB,EAA2B;AACvB,2DAAOL,SAAS,IAAIhB,iBAAJ,CAAsB,oCAAtB,CAAT,CAAP;AACH;AACD,uDAAOgB,SAASG,GAAT,CAAP;AACH;AACD,gDAAMyB,SAASzC,IAAIuC,MAAJ,CAAWC,UAAX,EAAuBb,WAAvB,CAAf;AACAd,qDAAS,IAAT,EAAe4B,MAAf;AACH,yCATD,CAUA,OAAOC,CAAP,EAAU;AACN7B,qDAAS6B,CAAT;AACH;AACJ,qCAdD;AAeH,iCA5BD,MA6BK;AACD,wCAAMD,SAASzC,IAAIuC,MAAJ,CAAWtB,GAAX,EAAgBU,WAAhB,CAAf;AACAd,6CAAS,IAAT,EAAe4B,MAAf;AACH;AAvDA;AAwDJ;AACJ,qBAjED,CAkEA,OAAOC,CAAP,EAAU;AACN7B,iCAAS6B,CAAT;AACH;AACJ,iBAtED;AAwEH,aAzED,CA0EA,OAAOA,CAAP,EAAU;AACN7B,yBAAS8B,IAAT,CAAc7B,IAAd,EAAoB4B,CAApB;AACH;AACJ;;;;EAvGkCvC,c;;kBAAlBG,S","file":"ejs.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport 'source-map-support/register';\nimport {HttpViewContext} from './../mvc';\nimport {HttpNotFoundError} from '@themost/common/errors';\nimport {LangUtils} from '@themost/common/utils';\nimport {_} from 'lodash';\nimport ejs from 'ejs';\nimport path from 'path';\nimport fs from 'fs';\nimport {HttpViewEngine} from \"../interfaces\";\n\nconst contextProperty = Symbol('context');\n\n/**\n * @class\n */\nexport default class EjsEngine extends HttpViewEngine {\n    /**\n     *\n     * @param {HttpContext} context\n     */\n    constructor(context) {\n        super(context);\n    }\n\n    /**\n     * Adds a EJS filter to filters collection.\n     * @param {string} name\n     * @param {Function} fn\n     */\n    filter(name, fn) {\n        ejs.filters[name] = fn;\n    }\n\n    /**\n     *\n     * @param {string} filename\n     * @param {*=} data\n     * @param {Function} callback\n     */\n    render(filename, data, callback) {\n        const self = this;\n        try {\n            fs.readFile(filename,'utf-8', function(err, str) {\n                try {\n                    if (err) {\n                        if (err.code === 'ENOENT') {\n                            //throw not found exception\n                            return callback(new HttpNotFoundError('View layout cannot be found.'));\n                        }\n                        return callback(err);\n                    }\n                    else {\n                        //get view header (if any)\n                        const matcher = /^(\\s*)<%#(.*?)%>/;\n                        /**\n                         *\n                         * @type {{layout:string}}\n                         */\n                        let properties = { };\n                        if (matcher.test(str)) {\n                            const matches = matcher.exec(str);\n                            properties = JSON.parse(matches[2]);\n                            //remove match\n                            str = str.replace(matcher,'');\n                        }\n                        //create view context\n                        const viewContext = new HttpViewContext(self.getContext());\n                        //extend view context with page properties\n                        _.assign(viewContext, properties || {});\n                        //set view context data\n                        viewContext.data = data;\n                        let partial = false;\n                        if (self.getContext() && self.getContext().request.route)\n                            partial = LangUtils.parseBoolean(self.getContext().request.route['partial']);\n                        if (properties.layout && !partial) {\n                            let layout;\n                            if (/^\\//.test(properties.layout)) {\n                                //relative to application folder e.g. /views/shared/master.html.ejs\n                                layout = self.getContext().getApplication().mapExecutionPath(properties.layout);\n                            }\n                            else {\n                                //relative to view file path e.g. ./../master.html.html.ejs\n                                layout = path.resolve(filename, properties.layout);\n                            }\n                            //set current view buffer (after rendering)\n                            viewContext.body = ejs.render(str, viewContext);\n                            //render master layout\n                            fs.readFile(layout,'utf-8', function(err, layoutData) {\n                                try {\n                                    if (err) {\n                                        if (err.code === 'ENOENT') {\n                                            return callback(new HttpNotFoundError('Master view layout cannot be found'));\n                                        }\n                                        return callback(err);\n                                    }\n                                    const result = ejs.render(layoutData, viewContext);\n                                    callback(null, result);\n                                }\n                                catch (e) {\n                                    callback(e);\n                                }\n                            });\n                        }\n                        else {\n                            const result = ejs.render(str, viewContext);\n                            callback(null, result);\n                        }\n                    }\n                }\n                catch (e) {\n                    callback(e);\n                }\n            });\n\n        }\n        catch (e) {\n            callback.call(self, e);\n        }\n    }\n}\n"]}