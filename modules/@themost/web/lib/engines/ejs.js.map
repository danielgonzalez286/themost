{"version":3,"sources":["ejs.es6"],"names":["HttpViewContext","HttpNotFoundError","LangUtils","_","ejs","path","EjsEngine","context","ctx","Object","defineProperty","get","set","value","configurable","enumerable","name","fn","filters","filename","data","callback","self","fs","require","common","readFile","err","str","code","matcher","properties","layout","test","matches","exec","JSON","parse","replace","viewContext","assign","partial","request","route","parseBoolean","application","mapPath","resolve","body","render","layoutData","result","e","call"],"mappings":"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","file":"ejs.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {HttpViewContext} from './../mvc';\nimport {HttpNotFoundError} from '@themost/common/errors';\nimport {LangUtils} from '@themost/common/utils';\nimport {_} from 'lodash';\nimport ejs from 'ejs';\nimport path from 'path';\n\n\n/**\n * @class\n * @param {HttpContext=} context\n * @constructor\n * @property {HttpContext} context Gets or sets an instance of HttpContext that represents the current HTTP context.\n */\nexport default class EjsEngine {\n    /**\n     *\n     * @param {HttpContext} context\n     */\n    constructor(context) {\n        /**\n         * @type {HttpContext}\n         */\n        let ctx = context;\n        Object.defineProperty(this,'context', {\n            get: function() {\n                return ctx;\n            },\n            set: function(value) {\n                ctx = value;\n            },\n            configurable:false,\n            enumerable:false\n        });\n\n    }\n\n    /**\n     * Adds a EJS filter to filters collection.\n     * @param {string} name\n     * @param {Function} fn\n     */\n    filter(name, fn) {\n        ejs.filters[name] = fn;\n    }\n\n    /**\n     *\n     * @param {string} filename\n     * @param {*=} data\n     * @param {Function} callback\n     */\n    render(filename, data, callback) {\n        const self = this;\n        try {\n            const fs = require('fs'), common = require('@themost/common');\n            fs.readFile(filename,'utf-8', function(err, str) {\n                try {\n                    if (err) {\n                        if (err.code === 'ENOENT') {\n                            //throw not found exception\n                            return callback(new HttpNotFoundError('View layout cannot be found.'));\n                        }\n                        return callback(err);\n                    }\n                    else {\n                        //get view header (if any)\n                        const matcher = /^(\\s*)<%#(.*?)%>/;\n                        let properties = { layout:null };\n                        if (matcher.test(str)) {\n                            const matches = matcher.exec(str);\n                            properties = JSON.parse(matches[2]);\n                            //remove match\n                            str = str.replace(matcher,'');\n                        }\n                        //create view context\n                        const viewContext = new HttpViewContext(self.context);\n                        //extend view context with page properties\n                        _.assign(viewContext, properties || {});\n                        //set view context data\n                        viewContext.data = data;\n                        let partial = false;\n                        if (self.context && self.context.request.route)\n                            partial = LangUtils.parseBoolean(self.context.request.route['partial']);\n                        if (properties.layout && !partial) {\n                            let layout;\n                            if (/^\\//.test(properties.layout)) {\n                                //relative to application folder e.g. /views/shared/master.html.ejs\n                                layout = self.context.application.mapPath(properties.layout);\n                            }\n                            else {\n                                //relative to view file path e.g. ./../master.html.html.ejs\n                                layout = path.resolve(filename, properties.layout);\n                            }\n                            //set current view buffer (after rendering)\n                            viewContext.body = ejs.render(str, viewContext);\n                            //render master layout\n                            fs.readFile(layout,'utf-8', function(err, layoutData) {\n                                try {\n                                    if (err) {\n                                        if (err.code === 'ENOENT') {\n                                            return callback(new HttpNotFoundError('Master view layout cannot be found'));\n                                        }\n                                        return callback(err);\n                                    }\n                                    const result = ejs.render(layoutData, viewContext);\n                                    callback(null, result);\n                                }\n                                catch (e) {\n                                    callback(e);\n                                }\n                            });\n                        }\n                        else {\n                            const result = ejs.render(str, viewContext);\n                            callback(null, result);\n                        }\n                    }\n                }\n                catch (e) {\n                    callback(e);\n                }\n            });\n\n        }\n        catch (e) {\n            callback.call(self, e);\n        }\n    }\n}\n"]}