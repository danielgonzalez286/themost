{"version":3,"sources":["mvc.es6"],"names":["_","Rx","fs","util","path","crypto","async","xml","HttpNotFoundError","HttpForbiddenError","HttpError","HtmlWriter","HttpAnyResult","HttpContentResult","content","data","contentType","contentEncoding","HttpEmptyResult","context","callback","response","writeHead","_json_ignore_null_replacer","key","value","undefined","HttpJsonResult","String","JSON","stringify","HttpJavascriptResult","HttpXmlResult","serialize","outerXML","HttpRedirectResult","url","call","HttpFileResult","physicalPath","fileName","exists","stat","err","stats","isFile","requestETag","request","headers","md5","createHash","update","mtime","toString","responseETag","digest","end","extensionName","extname","mimes","getApplication","config","mime","filter","x","extension","type","encoding","isNil","source","createReadStream","pipe","on","e","queryDefaultViewPath","controller","view","queryAbsoluteViewPath","mapExecutionPath","querySharedViewPath","search","result","resolve","format","capitalizedController","charAt","toUpperCase","substring","isAbsolute","p","normalize","HttpViewResult","name","s","self","require","routeData","routePath","route","viewName","test","substr","replace","partial","controllerName","viewPath","viewEngine","eachSeries","getConfiguration","engines","engine","cb","searchViewName","join","EngineCtor","ReferenceError","engineInstance","target","emit","render","write","er","resource","HttpController","toObservable","fn","Error","obj","length","concat","Date","valueOf","prototype","htm","html","HttpViewEngine","new","TypeError","options","HttpViewContext","body","title","layout","writer","Object","defineProperty","get","indent","configurable","enumerable","params","model","HtmlViewHelper","init","requestCookie","getHeader","cookie","application","executeRequest","lib","translate","$view","doc","antiforgery","encrypt","id","Math","floor","random","date","setHeader","writeAttribute","writeFullBeginTag","element","document","parentWindow","angular","lang","c","culture","toLowerCase","parent"],"mappings":"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","file":"mvc.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport {_} from 'lodash';\nimport Rx from 'rx';\nimport fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport crypto from 'crypto';\nimport async from 'async';\nimport xml from 'most-xml';\nimport {HttpNotFoundError,HttpForbiddenError,HttpError} from '@themost/common/errors';\nimport {HtmlWriter} from '@themost/common/html';\nimport {HttpAnyResult} from \"./results\";\n\n/**\n * @classdesc Represents a user-defined HTTP content result, typically an HTML or XML string.\n * @class\n * @augments HttpAnyResult\n * */\nexport class HttpContentResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string} content\n     */\n    constructor(content) {\n        super();\n        this.data = content;\n        this.contentType = 'text/html';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an empty HTTP result.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpEmptyResult extends HttpAnyResult {\n    execute(context, callback) {\n        //do nothing\n        context.response.writeHead(204);\n        callback();\n    }\n}\n\n/**\n * @param {string} key\n * @param {*} value\n * @returns {*}\n * @private\n */\nfunction _json_ignore_null_replacer(key, value) {\n    if (value==null)\n        return undefined;\n    return value;\n}\n\n/**\n * @classdesc Represents an action that is used to send JSON-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJsonResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (data instanceof String)\n            this.data = data;\n        else {\n            this.data = JSON.stringify(data, _json_ignore_null_replacer);\n        }\n\n        this.contentType = 'application/json;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send Javascript-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJavascriptResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (typeof data === 'string')\n            this.data = data;\n        this.contentType = 'text/javascript;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send XML-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpXmlResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        this.contentType = 'text/xml';\n        this.contentEncoding = 'utf8';\n        if (typeof data === 'undefined' || data == null)\n            return;\n        if (typeof data === 'object')\n            this.data= xml.serialize(data).outerXML();\n        else\n            this.data=data;\n    }\n}\n\n/**\n * @classdesc Represents a redirect action to a specified URI.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpRedirectResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string|*} url\n     */\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    execute(context, callback) {\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        response.writeHead(302, { 'Location': this.url });\n        //response.end();\n        callback.call(context);\n    }\n}\n\n/**\n * @classdesc Represents a static file result\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpFileResult extends HttpAnyResult {\n    /**\n     *\n     * @constructor\n     * @param {string} physicalPath\n     * @param {string=} fileName\n     */\n    constructor(physicalPath, fileName) {\n        super();\n        this.physicalPath = physicalPath;\n        this.fileName = fileName;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    execute(context, callback) {\n        callback = callback || function() {};\n        const physicalPath = this.physicalPath,\n            fileName = this.fileName;\n        fs.exists(physicalPath, function(exists) {\n            if (!exists) {\n                callback(new HttpNotFoundError());\n            }\n            else {\n                try {\n                    fs.stat(physicalPath, function (err, stats) {\n                        if (err) {\n                            callback(err);\n                        }\n                        else {\n                            if (!stats.isFile()) {\n                                callback(new HttpNotFoundError());\n                            }\n                            else {\n                                //get if-none-match header\n                                const requestETag = context.request.headers['if-none-match'];\n                                //generate responseETag\n                                const md5 = crypto.createHash('md5');\n                                md5.update(stats.mtime.toString());\n                                const responseETag = md5.digest('base64');\n                                if (requestETag) {\n                                    if (requestETag == responseETag) {\n                                        context.response.writeHead(304);\n                                        context.response.end();\n                                        callback();\n                                        return;\n                                    }\n                                }\n                                let contentType = null;\n                                //get file extension\n                                const extensionName = path.extname(fileName || physicalPath);\n                                //get MIME collection\n                                const mimes = context.getApplication().config.mimes;\n                                let contentEncoding = null;\n                                //find MIME type by extension\n                                const mime = mimes.filter(function (x) {\n                                    return x.extension == extensionName;\n                                })[0];\n                                if (mime) {\n                                    contentType = mime.type;\n                                    if (mime.encoding)\n                                        contentEncoding = mime.encoding;\n                                }\n\n                                //throw exception (MIME not found or access denied)\n                                if (_.isNil(contentType)) {\n                                    callback(new HttpForbiddenError())\n                                }\n                                else {\n                                    //create read stream\n                                    const source = fs.createReadStream(physicalPath);\n                                    //add Content-Disposition: attachment; filename=\"<file name.ext>\"\n                                    context.response.writeHead(200, {\n                                        'Content-Type': contentType + (contentEncoding ? ';charset=' + contentEncoding : ''),\n                                        'ETag': responseETag\n                                    });\n                                    //copy file\n                                    source.pipe(context.response);\n                                    source.on('end', function() {\n                                        callback();\n                                    });\n                                    source.on('error', function(err) {\n                                        callback(err);\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n                catch (e) {\n                    callback(e);\n                }\n            }\n        });\n\n    }\n}\n\n/**\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction queryDefaultViewPath(controller, view, extension, callback) {\n   return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), controller, view, extension, callback);\n}\n/**\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction querySharedViewPath(view, extension, callback) {\n    return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), 'shared', view, extension, callback);\n}\n\n/**\n * @param search\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @private\n */\nfunction queryAbsoluteViewPath(search, controller, view, extension, callback) {\n    let result = path.resolve(search, util.format('%s/%s.html.%s', controller, view, extension));\n    fs.exists(result, function(exists) {\n        if (exists)\n            return callback(null, result);\n        //search for capitalized controller name e.g. person as Person\n        const capitalizedController = controller.charAt(0).toUpperCase() + controller.substring(1);\n        result = path.resolve(search, util.format('%s/%s.html.%s', capitalizedController, view, extension));\n        fs.exists(result, function(exists) {\n            if (exists)\n                return callback(null, result);\n            callback();\n        });\n    });\n}\n/**\n * @param {string} p\n * @returns {boolean}\n * @private\n */\nfunction isAbsolute(p) {\n    //var re = new RegExp('^' + p, 'i');\n    //return re.test(path.resolve(process.cwd(), p));\n    return path.normalize(p + '/') === path.normalize(path.resolve(p) + '/');\n}\n\n/**\n * Represents a class that is used to render a view.\n * @class\n * @param {string=} name - The name of the view.\n * @param {Array=} data - The data that are going to be used to render the view.\n * @augments HttpAnyResult\n */\nexport class HttpViewResult extends HttpAnyResult {\n    constructor(name, data) {\n        super();\n        this.name = name;\n        this.data = data==undefined? []: data;\n        this.contentType = 'text/html;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * Sets or changes the name of this HttpViewResult instance.\n     * @param {string} s\n     * @returns {HttpViewResult}\n     */\n    setName(s) {\n        this.name = s;\n        return this;\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     * */\n    execute(context, callback) {\n        const self = this;\n        callback = callback || function() {};\n        const util = require('util'), fs = require('fs');\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        //if the name is not defined get the action name of the current controller\n        if (!this.name)\n            //get action name\n            this.name = context.request.routeData['action'];\n        //validate [path] route param in order to load a view that is located in a views' sub-directory (or in another absolute path)\n        let routePath;\n        if (context.request.route) {\n            routePath =  context.request.route.path;\n        }\n        //get view name\n        let viewName = this.name;\n        if (/^partial/.test(viewName)) {\n            //partial view\n            viewName = viewName.substr(7).replace(/^-/,'');\n            context.request.route.partial = true;\n        }\n\n        //and of course controller's name\n        const controllerName = context.request.routeData['controller'];\n        //enumerate existing view engines e.g /views/controller/index.[html].ejs or /views/controller/index.[html].xform etc.\n        /**\n         * {HttpViewEngineReference|*}\n         */\n        let viewPath, viewEngine;\n        async.eachSeries(context.getApplication().getConfiguration().engines, function(engine, cb) {\n            if (viewPath) { cb(); return; }\n            if (routePath && isAbsolute(routePath)) {\n                queryAbsoluteViewPath.call(context, routePath, controllerName, viewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        return cb();\n                    }\n                });\n            }\n            else {\n                let searchViewName = viewName;\n                if (routePath) {\n                    searchViewName = path.join(routePath, viewName);\n                }\n                //search by relative path\n                queryDefaultViewPath.call(context, controllerName, searchViewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        querySharedViewPath.call(context, searchViewName, engine.extension, function(err, result) {\n                            if (err) { return cb(err); }\n                            if (result) {\n                                viewPath = result;\n                                viewEngine = engine;\n                                return cb();\n                            }\n                            cb();\n                        });\n                    }\n                });\n            }\n\n        }, function(err) {\n            if (err) { callback(err); return; }\n            if (viewEngine) {\n                let EngineCtor = require(viewEngine.type);\n                if (typeof EngineCtor !== 'function') {\n                    return callback(new ReferenceError(util.format('The specified engine %s module does not export default class', viewEngine.type)));\n                }\n                /**\n                 * @type {HttpViewEngine|*}\n                 */\n                const engineInstance = new EngineCtor(context);\n                //render\n                const e = { context:context, target:self };\n                context.emit('preExecuteResult', e, function(err) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        engineInstance.render(viewPath, self.data, function(err, result) {\n                            if (err) {\n                                callback.call(context, err);\n                            }\n                            else {\n                                //HttpViewResult.result or data (?)\n                                self.result = result;\n                                context.emit('postExecuteResult', e, function(err) {\n                                    if (err) {\n                                        callback.call(context, err);\n                                    }\n                                    else {\n                                        response.writeHead(200, {\"Content-Type\": self.contentType});\n                                        response.write(self.result, self.contentEncoding);\n                                        callback.call(context);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n\n            }\n            else {\n                const er = new HttpNotFoundError();\n                if (context.request && context.request.url) {\n                    er.resource = context.request.url;\n                }\n                callback.call(context, er);\n            }\n        });\n\n\n\n\n    }\n}\n\n/**\n * @classdesc Provides methods that respond to HTTP requests that are made to a web application\n * @class\n * @constructor\n * @param {HttpContext} context - The executing HTTP context.\n * @property {HttpContext} context - Gets or sets the HTTP context associated with this controller\n * @property {string} name - Gets or sets the internal name for this controller\n * */\nexport class HttpController {\n    constructor(context) {\n        this.context = context;\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns {Observable}\n     */\n    view(data) {\n        return (new HttpViewResult(null, data)).toObservable();\n    }\n\n    /**\n     * Creates a view result based on the context content type\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    result(data) {\n        if (this.context) {\n             const fn = this[this.context.format];\n            if (typeof fn !== 'function')\n                throw new HttpError(400,'Not implemented.');\n            return fn.call(this, data);\n        }\n        else\n            throw new Error('Http context cannot be empty at this context.');\n    }\n\n    forbidden(callback) {\n        callback(new HttpForbiddenError());\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    html(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    htm(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {String=} data\n     * @returns HttpJavascriptResult\n     * */\n    js(data) {\n        return new HttpJavascriptResult(data);\n    }\n\n    /**\n     * Creates a view result object that represents a client javascript object.\n     * This result may be used for sharing specific objects stored in memory or server filesystem\n     * e.g. serve a *.json file as a client variable with name window.myVar1 or\n     * serve user settings object ({ culture: 'en-US', notifyMe: false}) as a variable with name window.settings\n     * @param {String} name\n     * @param {String|*} obj\n     * @returns HttpAnyResult\n     * */\n    jsvar(name, obj) {\n        if (typeof name !== 'string')\n            return new HttpEmptyResult();\n        if (name.length==0)\n            return new HttpEmptyResult();\n        if (typeof obj === 'undefined' || obj == null)\n            return new HttpJavascriptResult(name.concat(' = null;'));\n        else if (obj instanceof Date)\n            return new HttpJavascriptResult(name.concat(' = new Date(', obj.valueOf(), ');'));\n        else if (typeof obj === 'string')\n            return new HttpJavascriptResult(name.concat(' = ', obj, ';'));\n        else\n            return new HttpJavascriptResult(name.concat(' = ', JSON.stringify(obj), ';'));\n    }\n\n    /**\n     * Invokes a default action and returns an HttpViewResult instance\n     * @returns {Observable}\n     */\n    action() {\n        return this.view();\n    }\n\n    /**\n     * Creates a content result object by using a string.\n     * @returns HttpContentResult\n     * */\n    content(content) {\n         return new HttpContentResult(content);\n    }\n\n    /**\n     * Creates a JSON result object by using the specified data.\n     * @returns HttpJsonResult\n     * */\n    json(data) {\n        return new HttpJsonResult(data);\n    }\n\n    /**\n     * Creates a XML result object by using the specified data.\n     * @returns HttpXmlResult\n     * */\n    xml(data) {\n        return new HttpXmlResult(data);\n    }\n\n    /**\n     * Creates a binary file result object by using the specified path.\n     * @param {string}  physicalPath\n     * @param {string=}  fileName\n     * @returns {HttpFileResult|HttpAnyResult}\n     * */\n    file(physicalPath, fileName) {\n        return new HttpFileResult(physicalPath, fileName);\n    }\n\n    /**\n     * Creates a redirect result object that redirects to the specified URL.\n     * @returns HttpRedirectResult\n     * */\n    redirect(url) {\n        return new HttpRedirectResult(url);\n    }\n\n    /**\n     * Creates an empty result object.\n     * @returns HttpEmptyResult\n     * */\n    empty() {\n        return new HttpEmptyResult();\n    }\n}\n\n/**\n * Creates a view result object for the given request.\n * @param {*=} data\n * @returns HttpViewResult\n * */\nHttpController.prototype.htm = HttpController.prototype.html;\n\n/**\n * @classdesc An abstract class which represents a view engine\n * @abstract\n * @class\n * @property {HttpContext} context\n * @augments {EventEmitter}\n */\nexport class HttpViewEngine {\n\n    /**\n     * @constructor\n     * @param {HttpContext=} context\n     */\n    constructor(context) {\n        if (new.target === HttpViewEngine) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n        this.context = context;\n    }\n\n    /**\n     * Renders the specified view with the options provided\n     * @param {string} url\n     * @param {*} options\n     * @param {Function} callback\n     */\n    render(url, options, callback) {\n        //\n    }\n}\n\n/**\n * Encapsulates information that is related to rendering a view.\n * @class\n * @param {HttpContext} context\n * @property {DataModel} model\n * @property {HtmlViewHelper} html\n * @constructor\n * @augments {EventEmitter}\n */\nexport class HttpViewContext {\n    constructor(context) {\n        /**\n         * Gets or sets the body of the current view\n         * @type {String}\n         */\n        this.body='';\n        /**\n         * Gets or sets the title of the page if the view will be fully rendered\n         * @type {String}\n         */\n        this.title='';\n        /**\n         * Gets or sets the view layout page if the view will be fully rendered\n         * @type {String}\n         */\n        this.layout = null;\n        /**\n         * Gets or sets the view data\n         * @type {String}\n         */\n        this.data = null;\n        /**\n         * Represents the current HTTP context\n         * @type {HttpContext}\n         */\n        this.context = context;\n\n        /**\n         * @type {HtmlWriter}\n         */\n        this.writer = undefined;\n\n        let writer = null;\n        Object.defineProperty(this, 'writer', {\n            get:function() {\n                if (writer)\n                    return writer;\n                writer = new HtmlWriter();\n                writer.indent = false;\n                return writer;\n            }, configurable:false, enumerable:false\n        });\n\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get:function() {\n                if (self.context.params)\n                    if (self.context.params.controller)\n                        return self.context.model(self.context.params.controller);\n                return null;\n            }, configurable:false, enumerable:false\n        });\n\n        this.html = new HtmlViewHelper(this);\n        //class extension initiators\n        if (typeof this.init === 'function') {\n            //call init() method\n            this.init();\n        }\n    }\n\n    /**\n     * @param {string} url\n     * @param {Function} callback\n     * @returns {string}\n     */\n    render(url, callback) {\n        callback = callback || function() {};\n        //get response cookie, if any\n        let requestCookie = this.context.response.getHeader('set-cookie');\n        if (typeof this.context.request.headers.cookie !== 'undefined')\n            requestCookie = this.context.request.headers.cookie;\n        this.context.application.executeRequest( { url: url, cookie: requestCookie }, function(err, result) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                callback(null, result.body);\n            }\n        });\n    }\n\n    init() {\n        //\n    }\n\n    /**\n     *\n     * @param {String} s\n     * @param {String=} lib\n     * @returns {String}\n     */\n    translate(s, lib) {\n        return this.context.translate(s, lib);\n    }\n\n    /**\n     * @param {HttpViewContext} $view\n     * @returns {*}\n     * @private\n     */\n    static HtmlViewHelper($view) {\n        let doc;\n        return {\n        antiforgery: function() {\n            //create token\n            const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n            //try to set cookie\n            context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n            return $view.writer.writeAttribute('type', 'hidden')\n                .writeAttribute('id', '_CSRFToken')\n                .writeAttribute('name', '_CSRFToken')\n                .writeAttribute('value', value)\n                .writeFullBeginTag('input')\n                .toString();\n        },\n        element: function(obj) {\n            if (typeof doc === 'undefined') { doc = $view.context.application.document(); }\n            return doc.parentWindow.angular.element(obj);\n        },\n        lang: function() {\n            const context = $view.context, c= context.culture();\n            if (typeof c === 'string') {\n                if (c.length>=2) {\n                    return c.toLowerCase().substring(0,2);\n                }\n            }\n            //in all cases return default culture\n            return 'en';\n        }\n    };\n    }\n}\n\n/**\n * @classdesc A helper class for an instance of HttpViewContext class\n * @class\n * @property {HttpViewContext} parent - The parent HTTP View Context\n * @property {HTMLDocument|*} document - The in-process HTML Document\n */\nexport class HtmlViewHelper {\n    /**\n     * @constructor\n     * @param {HttpViewContext} view\n     */\n    constructor(view) {\n        let document;\n        const self = this;\n        Object.defineProperty(this, 'parent', {\n            get: function() {\n                return view;\n            } , configurable:false, enumerable:false\n        });\n        Object.defineProperty(this, 'document', {\n            get: function() {\n                if (typeof document !== 'undefined') { return document; }\n                document = self.view.context.application.document();\n                return document;\n            } , configurable:false, enumerable:false\n        });\n    }\n\n    antiforgery() {\n        const $view = this.parent;\n        //create token\n        const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n        //try to set cookie\n        context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n        return $view.writer.writeAttribute('type', 'hidden')\n            .writeAttribute('id', '_CSRFToken')\n            .writeAttribute('name', '_CSRFToken')\n            .writeAttribute('value', value)\n            .writeFullBeginTag('input')\n            .toString();\n    }\n\n    element(obj) {\n        return this.document.parentWindow.angular.element(obj);\n    }\n\n    lang() {\n        const $view = this.parent;\n        const context = $view.context, c= context.culture();\n        if (typeof c === 'string') {\n            if (c.length>=2) {\n                return c.toLowerCase().substring(0,2);\n            }\n        }\n        //in all cases return default culture\n        return 'en';\n    }\n}\n\n\n\n\n"]}