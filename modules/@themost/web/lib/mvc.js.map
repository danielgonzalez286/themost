{"version":3,"sources":["mvc.es6"],"names":["_","Rx","fs","util","path","crypto","async","xml","HttpNotFoundError","HttpForbiddenError","HttpError","HtmlWriter","HttpAnyResult","HttpContentResult","content","contentType","contentEncoding","data","context","self","Observable","fromNodeCallback","callback","response","isNil","writeHead","write","err","HttpEmptyResult","return","_json_ignore_null_replacer","key","value","undefined","HttpJsonResult","String","JSON","stringify","HttpJavascriptResult","HttpXmlResult","serialize","outerXML","HttpRedirectResult","url","HttpFileResult","physicalPath","fileName","exists","stat","stats","isFile","requestETag","request","headers","md5","createHash","update","mtime","toString","responseETag","digest","end","extensionName","extname","mimes","getApplication","config","mime","filter","x","extension","type","encoding","source","createReadStream","pipe","on","e","queryDefaultViewPath","controller","view","queryAbsoluteViewPath","call","mapExecutionPath","querySharedViewPath","search","result","resolve","format","capitalizedController","charAt","toUpperCase","substring","isAbsolute","p","normalize","HttpViewResult","name","s","require","routeData","routePath","route","viewName","test","substr","replace","partial","controllerName","viewPath","viewEngine","eachSeries","getConfiguration","engines","engine","cb","searchViewName","join","EngineCtor","ReferenceError","engineInstance","target","emit","render","er","resource","HttpController","toObservable","obj","length","concat","Date","valueOf","prototype","htm","html","HttpViewEngine","new","TypeError","options","HttpViewContext","body","title","layout","writer","Object","defineProperty","get","indent","configurable","enumerable","params","model","HtmlViewHelper","init","requestCookie","getHeader","cookie","application","executeRequest","lib","translate","$view","doc","antiforgery","encrypt","id","Math","floor","random","date","setHeader","writeAttribute","writeFullBeginTag","element","document","parentWindow","angular","lang","c","culture","toLowerCase","parent"],"mappings":"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","file":"mvc.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport {_} from 'lodash';\nimport Rx from 'rx';\nimport fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport crypto from 'crypto';\nimport async from 'async';\nimport xml from 'most-xml';\nimport {HttpNotFoundError,HttpForbiddenError,HttpError} from '@themost/common/errors';\nimport {HtmlWriter} from '@themost/common/html';\nimport {HttpAnyResult} from \"./results\";\n\n/**\n * @classdesc Represents a user-defined HTTP content result, typically an HTML or XML string.\n * @class\n * @augments HttpAnyResult\n * */\nexport class HttpContentResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string} content\n     * @param {string=} contentType\n     * @param {string=} contentEncoding\n     */\n    constructor(content, contentType, contentEncoding) {\n        super();\n        this.data = content;\n        this.contentType = contentType || 'text/html';\n        this.contentEncoding = contentEncoding || 'utf8';\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     */\n    execute(context) {\n        const self = this;\n        return Rx.Observable.fromNodeCallback(function(callback) {\n            /**\n             * @type ServerResponse\n             * */\n            const response = context.response;\n            if (_.isNil(self.data)) {\n                response.writeHead(204);\n                return callback();\n            }\n            else {\n                response.writeHead(200, { 'Content-Type': self.contentType });\n                response.write(self.data,self.contentEncoding, function(err) {\n                   return callback(err);\n                });\n            }\n        })();\n    }\n\n}\n\n/**\n * @classdesc Represents an empty HTTP result.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpEmptyResult extends HttpAnyResult {\n    /**\n     * @param context\n     * @returns {Observable<T>|IteratorResult<T>|*}\n     */\n    execute(context) {\n        //do nothing\n        context.response.writeHead(204);\n        return Rx.Observable.return();\n    }\n}\n\n/**\n * @param {string} key\n * @param {*} value\n * @returns {*}\n * @private\n */\nfunction _json_ignore_null_replacer(key, value) {\n    if (value==null)\n        return undefined;\n    return value;\n}\n\n/**\n * @classdesc Represents an action that is used to send JSON-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJsonResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (data instanceof String)\n            this.data = data;\n        else {\n            this.data = JSON.stringify(data, _json_ignore_null_replacer);\n        }\n        this.contentType = 'application/json;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * @param context\n     * @returns {Observable<T>|IteratorResult<T>|*}\n     */\n    execute(context) {\n        //do nothing\n        context.response.writeHead(204);\n        return Rx.Observable.return();\n    }\n\n}\n\n/**\n * @classdesc Represents an action that is used to send Javascript-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpJavascriptResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        if (typeof data === 'string')\n            this.data = data;\n        this.contentType = 'text/javascript;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n}\n\n/**\n * @classdesc Represents an action that is used to send XML-formatted content.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpXmlResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        this.contentType = 'text/xml';\n        this.contentEncoding = 'utf8';\n        if (typeof data === 'undefined' || data == null)\n            return;\n        if (typeof data === 'object')\n            this.data= xml.serialize(data).outerXML();\n        else\n            this.data=data;\n    }\n}\n\n/**\n * @classdesc Represents a redirect action to a specified URI.\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpRedirectResult extends HttpAnyResult {\n    /**\n     * @constructor\n     * @param {string|*} url\n     */\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     */\n    execute(context) {\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        response.writeHead(302, { 'Location': this.url });\n        return Rx.Observable.return();\n    }\n}\n\n/**\n * @classdesc Represents a static file result\n * @class\n * @augments HttpAnyResult\n */\nexport class HttpFileResult extends HttpAnyResult {\n    /**\n     *\n     * @constructor\n     * @param {string} physicalPath\n     * @param {string=} fileName\n     */\n    constructor(physicalPath, fileName) {\n        super();\n        this.physicalPath = physicalPath;\n        this.fileName = fileName;\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {Function} callback\n     */\n    execute(context, callback) {\n        callback = callback || function() {};\n        const physicalPath = this.physicalPath,\n            fileName = this.fileName;\n        fs.exists(physicalPath, function(exists) {\n            if (!exists) {\n                callback(new HttpNotFoundError());\n            }\n            else {\n                try {\n                    fs.stat(physicalPath, function (err, stats) {\n                        if (err) {\n                            callback(err);\n                        }\n                        else {\n                            if (!stats.isFile()) {\n                                callback(new HttpNotFoundError());\n                            }\n                            else {\n                                //get if-none-match header\n                                const requestETag = context.request.headers['if-none-match'];\n                                //generate responseETag\n                                const md5 = crypto.createHash('md5');\n                                md5.update(stats.mtime.toString());\n                                const responseETag = md5.digest('base64');\n                                if (requestETag) {\n                                    if (requestETag == responseETag) {\n                                        context.response.writeHead(304);\n                                        context.response.end();\n                                        callback();\n                                        return;\n                                    }\n                                }\n                                let contentType = null;\n                                //get file extension\n                                const extensionName = path.extname(fileName || physicalPath);\n                                //get MIME collection\n                                const mimes = context.getApplication().config.mimes;\n                                let contentEncoding = null;\n                                //find MIME type by extension\n                                const mime = mimes.filter(function (x) {\n                                    return x.extension == extensionName;\n                                })[0];\n                                if (mime) {\n                                    contentType = mime.type;\n                                    if (mime.encoding)\n                                        contentEncoding = mime.encoding;\n                                }\n\n                                //throw exception (MIME not found or access denied)\n                                if (_.isNil(contentType)) {\n                                    callback(new HttpForbiddenError())\n                                }\n                                else {\n                                    //create read stream\n                                    const source = fs.createReadStream(physicalPath);\n                                    //add Content-Disposition: attachment; filename=\"<file name.ext>\"\n                                    context.response.writeHead(200, {\n                                        'Content-Type': contentType + (contentEncoding ? ';charset=' + contentEncoding : ''),\n                                        'ETag': responseETag\n                                    });\n                                    //copy file\n                                    source.pipe(context.response);\n                                    source.on('end', function() {\n                                        callback();\n                                    });\n                                    source.on('error', function(err) {\n                                        callback(err);\n                                    });\n                                }\n                            }\n                        }\n                    });\n                }\n                catch (e) {\n                    callback(e);\n                }\n            }\n        });\n\n    }\n}\n\n/**\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction queryDefaultViewPath(controller, view, extension, callback) {\n   return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), controller, view, extension, callback);\n}\n/**\n * @param view\n * @param extension\n * @param callback\n * @returns {*}\n * @private\n */\nfunction querySharedViewPath(view, extension, callback) {\n    return queryAbsoluteViewPath.call(this, this.getApplication().mapExecutionPath('views'), 'shared', view, extension, callback);\n}\n\n/**\n * @param search\n * @param controller\n * @param view\n * @param extension\n * @param callback\n * @private\n */\nfunction queryAbsoluteViewPath(search, controller, view, extension, callback) {\n    let result = path.resolve(search, util.format('%s/%s.html.%s', controller, view, extension));\n    fs.exists(result, function(exists) {\n        if (exists)\n            return callback(null, result);\n        //search for capitalized controller name e.g. person as Person\n        const capitalizedController = controller.charAt(0).toUpperCase() + controller.substring(1);\n        result = path.resolve(search, util.format('%s/%s.html.%s', capitalizedController, view, extension));\n        fs.exists(result, function(exists) {\n            if (exists)\n                return callback(null, result);\n            callback();\n        });\n    });\n}\n/**\n * @param {string} p\n * @returns {boolean}\n * @private\n */\nfunction isAbsolute(p) {\n    //var re = new RegExp('^' + p, 'i');\n    //return re.test(path.resolve(process.cwd(), p));\n    return path.normalize(p + '/') === path.normalize(path.resolve(p) + '/');\n}\n\n/**\n * Represents a class that is used to render a view.\n * @class\n * @param {string=} name - The name of the view.\n * @param {Array=} data - The data that are going to be used to render the view.\n * @augments HttpAnyResult\n */\nexport class HttpViewResult extends HttpAnyResult {\n    constructor(name, data) {\n        super();\n        this.name = name;\n        this.data = data==undefined? []: data;\n        this.contentType = 'text/html;charset=utf-8';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * Sets or changes the name of this HttpViewResult instance.\n     * @param {string} s\n     * @returns {HttpViewResult}\n     */\n    setName(s) {\n        this.name = s;\n        return this;\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {Function} callback\n     * */\n    execute(context, callback) {\n        const self = this;\n        callback = callback || function() {};\n        const util = require('util'), fs = require('fs');\n        /**\n         * @type ServerResponse\n         * */\n        const response = context.response;\n        //if the name is not defined get the action name of the current controller\n        if (!this.name)\n            //get action name\n            this.name = context.request.routeData['action'];\n        //validate [path] route param in order to load a view that is located in a views' sub-directory (or in another absolute path)\n        let routePath;\n        if (context.request.route) {\n            routePath =  context.request.route.path;\n        }\n        //get view name\n        let viewName = this.name;\n        if (/^partial/.test(viewName)) {\n            //partial view\n            viewName = viewName.substr(7).replace(/^-/,'');\n            context.request.route.partial = true;\n        }\n\n        //and of course controller's name\n        const controllerName = context.request.routeData['controller'];\n        //enumerate existing view engines e.g /views/controller/index.[html].ejs or /views/controller/index.[html].xform etc.\n        /**\n         * {HttpViewEngineReference|*}\n         */\n        let viewPath, viewEngine;\n        async.eachSeries(context.getApplication().getConfiguration().engines, function(engine, cb) {\n            if (viewPath) { cb(); return; }\n            if (routePath && isAbsolute(routePath)) {\n                queryAbsoluteViewPath.call(context, routePath, controllerName, viewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        return cb();\n                    }\n                });\n            }\n            else {\n                let searchViewName = viewName;\n                if (routePath) {\n                    searchViewName = path.join(routePath, viewName);\n                }\n                //search by relative path\n                queryDefaultViewPath.call(context, controllerName, searchViewName, engine.extension, function(err, result) {\n                    if (err) { return cb(err); }\n                    if (result) {\n                        viewPath = result;\n                        viewEngine = engine;\n                        return cb();\n                    }\n                    else {\n                        querySharedViewPath.call(context, searchViewName, engine.extension, function(err, result) {\n                            if (err) { return cb(err); }\n                            if (result) {\n                                viewPath = result;\n                                viewEngine = engine;\n                                return cb();\n                            }\n                            cb();\n                        });\n                    }\n                });\n            }\n\n        }, function(err) {\n            if (err) { callback(err); return; }\n            if (viewEngine) {\n                let EngineCtor = require(viewEngine.type);\n                if (typeof EngineCtor !== 'function') {\n                    return callback(new ReferenceError(util.format('The specified engine %s module does not export default class', viewEngine.type)));\n                }\n                /**\n                 * @type {HttpViewEngine|*}\n                 */\n                const engineInstance = new EngineCtor(context);\n                //render\n                const e = { context:context, target:self };\n                context.emit('preExecuteResult', e, function(err) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        engineInstance.render(viewPath, self.data, function(err, result) {\n                            if (err) {\n                                callback.call(context, err);\n                            }\n                            else {\n                                //HttpViewResult.result or data (?)\n                                self.result = result;\n                                context.emit('postExecuteResult', e, function(err) {\n                                    if (err) {\n                                        callback.call(context, err);\n                                    }\n                                    else {\n                                        response.writeHead(200, {\"Content-Type\": self.contentType});\n                                        response.write(self.result, self.contentEncoding);\n                                        callback.call(context);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n\n            }\n            else {\n                const er = new HttpNotFoundError();\n                if (context.request && context.request.url) {\n                    er.resource = context.request.url;\n                }\n                callback.call(context, er);\n            }\n        });\n\n\n\n\n    }\n}\n\n/**\n * @classdesc Provides methods that respond to HTTP requests that are made to a web application\n * @class\n * @constructor\n * @param {HttpContext} context - The executing HTTP context.\n * @property {HttpContext} context - Gets or sets the HTTP context associated with this controller\n * @property {string} name - Gets or sets the internal name for this controller\n * */\nexport class HttpController {\n    constructor(context) {\n        this.context = context;\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns {Observable}\n     */\n    view(data) {\n        return (new HttpViewResult(null, data)).toObservable();\n    }\n\n    forbidden(callback) {\n        callback(new HttpForbiddenError());\n    }\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    html(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {*=} data\n     * @returns HttpViewResult\n     * */\n    htm(data) {\n        return new HttpViewResult(null, data);\n    }\n\n    /**\n     * Creates a view result object for the given request.\n     * @param {String=} data\n     * @returns HttpJavascriptResult\n     * */\n    js(data) {\n        return new HttpJavascriptResult(data);\n    }\n\n    /**\n     * Creates a view result object that represents a client javascript object.\n     * This result may be used for sharing specific objects stored in memory or server filesystem\n     * e.g. serve a *.json file as a client variable with name window.myVar1 or\n     * serve user settings object ({ culture: 'en-US', notifyMe: false}) as a variable with name window.settings\n     * @param {String} name\n     * @param {String|*} obj\n     * @returns HttpAnyResult\n     * */\n    jsvar(name, obj) {\n        if (typeof name !== 'string')\n            return new HttpEmptyResult();\n        if (name.length==0)\n            return new HttpEmptyResult();\n        if (typeof obj === 'undefined' || obj == null)\n            return new HttpJavascriptResult(name.concat(' = null;'));\n        else if (obj instanceof Date)\n            return new HttpJavascriptResult(name.concat(' = new Date(', obj.valueOf(), ');'));\n        else if (typeof obj === 'string')\n            return new HttpJavascriptResult(name.concat(' = ', obj, ';'));\n        else\n            return new HttpJavascriptResult(name.concat(' = ', JSON.stringify(obj), ';'));\n    }\n\n    /**\n     * Invokes a default action and returns an HttpViewResult instance\n     * @returns {Observable}\n     */\n    action() {\n        return this.view();\n    }\n\n    /**\n     * Creates a content result object by using a string.\n     * @returns HttpContentResult\n     * */\n    content(content) {\n         return new HttpContentResult(content);\n    }\n\n    /**\n     * Creates a JSON result object by using the specified data.\n     * @returns HttpJsonResult\n     * */\n    json(data) {\n        return new HttpJsonResult(data);\n    }\n\n    /**\n     * Creates a XML result object by using the specified data.\n     * @returns HttpXmlResult\n     * */\n    xml(data) {\n        return new HttpXmlResult(data);\n    }\n\n    /**\n     * Creates a binary file result object by using the specified path.\n     * @param {string}  physicalPath\n     * @param {string=}  fileName\n     * @returns {HttpFileResult|HttpAnyResult}\n     * */\n    file(physicalPath, fileName) {\n        return new HttpFileResult(physicalPath, fileName);\n    }\n\n    /**\n     * Creates a redirect result object that redirects to the specified URL.\n     * @returns HttpRedirectResult\n     * */\n    redirect(url) {\n        return new HttpRedirectResult(url);\n    }\n\n    /**\n     * Creates an empty result object.\n     * @returns HttpEmptyResult\n     * */\n    empty() {\n        return new HttpEmptyResult();\n    }\n}\n\n/**\n * Creates a view result object for the given request.\n * @param {*=} data\n * @returns HttpViewResult\n * */\nHttpController.prototype.htm = HttpController.prototype.html;\n\n/**\n * @classdesc An abstract class which represents a view engine\n * @abstract\n * @class\n * @property {HttpContext} context\n * @augments {EventEmitter}\n */\nexport class HttpViewEngine {\n\n    /**\n     * @constructor\n     * @param {HttpContext=} context\n     */\n    constructor(context) {\n        if (new.target === HttpViewEngine) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n        this.context = context;\n    }\n\n    /**\n     * Renders the specified view with the options provided\n     * @param {string} url\n     * @param {*} options\n     * @param {Function} callback\n     */\n    render(url, options, callback) {\n        //\n    }\n}\n\n/**\n * Encapsulates information that is related to rendering a view.\n * @class\n * @param {HttpContext} context\n * @property {DataModel} model\n * @property {HtmlViewHelper} html\n * @constructor\n * @augments {EventEmitter}\n */\nexport class HttpViewContext {\n    constructor(context) {\n        /**\n         * Gets or sets the body of the current view\n         * @type {String}\n         */\n        this.body='';\n        /**\n         * Gets or sets the title of the page if the view will be fully rendered\n         * @type {String}\n         */\n        this.title='';\n        /**\n         * Gets or sets the view layout page if the view will be fully rendered\n         * @type {String}\n         */\n        this.layout = null;\n        /**\n         * Gets or sets the view data\n         * @type {String}\n         */\n        this.data = null;\n        /**\n         * Represents the current HTTP context\n         * @type {HttpContext}\n         */\n        this.context = context;\n\n        /**\n         * @type {HtmlWriter}\n         */\n        this.writer = undefined;\n\n        let writer = null;\n        Object.defineProperty(this, 'writer', {\n            get:function() {\n                if (writer)\n                    return writer;\n                writer = new HtmlWriter();\n                writer.indent = false;\n                return writer;\n            }, configurable:false, enumerable:false\n        });\n\n        const self = this;\n        Object.defineProperty(this, 'model', {\n            get:function() {\n                if (self.context.params)\n                    if (self.context.params.controller)\n                        return self.context.model(self.context.params.controller);\n                return null;\n            }, configurable:false, enumerable:false\n        });\n\n        this.html = new HtmlViewHelper(this);\n        //class extension initiators\n        if (typeof this.init === 'function') {\n            //call init() method\n            this.init();\n        }\n    }\n\n    /**\n     * @param {string} url\n     * @param {Function} callback\n     * @returns {string}\n     */\n    render(url, callback) {\n        callback = callback || function() {};\n        //get response cookie, if any\n        let requestCookie = this.context.response.getHeader('set-cookie');\n        if (typeof this.context.request.headers.cookie !== 'undefined')\n            requestCookie = this.context.request.headers.cookie;\n        this.context.application.executeRequest( { url: url, cookie: requestCookie }, function(err, result) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                callback(null, result.body);\n            }\n        });\n    }\n\n    init() {\n        //\n    }\n\n    /**\n     *\n     * @param {String} s\n     * @param {String=} lib\n     * @returns {String}\n     */\n    translate(s, lib) {\n        return this.context.translate(s, lib);\n    }\n\n    /**\n     * @param {HttpViewContext} $view\n     * @returns {*}\n     * @private\n     */\n    static HtmlViewHelper($view) {\n        let doc;\n        return {\n        antiforgery: function() {\n            //create token\n            const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n            //try to set cookie\n            context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n            return $view.writer.writeAttribute('type', 'hidden')\n                .writeAttribute('id', '_CSRFToken')\n                .writeAttribute('name', '_CSRFToken')\n                .writeAttribute('value', value)\n                .writeFullBeginTag('input')\n                .toString();\n        },\n        element: function(obj) {\n            if (typeof doc === 'undefined') { doc = $view.context.application.document(); }\n            return doc.parentWindow.angular.element(obj);\n        },\n        lang: function() {\n            const context = $view.context, c= context.culture();\n            if (typeof c === 'string') {\n                if (c.length>=2) {\n                    return c.toLowerCase().substring(0,2);\n                }\n            }\n            //in all cases return default culture\n            return 'en';\n        }\n    };\n    }\n}\n\n/**\n * @classdesc A helper class for an instance of HttpViewContext class\n * @class\n * @property {HttpViewContext} parent - The parent HTTP View Context\n * @property {HTMLDocument|*} document - The in-process HTML Document\n */\nexport class HtmlViewHelper {\n    /**\n     * @constructor\n     * @param {HttpViewContext} view\n     */\n    constructor(view) {\n        let document;\n        const self = this;\n        Object.defineProperty(this, 'parent', {\n            get: function() {\n                return view;\n            } , configurable:false, enumerable:false\n        });\n        Object.defineProperty(this, 'document', {\n            get: function() {\n                if (typeof document !== 'undefined') { return document; }\n                document = self.view.context.application.document();\n                return document;\n            } , configurable:false, enumerable:false\n        });\n    }\n\n    antiforgery() {\n        const $view = this.parent;\n        //create token\n        const context = $view.context, value = context.application.encrypt(JSON.stringify({ id: Math.floor(Math.random() * 1000000), url:context.request.url, date:new Date() }));\n        //try to set cookie\n        context.response.setHeader('Set-Cookie','.CSRF='.concat(value));\n        return $view.writer.writeAttribute('type', 'hidden')\n            .writeAttribute('id', '_CSRFToken')\n            .writeAttribute('name', '_CSRFToken')\n            .writeAttribute('value', value)\n            .writeFullBeginTag('input')\n            .toString();\n    }\n\n    element(obj) {\n        return this.document.parentWindow.angular.element(obj);\n    }\n\n    lang() {\n        const $view = this.parent;\n        const context = $view.context, c= context.culture();\n        if (typeof c === 'string') {\n            if (c.length>=2) {\n                return c.toLowerCase().substring(0,2);\n            }\n        }\n        //in all cases return default culture\n        return 'en';\n    }\n}\n\n\n\n\n"]}