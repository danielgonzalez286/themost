{"version":3,"sources":["files.es6"],"names":["_","fs","util","path","FileNotFoundError","RandomUtils","TraceUtils","TextUtils","FileStorage","new","target","TypeError","context","src","attrs","callback","item","destination","query","FileSystemStorage","physicalPath","root","virtualPath","ensure","self","_initialized","Error","exists","mkdir","err","log","Db","require","db","nativeObjectID","collection","close","execute","fn","result","e","isNil","cb","version","status","dateCreated","Date","dateModified","state","_id","oid","randomChars","save","findOne","file_id","toBase26","join","substr","format","filePath","createReadStream","find","filename","basename","file","copyFile","dest","destFile","AttachmentFileSystemStorage","attachments","model","published","url","first","id","all","source","createWriteStream","pipe","on"],"mappings":"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","file":"files.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\n\nimport {_} from 'lodash';\nimport fs from 'fs';\nimport util from 'util';\nimport path from 'path';\nimport {FileNotFoundError} from '@themost/common/errors';\nimport {RandomUtils,TraceUtils,TextUtils} from '@themost/common/utils';\n\n/**\n * @classdesc An abstract class that describes a file storage.\n * @class\n * @property {string} root - Gets or sets a string that represents the physical root path of this file storage\n * @property {string} virtualPath - Gets or sets a string that represents the virtual path of this file storage\n */\nexport class FileStorage {\n\n    /**\n     * @constructor\n     */\n    constructor() {\n        if (new.target === FileStorage) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {string} src\n     * @param {*} attrs\n     * @param {Function} callback\n     */\n    copyFrom(context, src, attrs, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {string} destination\n     * @param {Function} callback\n     */\n    copyTo(context, item, destination, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolvePhysicalPath(context, item, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolveUrl(context, item, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    createReadStream(context, item, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {Function} callback\n     */\n    init(callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    find(context, query, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    findOne(context, query, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    remove(context, item, callback) {\n        callback  = callback || function() {};\n        callback();\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    exists(context, item, callback) {\n        callback  = callback || function() {};\n        callback(false);\n    }\n}\n\n/**\n * @classdesc FileSystemStorage class describes a file storage on local file system.\n * @class\n * @constructor\n * @augments FileStorage\n * @deprecated\n * @ignore\n */\nexport class FileSystemStorage extends FileStorage {\n    /**\n     * @constructor\n     * @param {string} physicalPath - The root directory of this storage\n     */\n    constructor(physicalPath) {\n        super();\n        this.root = physicalPath;\n        this.virtualPath = null;\n        this.ensure = function(callback) {\n            const self = this;\n            callback = callback || function() {};\n            if (self._initialized) {\n                callback();\n                return;\n            }\n            if (typeof self.root === 'undefined' || self.root==null) {\n                callback(new Error('The file system storage root directory cannot be empty at this context.'));\n            }\n            else {\n                //check directory existence\n                fs.exists(self.root, function(exists) {\n                   if (exists) {\n                       self._initialized = true;\n                       callback();\n                   }\n                    else {\n                       fs.mkdir(self.root,function(err) {\n                          if (err) {\n                              TraceUtils.log(err);\n                              callback(new Error('An error occured while trying to initialize file system storage.'));\n                          }\n                           else {\n                              const Db = require('tingodb')().Db, db = new Db(self.root, {nativeObjectID:true});\n                              //Fetch a collection to insert document into\n                              const collection = db.collection(\"fs\");\n                              db.close(function() {\n                                  //initialization was completed, so exit with no error\n                                  self._initialized = true;\n                                  callback();\n                              });\n                          }\n                       });\n                   }\n                });\n            }\n        };\n\n        this.execute = function(fn, callback) {\n            fn = fn || function() {};\n            try {\n                const Db = require('tingodb')().Db, db = new Db(physicalPath, { nativeObjectID:true });\n                fn(db, function(err, result) {\n                    db.close(function() {\n                       callback(err, result);\n                    });\n                });\n            }\n            catch (e) {\n                callback(e);\n            }\n        }\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {function} callback\n     */\n    save(context, item, callback) {\n        const self = this;\n        if (_.isNil(item)) {\n            callback();\n            return;\n        }\n        self.execute(function(db, cb) {\n            //file default version\n            item.version = item.version || 1;\n            //file status (0) temporary\n            item.status = item.status || 0;\n            //file date created (on storage)\n            item.dateCreated = new Date();\n            //file date modified (on storage)\n            item.dateModified = new Date();\n            //get collection\n            const collection = db.collection('fs');\n            //save\n            let state = 2;\n            if (_.isNil(item._id)) {\n                state=1;\n                item.oid = RandomUtils.randomChars(12);\n            }\n            collection.save(item, function(err) {\n                cb(err);\n            });\n        }, function(err) {\n            callback(err);\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    findOne(context, query, callback) {\n        const self = this;\n        if (_.isNil(query)) {\n            callback();\n            return;\n        }\n        self.ensure(function() {\n            self.execute(function(db, cb) {\n                //get collection\n                const collection = db.collection('fs');\n                if (query._id) {\n                    collection.findOne({_id:query._id}, function(err, result) {\n                        cb(err, result);\n                    });\n                }\n                else {\n                    collection.findOne(query, function(err, result) {\n                        cb(err, result);\n                    });\n                }\n            }, function(err, result) {\n                callback(err, result);\n            });\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolvePhysicalPath(context, item, callback) {\n        const _id = item._id;\n        const self = this;\n        let file_id;\n        if (_id) {\n            file_id = TextUtils.toBase26(_id);\n            callback(null, path.join(self.root, file_id.substr(0,1), file_id));\n        }\n        else {\n            self.findOne(context, item, function(err, result) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    if (_.isNil(result)) {\n                        callback(new Error('Item cannot be found'));\n                    }\n                    else {\n                        file_id = TextUtils.toBase26(result._id);\n                        callback(null, path.join(self.root, file_id.substr(0,1), file_id));\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolveUrl(context, item, callback) {\n        const oid = item.oid, self = this;\n        if (oid) {\n            callback(null, util.format(self.virtualPath, oid));\n        }\n        else {\n            self.findOne(context, item, function(err, result) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    if (_.isNil(result)) {\n                        callback(new Error('Item cannot be found'));\n                    }\n                    else {\n                        callback(null, util.format(self.virtualPath, result.oid));\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    createReadStream(context, item, callback) {\n        const self = this;\n        let filePath;\n        self.findOne(context, item, function(err, result) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(result)) {\n                    callback(new Error('Item cannot be found'));\n                }\n                else {\n                    //get file id\n                    const file_id = TextUtils.toBase26(result._id);\n                    //create file path\n                    filePath = path.join(self.root, file_id.substr(0,1), file_id);\n                    //check file\n                    fs.exists(filePath, function(exists) {\n                        if (!exists) {\n                            callback(new FileNotFoundError());\n                        }\n                        else {\n                            callback(null, fs.createReadStream(filePath));\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /***\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {function(Boolean)} callback\n     */\n    exists(context, item, callback) {\n        callback  = callback || function() {};\n        this.findOne(context, item, function(err, result) {\n            if (err) {\n                TraceUtils.log(err);\n                callback(false);\n            }\n            else {\n                callback(!_.isNil(result));\n            }\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    find(context, query, callback) {\n        const self = this;\n        if (_.isNil(query)) {\n            callback();\n            return;\n        }\n        self.ensure(function() {\n            self.execute(function(db, cb) {\n                //get collection\n                const collection = db.collection('fs');\n                collection.find(query, function(err, result) {\n                    cb(err, result);\n                });\n            }, function(err, result) {\n                callback(err, result);\n            });\n        });\n    }\n\n    /**\n     * @param {Function} callback\n     */\n    init(callback) {\n        this.ensure(function(err) {\n            callback(err);\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {string} src\n     * @param {*} attrs\n     * @param {Function} callback\n     */\n    copyFrom(context, src, attrs, callback) {\n        const self = this;\n        callback = callback || function() {};\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                const filename = path.basename(src);\n                attrs = attrs || {};\n                //set file composition name\n                attrs.filename = attrs.filename || filename;\n                //check source file\n                fs.exists(src, function(exists) {\n                   if (!exists) {\n                       callback(new Error('The source file cannot be found'));\n                   }\n                    else {\n                       //save attributes\n                       //insert item attributes\n                       self.save(context, attrs, function(err) {\n                           if (err) {\n                               callback(err);\n                           }\n                           else {\n                               //file operation (save to folder)\n                               const file = TextUtils.toBase26(attrs._id);\n                               fs.exists(path.join(self.root, file.substr(0,1)), function(exists) {\n                                   if (exists) {\n                                       copyFile(src,path.join(self.root, file.substr(0,1), file), function(err) {\n                                          callback(err);\n                                       });\n                                   }\n                                   else {\n                                       fs.mkdir(path.join(self.root, file.substr(0,1)), function(err) {\n                                          if (err) {\n                                              callback(err);\n                                          }\n                                           else {\n                                              copyFile(src,path.join(self.root, file.substr(0,1), file), function(err) {\n                                                  callback(err);\n                                              });\n                                          }\n                                       });\n                                   }\n                               });\n                           }\n                       });\n                   }\n                });\n\n            }\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {string|*} item\n     * @param {string} dest\n     * @param {Function} callback\n     */\n    copyTo(context, item, dest, callback) {\n        const self = this;\n        callback  = callback || function() {};\n        if (_.isNil(item)) {\n            callback(new Error('The source item cannot be empty at this context'));\n            self.findOne(context, item, function(err, result) {\n               if (err) {\n                    callback(err);\n               }\n                else {\n                   if (_.isNil(result)) {\n                       callback(new Error('The source item cannot be found.'));\n                   }\n                   else {\n                       const file = TextUtils.toBase26(result._id), src = path.join(self.root, file.substr(0,1), file);\n                       fs.exists(src, function(exists) {\n                          if (!exists) {\n                              callback(new Error('The source file cannot be found.'));\n                          }\n                           else {\n                              const destFile = path.join(dest, result.filename);\n                              copyFile(src, destFile, function(err) {\n                                  callback(err, destFile);\n                              });\n                          }\n                       });\n                   }\n               }\n            });\n        }\n    }\n}\n\n/**\n * @classdesc AttachmentFileSystemStorage class describes a file storage for attachments' management on local file system.\n * @class\n * @constructor\n * @augments FileStorage\n */\nexport class AttachmentFileSystemStorage extends FileStorage {\n    /**\n     * @constructor\n     * @param {string} physicalPath - The root directory of this storage\n     */\n    constructor(physicalPath) {\n        super();\n        this.root = physicalPath;\n        this.virtualPath = null;\n        this.ensure = function(callback) {\n            const self = this;\n            callback = callback || function() {};\n            if (self._initialized) {\n                callback();\n                return;\n            }\n            if (_.isNil(self.root)) {\n                callback(new Error('The file system storage root directory cannot be empty at this context.'));\n            }\n            else {\n                //check directory existence\n                fs.exists(self.root, function(exists) {\n                    if (exists) {\n                        self._initialized = true;\n                        callback();\n                    }\n                    else {\n                        fs.mkdir(self.root,function(err) {\n                            if (err) {\n                                TraceUtils.log(err);\n                                callback(new Error('An error occured while trying to initialize file system storage.'));\n                            }\n                            else {\n                                self._initialized = true;\n                                callback();\n                            }\n                        });\n                    }\n                });\n            }\n        };\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {function} callback\n     */\n    save(context, item, callback) {\n        const self = this;\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(item)) {\n                    callback();\n                    return;\n                }\n                const attachments = context.model('Attachment');\n                if (_.isNil(attachments)) {\n                    callback(new Error('Attachment model cannot be found.'));\n                }\n                //file default version\n                item.version = item.version || 1;\n                //file status (false) not published\n                item.published = item.published || false;\n                //set oid explicitly\n                item.oid = RandomUtils.randomChars(12);\n                //set url\n                item.url = util.format(self.virtualPath, item.oid);\n                //save attachment\n                attachments.save(item, function(err) {\n                    callback(err);\n                });\n            }\n        });\n\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    findOne(context, query, callback) {\n        const self = this;\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(query)) {\n                    callback();\n                    return;\n                }\n                const attachments = context.model('Attachment');\n                if (_.isNil(attachments)) {\n                    callback(new Error('Attachment model cannot be found.'));\n                }\n                attachments.find(query).first(callback);\n            }\n        });\n\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolvePhysicalPath(context, item, callback) {\n        const id = item.id;\n        const self = this;\n        let file_id;\n        if (id) {\n            file_id = TextUtils.toBase26(id);\n            callback(null, path.join(self.root, file_id.substr(0,1), file_id));\n        }\n        else {\n            self.findOne(context, item, function(err, result) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    if (_.isNil(result)) {\n                        callback(new Error('Item cannot be found'));\n                    }\n                    else {\n                        file_id = TextUtils.toBase26(result.id);\n                        callback(null, path.join(self.root, file_id.substr(0,1), file_id));\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    resolveUrl(context, item, callback) {\n        const oid = item.oid, self = this;\n        if (oid) {\n            callback(null, util.format(self.virtualPath, oid));\n        }\n        else {\n            self.findOne(context, item, function(err, result) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    if (_.isNil(result)) {\n                        callback(new Error('Item cannot be found'));\n                    }\n                    else {\n                        callback(null, util.format(self.virtualPath, item.oid));\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} item\n     * @param {Function} callback\n     */\n    createReadStream(context, item, callback) {\n        const self = this;\n        let filePath;\n        self.findOne(context, item, function(err, result) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(result)) {\n                    callback(new Error('Item cannot be found'));\n                }\n                else {\n                    //get file id\n                    const file_id = TextUtils.toBase26(result.id);\n                    //create file path\n                    filePath = path.join(self.root, file_id.substr(0,1), file_id);\n                    //check file\n                    fs.exists(filePath, function(exists) {\n                        if (!exists) {\n                            callback(new FileNotFoundError());\n                        }\n                        else {\n                            callback(null, fs.createReadStream(filePath));\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    exists(context, query, callback) {\n        callback  = callback || function() {};\n        this.findOne(context, query, function(err, result) {\n            if (err) {\n                TraceUtils.log(err);\n                callback(false);\n            }\n            else {\n                callback(!_.isNil(result));\n            }\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {*} query\n     * @param {Function} callback\n     */\n    find(context, query, callback) {\n        const self = this;\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(query)) {\n                    callback();\n                }\n                else {\n                    const attachments = context.model('Attachment');\n                    if (_.isNil(attachments)) {\n                        callback(new Error('Attachment model cannot be found.'));\n                    }\n                    attachments.find(query).all(callback)\n                }\n            }\n        });\n    }\n\n    /**\n     * @param {Function} callback\n     */\n    init(callback) {\n        this.ensure(callback);\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {string} src\n     * @param {*} attrs\n     * @param {Function} callback\n     */\n    copyFrom(context, src, attrs, callback) {\n        const self = this;\n        callback = callback || function() {};\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                const filename = path.basename(src);\n                attrs = attrs || {};\n                //set file composition name\n                attrs.filename = attrs.filename || filename;\n                //check source file\n                fs.exists(src, function(exists) {\n                    if (!exists) {\n                        callback(new Error('The source file cannot be found'));\n                    }\n                    else {\n                        //save attributes\n                        //insert item attributes\n                        self.save(context, attrs, function(err) {\n                            if (err) {\n                                callback(err);\n                            }\n                            else {\n                                //file operation (save to folder)\n                                const file = TextUtils.toBase26(attrs.id);\n                                fs.exists(path.join(self.root, file.substr(0,1)), function(exists) {\n                                    if (exists) {\n                                        copyFile(src,path.join(self.root, file.substr(0,1), file), function(err) {\n                                            callback(err);\n                                        });\n                                    }\n                                    else {\n                                        fs.mkdir(path.join(self.root, file.substr(0,1)), function(err) {\n                                            if (err) {\n                                                callback(err);\n                                            }\n                                            else {\n                                                copyFile(src,path.join(self.root, file.substr(0,1), file), function(err) {\n                                                    callback(err);\n                                                });\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n\n            }\n        });\n    }\n\n    /**\n     * @param {HttpContext} context\n     * @param {string|*} item\n     * @param {string} dest\n     * @param {Function} callback\n     */\n    copyTo(context, item, dest, callback) {\n        const self = this;\n        callback  = callback || function() {};\n        self.ensure(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                if (_.isNil(item)) {\n                    callback(new Error('The source item cannot be empty at this context'));\n                    self.findOne(context, item, function(err, result) {\n                        if (err) {\n                            callback(err);\n                        }\n                        else {\n                            if (_.isNil(result)) {\n                                callback(new Error('The source item cannot be found.'));\n                            }\n                            else {\n                                const file = TextUtils.toBase26(result.id), src = path.join(self.root, file.substr(0,1), file);\n                                fs.exists(src, function(exists) {\n                                    if (!exists) {\n                                        callback(new Error('The source file cannot be found.'));\n                                    }\n                                    else {\n                                        const destFile = path.join(dest, result.filename);\n                                        copyFile(src, destFile, function(err) {\n                                            callback(err, destFile);\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n                }\n            }\n        });\n\n    }\n}\n\n/**\n * @param {string} src\n * @param {string} dest\n * @param {Function} callback\n * @private\n */\nfunction copyFile(src, dest, callback) {\n    //create read stream\n    const source = fs.createReadStream(src);\n    //create write stream\n    const destination = fs.createWriteStream(dest);\n    //copy file\n    source.pipe(destination);\n    source.on('end', function() {\n            callback();\n    });\n    source.on('error', function(err) {\n        callback(err);\n    });\n}\n"]}