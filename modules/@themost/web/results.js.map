{"version":3,"sources":["results.es6"],"names":["Q","_","FormatterStrategy","HttpMethodNotAllowedError","HttpResult","new","target","TypeError","headers","name","value","HttpNextResult","create","toPromise","HttpEndResult","status","HttpErrorResult","HttpAnyResult","data","contentType","contentEncoding","context","self","nfbind","callback","formatterStrategy","getApplication","getService","response","isNil","writeHead","formatter","find","execute","then","catch","err","statusCode"],"mappings":"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","file":"results.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\nimport 'source-map-support/register';\nimport Q from 'q';\nimport {_} from 'lodash';\nimport {FormatterStrategy} from \"./formatters\";\nimport {HttpMethodNotAllowedError} from \"@themost/common/errors\";\n/**\n * @class\n * @abstract\n */\nexport class HttpResult {\n    /**\n     * @constructor\n     */\n    constructor() {\n\n        if (new.target === HttpResult) {\n            throw new TypeError(\"Cannot construct abstract instances directly\");\n        }\n        this.headers = {};\n    }\n\n    /**\n     * @param {string} name\n     * @param {string} value\n     * @returns {HttpResult|*}\n     */\n    setHeader(name, value) {\n        this.headers[name] = value;\n        return this;\n    }\n\n    /**\n     * @returns {*|Q.Promise<HttpResult>|Q.Promise<any>}\n     */\n    toPromise() {\n        return Q(this);\n    }\n\n    /**\n     * @returns {*|Q.Promise<HttpNextResult>}\n     */\n    static next() {\n        return HttpNextResult.create().toPromise();\n    }\n\n    /**\n     * @returns {*|Q.Promise<HttpEndResult>}\n     */\n    static end() {\n        return HttpEndResult.create().toPromise();\n    }\n\n    /**\n     * @param {number} status\n     * @returns {*|Q.Promise<HttpErrorResult>}\n     */\n    static error(status) {\n        return HttpErrorResult.create(status).toPromise();\n    }\n\n}\n\n/**\n * @class\n */\nexport class HttpAnyResult extends HttpResult {\n    /**\n     * @constructor\n     * @param {*} data\n     */\n    constructor(data) {\n        super();\n        this.data = data;\n        this.contentType = 'text/html';\n        this.contentEncoding = 'utf8';\n    }\n\n    /**\n     * Creates an instance of HTTP next result\n     * @param {*} data\n     * @returns {HttpAnyResult}\n     */\n    static create(data) {\n        return new HttpAnyResult(data);\n    }\n\n    /**\n     * Executes an HttpResult instance against an existing HttpContext.\n     * @param {HttpContext} context\n     * @returns {Promise}\n     * */\n    execute(context) {\n        const self = this;\n        return Q.nfbind(function(callback) {\n            try {\n                /**\n                 * @type {FormatterStrategy}\n                 */\n                const formatterStrategy = context.getApplication().getService(FormatterStrategy),\n                    /**\n                     * @type {ServerResponse}\n                     */\n                    response = context.response;\n\n                if (_.isNil(self.data)) {\n                    response.writeHead(204);\n                    return callback();\n                }\n\n                if (_.isNil(formatterStrategy)) {\n                    return callback(new HttpMethodNotAllowedError());\n                }\n\n                const formatter = formatterStrategy.find(context);\n                if (_.isNil(formatter)) {\n                    return callback(new HttpMethodNotAllowedError());\n                }\n                return formatter.execute(context, self.data).then(()=>{\n                    return callback();\n                }).catch((err) => {\n                    return callback(err);\n                });\n            }\n            catch(err) {\n                callback(err);\n            }\n        })();\n    }\n\n}\n\n/**\n * @class\n */\nexport class HttpNextResult extends HttpResult {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Creates an instance of HTTP next result\n     * @returns {HttpNextResult}\n     */\n    static create() {\n        return new HttpNextResult();\n    }\n\n}\n\n/**\n * @class\n */\nexport class HttpEndResult extends HttpResult {\n    /**\n     * @constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Creates an instance of HTTP next result\n     * @returns {HttpEndResult}\n     */\n    static create() {\n        return new HttpEndResult();\n    }\n}\n\n/**\n * @class\n */\nexport class HttpErrorResult extends HttpResult {\n    /**\n     * @constructor\n     */\n    constructor(statusCode) {\n        super();\n    }\n\n    /**\n     * Creates an instance of HTTP next result\n     * @param {number} statusCode\n     * @returns {HttpErrorResult}\n     */\n    static create(statusCode) {\n        return new HttpErrorResult(statusCode);\n    }\n}\n"]}