{"version":3,"sources":["cache.es6"],"names":["HttpCache","options","initialized","ttl","callback","NodeCache","require","rawCache","e","key","self","init","err","set","flushAll","value","fn","Error","get","result","add"],"mappings":"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","file":"cache.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {SequentialEventEmitter} from '@themost/common/emitter';\n\n\n/**\n * @classdesc Implements the cache for a data application.\n * @class\n * @augments EventEmitter2\n */\nexport class HttpCache extends SequentialEventEmitter {\n    /**\n     *\n     * @constructor\n     * @param {{ttl:number}|*} options\n     */\n    constructor(options) {\n        super();\n        this.initialized = false;\n        options = options || {};\n        options.ttl = options.ttl || (20*60);\n        this.options = options;\n    }\n\n    /**\n     * Initializes data caching.\n     * @param {function(Error=)} callback\n     */\n    init(callback) {\n        try {\n            if (this.initialized) {\n                callback();\n                return;\n            }\n            const NodeCache = require( \"node-cache\" );\n            this.rawCache = new NodeCache();\n            this.initialized = true;\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n\n    /**\n     * Removes a cached value.\n     * @param {string} key - A string that represents the key of the cached value\n     * @param {function(Error=,number=)} callback - Returns the number of deleted entries. This parameter is optional.\n     */\n    remove(key, callback) {\n        const self = this;\n        callback = callback || function() {};\n        self.init(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                self.rawCache.set(key, callback);\n            }\n        });\n    }\n\n    /**\n    * Flush all cached data.\n    * @param {function(Error=)} callback - This parameter is optional.\n    */\n    removeAll(callback) {\n        const self = this;\n        callback = callback || function() {};\n        self.init(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                self.rawCache.flushAll();\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Sets a key value pair in cache.\n     * @param {string} key - A string that represents the key of the cached value\n     * @param {*} value - The value to be cached\n     * @param {number=} ttl - A TTL in seconds. This parameter is optional.\n     * @param {function(Error=,boolean=)} callback - Returns true on success. This parameter is optional.\n     */\n    add(key, value, ttl, callback) {\n        const self = this;\n        if (typeof ttl === 'undefined')\n            ttl = self.options.ttl;\n        callback = callback || function() {};\n        self.init(function(err) {\n           if (err) {\n               callback(err);\n           }\n            else {\n               if (typeof value !== 'undefined')\n                    self.rawCache.set(key, value, ttl, callback);\n               else\n                   callback(null, false);\n           }\n        });\n    }\n\n    /**\n     * Gets data from cache or executes the defined function and adds the result to the cache with the specified key\n     * @param {string|*} key - A string thath represents the of the cached data\n     * @param {function(function(Error=,*=))} fn - A function to execute if data will not be found in cache\n     * @param {function(Error=,*=)} callback - A callback function that will return the result or an error, if any.\n     */\n    ensure(key, fn, callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (typeof fn !== 'function') {\n            callback(new Error('Invalid argument. Expected function.'));\n            return;\n        }\n        //try to get from cache\n        self.get(key, function(err, result) {\n            if (err) { callback(err); return; }\n            if (typeof result !== 'undefined') {\n                callback(null, result);\n            }\n            else {\n                //execute fn\n                fn(function(err, result) {\n                    if (err) { callback(err); return; }\n                    //add to cache\n                    self.add(key, (typeof result === 'undefined') ? null: result, self.options.ttl, function() {\n                        //and return result\n                        callback(null, result);\n                    });\n                });\n            }\n        });\n    }\n\n    /**\n     * Gets a cached value defined by the given key.\n     * @param {string|*} key\n     * @param {function(Error=,*=)} callback - A callback that returns the cached value, if any.\n     */\n    get(key, callback) {\n        const self = this;\n        callback = callback || function() {};\n        if (typeof key === 'undefined' || key == null) {\n            callback();\n        }\n        self.init(function(err) {\n            if (err) {\n                callback(err);\n            }\n            else {\n                self.rawCache.get(key, function(err, value) {\n                    if (err) {\n                        callback(err);\n                    }\n                    else {\n                        if (typeof value[key] !== 'undefined') {\n                            callback(null, value[key]);\n                        }\n                        else {\n                            callback();\n                        }\n                    }\n                });\n            }\n        });\n    }\n}"]}