{"version":3,"sources":["auth.es6"],"names":["createInstance","context","login","userName","userPassword","callback","model","where","equal","select","silent","first","err","result","Error","enabled","log","id","creds","authenticated","test","replace","md5password","createHash","update","digest","sha1password","application","setAuthCookie","user","convert","name","authenticationType","e","logout","anonymousIdentity"],"mappings":"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","file":"auth.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n'use strict';\nimport {HttpForbiddenError,HttpUnauthorizedError} from '@themost/common/errors';\nimport {TraceUtils} from '@themost/common/utils';\nimport crypto from 'crypto';\n\nexport function createInstance(context) {\n    return {\n        login:function(userName, userPassword, callback) {\n            callback = callback || function() {};\n            try {\n                context.model('user').where('name').equal(userName).select(['id','enabled']).silent().first(function(err, result) {\n                    if (err) {\n                        callback(new Error('Login failed due to server error. Please try again or contact your system administrator.'));\n                    }\n                    else {\n                        if (result) {\n                            if (!result.enabled) {\n                                callback(new HttpForbiddenError('The account is disabled. Please contact your system administrator.'));\n                                return;\n                            }\n                            //user was found\n                            const model = context.model('UserCredential');\n                            if (typeof model === 'undefined' || model === null) {\n                                TraceUtils.log('UserCredential model is missing.');\n                                callback(new Error('Login failed due to server error.'));\n                                return;\n                            }\n                            model.where('id').equal(result.id).silent().first(function (err, creds) {\n                                if (err) {\n                                    TraceUtils.log(err);\n                                    callback(new Error('Login failed due to server error. Please try again or contact your system administrator.'));\n                                }\n                                else {\n                                    if (creds) {\n                                        let authenticated = false;\n                                        //user credentials were found\n                                        //1. clear text\n                                        if (/^\\{clear\\}/i.test(creds.userPassword)) {\n                                            authenticated = (creds.userPassword.replace(/^\\{clear\\}/i, '') == userPassword)\n                                        }\n                                        //2. md5 text\n                                        else if (/^\\{md5\\}/i.test(creds.userPassword)) {\n                                            const md5password = crypto.createHash('md5').update(userPassword).digest('hex');\n                                            authenticated = (creds.userPassword.replace(/^\\{md5\\}/i, '') == md5password)\n                                        }\n                                        //3. sha1 text\n                                        else if (/^\\{sha1\\}/i.test(creds.userPassword)) {\n                                            const sha1password = crypto.createHash('sha1').update(userPassword).digest('hex');\n                                            authenticated = (creds.userPassword.replace(/^\\{sha1\\}/i, '') == sha1password)\n                                        }\n                                        if (authenticated) {\n                                            //set cookie\n                                            context.application.setAuthCookie(context, userName);\n                                            context.user = model.convert({ name: userName, authenticationType:'Basic' });\n                                            callback();\n                                        }\n                                        else {\n                                            callback(new HttpUnauthorizedError('Unknown username or bad password.'));\n                                        }\n                                    }\n                                    else {\n                                        TraceUtils.log('User credentials cannot be found (%s).', userName);\n                                        callback(new HttpUnauthorizedError('Unknown username or bad password.'));\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            //user was not found\n                            callback(new HttpUnauthorizedError('Unknown username. Please try again.'));\n                        }\n                    }\n                });\n            }\n            catch (e) {\n                TraceUtils.log(e);\n                callback(new Error('Login failed due to internal server error.'));\n            }\n\n        },\n        logout:function(callback) {\n            callback = callback || function() {};\n            const anonymousIdentity = { name: 'anonymous', authenticationType:'None' };\n            try {\n                //get user model, if any\n                const model = context.model('User');\n                //set auth cookie to anonymous\n                context.application.setAuthCookie(context, 'anonymous');\n                //check user model and set HttpContext.user property\n                if (model)\n                    context.user = model.convert(anonymousIdentity);\n                else\n                    context.user = anonymousIdentity;\n                callback(null);\n            }\n            catch(e) {\n                TraceUtils.log(e);\n                if (context)\n                    context.user = anonymousIdentity;\n            }\n\n        }\n    }\n}\n"]}