{"version":3,"sources":["decorators.es6"],"names":["httpGet","httpPost","httpPut","httpDelete","httpAction","httpParam","httpAuthorize","_","Q","HttpBadRequestError","HttpUnauthorizedError","HttpConsumer","TraceUtils","LangUtils","Args","DataTypeValidator","MaxLengthValidator","MinLengthValidator","PatternValidator","RequiredValidator","DecoratorError","Error","target","key","descriptor","value","name","TypeError","HttpParamAttributeOptions","options","httpParams","extend","context","httpParamValidationFailedCallback","validationResult","log","assign","request","url","method","reject","message","methodParams","getFunctionParams","length","k","validator","functionParam","contextParam","getParam","params","isObject","type","setContext","validateSync","pattern","RegExp","minLength","maxLength","minValue","MinValueValidator","maxValue","MaxValueValidator","required","check","authorize","user"],"mappings":"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","file":"decorators.js","sourcesContent":["/**\n * @license\n * MOST Web Framework 2.0 Codename Blueshift\n * Copyright (c) 2014, Kyriakos Barbounakis k.barbounakis@gmail.com\n *                     Anthi Oikonomou anthioikonomou@gmail.com\n *\n * Use of this source code is governed by an BSD-3-Clause license that can be\n * found in the LICENSE file at https://themost.io/license\n */\n\n'use strict';\nimport 'source-map-support/register';\nimport _ from 'lodash';\nimport Q from 'q';\nimport {HttpBadRequestError} from '@themost/common/errors';\nimport {HttpConsumer} from './consumers';\nimport {HttpUnauthorizedError} from \"@themost/common/errors\";\nimport {TraceUtils} from \"@themost/common/utils\";\nimport {LangUtils} from \"@themost/common/utils\";\nimport {DataTypeValidator,MaxLengthValidator,MinLengthValidator,PatternValidator,RequiredValidator} from '@themost/data/validators';\nimport {Args} from \"@themost/common/utils\";\n\n/**\n * @class\n * @extends Error\n */\nexport class DecoratorError extends Error {\n    constructor() {\n        super('Decorator is not valid on this declaration type.');\n    }\n}\n\nexport function httpGet() {\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value === 'function') {\n            descriptor.value.httpGet = true;\n        }\n        return descriptor;\n    }\n}\n\nexport function httpPost() {\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value !== 'function') {\n            throw new DecoratorError();\n        }\n        descriptor.value.httpPost = true;\n        return descriptor;\n    }\n}\n\nexport function httpPut() {\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value !== 'function') {\n            throw new DecoratorError();\n        }\n        descriptor.value.httpPut = true;\n        return descriptor;\n    }\n}\n\nexport function httpDelete() {\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value !== 'function') {\n            throw new DecoratorError();\n        }\n        descriptor.value.httpDelete = true;\n        return descriptor;\n    }\n}\n/**\n *\n * @param {string} name\n * @returns {Function}\n */\nexport function httpAction(name) {\n    if (typeof name !== 'string') {\n        throw new TypeError('Action name must be a string');\n    }\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value !== 'function') {\n            throw new DecoratorError();\n        }\n        descriptor.value.httpAction = name;\n        return descriptor;\n    }\n}\n\n/**\n* @class\n* @abstract\n* @property {string} name\n* @property {string} type\n* @property {RegExp|string} pattern\n* @property {date|number|*} minValue\n* @property {date|number|*} maxValue\n* @property {number} minLength\n* @property {number} maxLength\n* @property {boolean} required\n* @property {string} message\n* @constructor\n*/\nfunction HttpParamAttributeOptions() {\n    \"use strict\";\n}\n\n/**\n * @param {*=} options\n * @returns {Function}\n */\nexport function httpParam(options) {\n    if (typeof options !== 'object') { throw new TypeError('Parameter options must be an object'); }\n    if (typeof options.name !== 'string') { throw new TypeError('Parameter name must be a string'); }\n    return function (target, key, descriptor) {\n        if (typeof descriptor.value !== 'function') {\n            throw new Error('Decorator is not valid on this declaration type.');\n        }\n\n        descriptor.value.httpParams = descriptor.value.httpParams || { };\n        descriptor.value.httpParams[options.name] = _.extend({\"type\":\"Text\"}, options);\n        if (typeof descriptor.value.httpParam === 'undefined') {\n            descriptor.value.httpParam = new HttpConsumer((context)=> {\n                const httpParamValidationFailedCallback = function httpParamValidationFailedCallback(context, httpParam, validationResult) {\n                    \"use strict\";\n                    TraceUtils.log(_.assign(validationResult, {\n                        \"param\":httpParam,\n                        \"request\": {\n                            \"url\":context.request.url,\n                            \"method\":context.request.method\n                        }\n                    }));\n                    return Q.reject(new HttpBadRequestError('Bad request parameter', httpParam.message || validationResult.message));\n                };\n                const methodParams = LangUtils.getFunctionParams(descriptor.value);\n                const httpParams = descriptor.value.httpParams;\n                if (methodParams.length>0) {\n                    let k = 0, httpParam, validator, validationResult, functionParam, contextParam;\n                    while (k < methodParams.length) {\n                        functionParam = methodParams[k];\n                        if (typeof context.getParam === 'function') {\n                            contextParam = context.getParam(functionParam);\n                        }\n                        else {\n                            contextParam = context.params[functionParam];\n                        }\n                        if (_.isObject(httpParams)) {\n                            httpParam = httpParams[functionParam];\n                            if (_.isObject(httpParam)) {\n                                if (typeof httpParam.type === 'string') {\n                                    //--validate type\n                                    validator = new DataTypeValidator(httpParam.type);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                                if (httpParam.pattern instanceof RegExp) {\n                                    //--validate pattern\n                                    validator = new PatternValidator(httpParam.pattern);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                                if (typeof httpParam.minLength === 'number') {\n                                    //--validate min length\n                                    validator = new MinLengthValidator(httpParam.minLength);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                                if (typeof httpParam.maxLength === 'number') {\n                                    //--validate max length\n                                    validator = new MaxLengthValidator(httpParam.maxLength);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                                if (typeof httpParam.minValue !== 'undefined') {\n                                    //--validate min value\n                                    validator = new MinValueValidator(httpParam.minValue);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                                if (typeof httpParam.maxValue !== 'undefined') {\n                                    //--validate max value\n                                    validator = new MaxValueValidator(httpParam.required);\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n\n                                if ((typeof httpParam.required !== 'undefined') && (httpParam.required === true)) {\n                                    //--validate required value\n                                    validator = new RequiredValidator();\n                                    validator.setContext(context);\n                                    validationResult = validator.validateSync(contextParam);\n                                    if (validationResult) {\n                                        return httpParamValidationFailedCallback(context, httpParam, validationResult);\n                                    }\n                                }\n                            }\n                        }\n                        k += 1;\n                    }\n                }\n                return Q();\n            });\n        }\n        return descriptor;\n    }\n}\n/**\n *\n * @param {boolean=} value\n * @returns {Function}\n */\nexport function httpAuthorize(value) {\n    return function (target, key, descriptor) {\n        Args.check(typeof descriptor.value === 'function', new DecoratorError());\n        let authorize = true;\n        if (typeof value === 'boolean') {\n            authorize = value;\n        }\n        if (authorize) {\n            descriptor.value.authorize = new HttpConsumer((context) => {\n                if (context.user && context.user.name !== 'anonymous') {\n                    return Q();\n                }\n                return Q.reject(new HttpUnauthorizedError());\n            });\n        }\n        return descriptor;\n    }\n}"]}